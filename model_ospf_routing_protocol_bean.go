/*
BlueCat Address Manager 9.5 RESTful v2 API

The **BlueCat Address Manager 9.5 RESTful v2 API** is a new RESTful API for Address Manager that presents Address Manager objects as resources. Each resource has a unique endpoint, and related resources are grouped in collections. To fetch an individual resource, a `GET` request is sent to the resource's endpoint. To fetch all resources in a collection, a `GET` request is sent to the collection's endpoint.  The RESTful v2 API is [hypermedia driven](https://en.wikipedia.org/wiki/HATEOAS) and uses the [HAL](https://en.wikipedia.org/wiki/Hypertext_Application_Language) format for representing links. When navigating through the API, you can use those links to navigate to related resources or child resources of the requested endpoint. The API supports the following media types for most endpoints:  `application/hal+json`, `application/json`, and `text/csv`.  For authentication, the API supports both `Basic` and `Bearer` HTTP authentication schemes.  To get started, create a session and receive credentials for `Basic` authentication by sending a `POST` request to the [/sessions](#/Admin%20Resources/postSession) endpoint, with a message body containing the user's credentials:  ```{\"username\":\"apiuser\", \"password\":\"apipass\"}```  The response will contain an `apiToken` field that can be entered with the username in the Swagger UI **Authorize** dialog. The response will also contain a `basicAuthenticationCredentials` field containing a base64 encoding of the requester's username and API token delimited by a colon. This string can be injected directly into request `Authorization` headers in the following format:  ```Authorization: Basic YXBpOlQ0OExOT3VIRGhDcnVBNEo1bGFES3JuS3hTZC9QK3pjczZXTzBJMDY=```  For full details on API format and authentication methods, refer to the Address Manager RESTful v2 API Guide on the BlueCat Documentation Portal.

API version: 9.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gobam2

import (
	"encoding/json"
)

// checks if the OspfRoutingProtocolBean type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OspfRoutingProtocolBean{}

// OspfRoutingProtocolBean struct for OspfRoutingProtocolBean
type OspfRoutingProtocolBean struct {
	RoutingProtocolBean
	// Indicates whether authentication is enabled.
	AuthenticationEnabled *bool `json:"authenticationEnabled,omitempty"`
	// The password for authentication.
	AuthenticationPassword *string `json:"authenticationPassword,omitempty" validate:"regexp=^.*\\\\S+.*$"`
	// The authentication key used for OSPF. The authentication key is used to compute the MD5 hash that is used to authenticate OSPF packets.
	AuthenticationKey *string `json:"authenticationKey,omitempty" validate:"regexp=^.*\\\\S+.*$"`
	// The length of time that the peer/neighbor router will maintain a route to the primary router in the absence of hello messages.
	DeadInterval *string `json:"deadInterval,omitempty"`
	// The length of time that the primary router contacts its peer/neighbor to indicate that it's still active.
	HelloInterval *string `json:"helloInterval,omitempty"`
	// The OSPF area ID.
	AreaId *string `json:"areaId,omitempty"`
	// Indicates whether an OSPF subnet is used.
	StubArea *bool `json:"stubArea,omitempty"`
	Password *string `json:"password,omitempty"`
}

// NewOspfRoutingProtocolBean instantiates a new OspfRoutingProtocolBean object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOspfRoutingProtocolBean() *OspfRoutingProtocolBean {
	this := OspfRoutingProtocolBean{}
	return &this
}

// NewOspfRoutingProtocolBeanWithDefaults instantiates a new OspfRoutingProtocolBean object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOspfRoutingProtocolBeanWithDefaults() *OspfRoutingProtocolBean {
	this := OspfRoutingProtocolBean{}
	return &this
}

// GetAuthenticationEnabled returns the AuthenticationEnabled field value if set, zero value otherwise.
func (o *OspfRoutingProtocolBean) GetAuthenticationEnabled() bool {
	if o == nil || IsNil(o.AuthenticationEnabled) {
		var ret bool
		return ret
	}
	return *o.AuthenticationEnabled
}

// GetAuthenticationEnabledOk returns a tuple with the AuthenticationEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OspfRoutingProtocolBean) GetAuthenticationEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.AuthenticationEnabled) {
		return nil, false
	}
	return o.AuthenticationEnabled, true
}

// HasAuthenticationEnabled returns a boolean if a field has been set.
func (o *OspfRoutingProtocolBean) HasAuthenticationEnabled() bool {
	if o != nil && !IsNil(o.AuthenticationEnabled) {
		return true
	}

	return false
}

// SetAuthenticationEnabled gets a reference to the given bool and assigns it to the AuthenticationEnabled field.
func (o *OspfRoutingProtocolBean) SetAuthenticationEnabled(v bool) {
	o.AuthenticationEnabled = &v
}

// GetAuthenticationPassword returns the AuthenticationPassword field value if set, zero value otherwise.
func (o *OspfRoutingProtocolBean) GetAuthenticationPassword() string {
	if o == nil || IsNil(o.AuthenticationPassword) {
		var ret string
		return ret
	}
	return *o.AuthenticationPassword
}

// GetAuthenticationPasswordOk returns a tuple with the AuthenticationPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OspfRoutingProtocolBean) GetAuthenticationPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.AuthenticationPassword) {
		return nil, false
	}
	return o.AuthenticationPassword, true
}

// HasAuthenticationPassword returns a boolean if a field has been set.
func (o *OspfRoutingProtocolBean) HasAuthenticationPassword() bool {
	if o != nil && !IsNil(o.AuthenticationPassword) {
		return true
	}

	return false
}

// SetAuthenticationPassword gets a reference to the given string and assigns it to the AuthenticationPassword field.
func (o *OspfRoutingProtocolBean) SetAuthenticationPassword(v string) {
	o.AuthenticationPassword = &v
}

// GetAuthenticationKey returns the AuthenticationKey field value if set, zero value otherwise.
func (o *OspfRoutingProtocolBean) GetAuthenticationKey() string {
	if o == nil || IsNil(o.AuthenticationKey) {
		var ret string
		return ret
	}
	return *o.AuthenticationKey
}

// GetAuthenticationKeyOk returns a tuple with the AuthenticationKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OspfRoutingProtocolBean) GetAuthenticationKeyOk() (*string, bool) {
	if o == nil || IsNil(o.AuthenticationKey) {
		return nil, false
	}
	return o.AuthenticationKey, true
}

// HasAuthenticationKey returns a boolean if a field has been set.
func (o *OspfRoutingProtocolBean) HasAuthenticationKey() bool {
	if o != nil && !IsNil(o.AuthenticationKey) {
		return true
	}

	return false
}

// SetAuthenticationKey gets a reference to the given string and assigns it to the AuthenticationKey field.
func (o *OspfRoutingProtocolBean) SetAuthenticationKey(v string) {
	o.AuthenticationKey = &v
}

// GetDeadInterval returns the DeadInterval field value if set, zero value otherwise.
func (o *OspfRoutingProtocolBean) GetDeadInterval() string {
	if o == nil || IsNil(o.DeadInterval) {
		var ret string
		return ret
	}
	return *o.DeadInterval
}

// GetDeadIntervalOk returns a tuple with the DeadInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OspfRoutingProtocolBean) GetDeadIntervalOk() (*string, bool) {
	if o == nil || IsNil(o.DeadInterval) {
		return nil, false
	}
	return o.DeadInterval, true
}

// HasDeadInterval returns a boolean if a field has been set.
func (o *OspfRoutingProtocolBean) HasDeadInterval() bool {
	if o != nil && !IsNil(o.DeadInterval) {
		return true
	}

	return false
}

// SetDeadInterval gets a reference to the given string and assigns it to the DeadInterval field.
func (o *OspfRoutingProtocolBean) SetDeadInterval(v string) {
	o.DeadInterval = &v
}

// GetHelloInterval returns the HelloInterval field value if set, zero value otherwise.
func (o *OspfRoutingProtocolBean) GetHelloInterval() string {
	if o == nil || IsNil(o.HelloInterval) {
		var ret string
		return ret
	}
	return *o.HelloInterval
}

// GetHelloIntervalOk returns a tuple with the HelloInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OspfRoutingProtocolBean) GetHelloIntervalOk() (*string, bool) {
	if o == nil || IsNil(o.HelloInterval) {
		return nil, false
	}
	return o.HelloInterval, true
}

// HasHelloInterval returns a boolean if a field has been set.
func (o *OspfRoutingProtocolBean) HasHelloInterval() bool {
	if o != nil && !IsNil(o.HelloInterval) {
		return true
	}

	return false
}

// SetHelloInterval gets a reference to the given string and assigns it to the HelloInterval field.
func (o *OspfRoutingProtocolBean) SetHelloInterval(v string) {
	o.HelloInterval = &v
}

// GetAreaId returns the AreaId field value if set, zero value otherwise.
func (o *OspfRoutingProtocolBean) GetAreaId() string {
	if o == nil || IsNil(o.AreaId) {
		var ret string
		return ret
	}
	return *o.AreaId
}

// GetAreaIdOk returns a tuple with the AreaId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OspfRoutingProtocolBean) GetAreaIdOk() (*string, bool) {
	if o == nil || IsNil(o.AreaId) {
		return nil, false
	}
	return o.AreaId, true
}

// HasAreaId returns a boolean if a field has been set.
func (o *OspfRoutingProtocolBean) HasAreaId() bool {
	if o != nil && !IsNil(o.AreaId) {
		return true
	}

	return false
}

// SetAreaId gets a reference to the given string and assigns it to the AreaId field.
func (o *OspfRoutingProtocolBean) SetAreaId(v string) {
	o.AreaId = &v
}

// GetStubArea returns the StubArea field value if set, zero value otherwise.
func (o *OspfRoutingProtocolBean) GetStubArea() bool {
	if o == nil || IsNil(o.StubArea) {
		var ret bool
		return ret
	}
	return *o.StubArea
}

// GetStubAreaOk returns a tuple with the StubArea field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OspfRoutingProtocolBean) GetStubAreaOk() (*bool, bool) {
	if o == nil || IsNil(o.StubArea) {
		return nil, false
	}
	return o.StubArea, true
}

// HasStubArea returns a boolean if a field has been set.
func (o *OspfRoutingProtocolBean) HasStubArea() bool {
	if o != nil && !IsNil(o.StubArea) {
		return true
	}

	return false
}

// SetStubArea gets a reference to the given bool and assigns it to the StubArea field.
func (o *OspfRoutingProtocolBean) SetStubArea(v bool) {
	o.StubArea = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *OspfRoutingProtocolBean) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OspfRoutingProtocolBean) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *OspfRoutingProtocolBean) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *OspfRoutingProtocolBean) SetPassword(v string) {
	o.Password = &v
}

func (o OspfRoutingProtocolBean) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OspfRoutingProtocolBean) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuthenticationEnabled) {
		toSerialize["authenticationEnabled"] = o.AuthenticationEnabled
	}
	if !IsNil(o.AuthenticationPassword) {
		toSerialize["authenticationPassword"] = o.AuthenticationPassword
	}
	if !IsNil(o.AuthenticationKey) {
		toSerialize["authenticationKey"] = o.AuthenticationKey
	}
	if !IsNil(o.DeadInterval) {
		toSerialize["deadInterval"] = o.DeadInterval
	}
	if !IsNil(o.HelloInterval) {
		toSerialize["helloInterval"] = o.HelloInterval
	}
	if !IsNil(o.AreaId) {
		toSerialize["areaId"] = o.AreaId
	}
	if !IsNil(o.StubArea) {
		toSerialize["stubArea"] = o.StubArea
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	return toSerialize, nil
}

type NullableOspfRoutingProtocolBean struct {
	value *OspfRoutingProtocolBean
	isSet bool
}

func (v NullableOspfRoutingProtocolBean) Get() *OspfRoutingProtocolBean {
	return v.value
}

func (v *NullableOspfRoutingProtocolBean) Set(val *OspfRoutingProtocolBean) {
	v.value = val
	v.isSet = true
}

func (v NullableOspfRoutingProtocolBean) IsSet() bool {
	return v.isSet
}

func (v *NullableOspfRoutingProtocolBean) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOspfRoutingProtocolBean(val *OspfRoutingProtocolBean) *NullableOspfRoutingProtocolBean {
	return &NullableOspfRoutingProtocolBean{value: val, isSet: true}
}

func (v NullableOspfRoutingProtocolBean) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOspfRoutingProtocolBean) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



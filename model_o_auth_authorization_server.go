/*
BlueCat Address Manager 9.5 RESTful v2 API

The **BlueCat Address Manager 9.5 RESTful v2 API** is a new RESTful API for Address Manager that presents Address Manager objects as resources. Each resource has a unique endpoint, and related resources are grouped in collections. To fetch an individual resource, a `GET` request is sent to the resource's endpoint. To fetch all resources in a collection, a `GET` request is sent to the collection's endpoint.  The RESTful v2 API is [hypermedia driven](https://en.wikipedia.org/wiki/HATEOAS) and uses the [HAL](https://en.wikipedia.org/wiki/Hypertext_Application_Language) format for representing links. When navigating through the API, you can use those links to navigate to related resources or child resources of the requested endpoint. The API supports the following media types for most endpoints:  `application/hal+json`, `application/json`, and `text/csv`.  For authentication, the API supports both `Basic` and `Bearer` HTTP authentication schemes.  To get started, create a session and receive credentials for `Basic` authentication by sending a `POST` request to the [/sessions](#/Admin%20Resources/postSession) endpoint, with a message body containing the user's credentials:  ```{\"username\":\"apiuser\", \"password\":\"apipass\"}```  The response will contain an `apiToken` field that can be entered with the username in the Swagger UI **Authorize** dialog. The response will also contain a `basicAuthenticationCredentials` field containing a base64 encoding of the requester's username and API token delimited by a colon. This string can be injected directly into request `Authorization` headers in the following format:  ```Authorization: Basic YXBpOlQ0OExOT3VIRGhDcnVBNEo1bGFES3JuS3hTZC9QK3pjczZXTzBJMDY=```  For full details on API format and authentication methods, refer to the Address Manager RESTful v2 API Guide on the BlueCat Documentation Portal.

API version: 9.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gobam2

import (
	"encoding/json"
)

// checks if the OAuthAuthorizationServer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OAuthAuthorizationServer{}

// OAuthAuthorizationServer struct for OAuthAuthorizationServer
type OAuthAuthorizationServer struct {
	Authenticator
	// The type of authenticator.
	Type *string `json:"type,omitempty"`
	// The description of the authorization server.
	Description *string `json:"description,omitempty"`
	// Indicates whether OAuth authentication is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// The user claim name of the authorization server.
	UserClaim *string `json:"userClaim,omitempty" validate:"regexp=^.*\\\\S+.*$"`
	// The group claim name of the authorization server.
	GroupClaim *string `json:"groupClaim,omitempty" validate:"regexp=^.*\\\\S+.*$"`
	// The email claim name of the authorization server.
	EmailClaim *string `json:"emailClaim,omitempty" validate:"regexp=^.*\\\\S+.*$"`
	// The method that indicates where the token validation occurs.
	ValidationMethod *string `json:"validationMethod,omitempty"`
	// The public identifier of the application.
	ClientId *string `json:"clientId,omitempty" validate:"regexp=^.*\\\\S+.*$"`
	// The client secret known only to the application and authorization server.
	ClientSecret *string `json:"clientSecret,omitempty" validate:"regexp=^.*\\\\S+.*$"`
	// The introspection endpoint that allows Address Manager to check the validity of access tokens.
	IntrospectionUrl *string `json:"introspectionUrl,omitempty"`
	// The endpoint containing information about the user, including the group membership information and user ID.
	UserInfoUrl *string `json:"userInfoUrl,omitempty"`
	// The authorization method used when Address Manager sends the client ID and client secret to the authorization server.
	AuthorizationOption *string `json:"authorizationOption,omitempty"`
	// The name of the BAM API bearer token obtained from the authorization server.
	Audience *string `json:"audience,omitempty" validate:"regexp=^.*\\\\S+.*$"`
	// The name of the token issuer.
	Issuer *string `json:"issuer,omitempty" validate:"regexp=^.*\\\\S+.*$"`
	// The authoritative server signing certificate.
	SigningCertificate *string `json:"signingCertificate,omitempty"`
}

// NewOAuthAuthorizationServer instantiates a new OAuthAuthorizationServer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOAuthAuthorizationServer() *OAuthAuthorizationServer {
	this := OAuthAuthorizationServer{}
	return &this
}

// NewOAuthAuthorizationServerWithDefaults instantiates a new OAuthAuthorizationServer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOAuthAuthorizationServerWithDefaults() *OAuthAuthorizationServer {
	this := OAuthAuthorizationServer{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *OAuthAuthorizationServer) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthAuthorizationServer) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *OAuthAuthorizationServer) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *OAuthAuthorizationServer) SetType(v string) {
	o.Type = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *OAuthAuthorizationServer) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthAuthorizationServer) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *OAuthAuthorizationServer) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *OAuthAuthorizationServer) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *OAuthAuthorizationServer) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthAuthorizationServer) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *OAuthAuthorizationServer) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *OAuthAuthorizationServer) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetUserClaim returns the UserClaim field value if set, zero value otherwise.
func (o *OAuthAuthorizationServer) GetUserClaim() string {
	if o == nil || IsNil(o.UserClaim) {
		var ret string
		return ret
	}
	return *o.UserClaim
}

// GetUserClaimOk returns a tuple with the UserClaim field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthAuthorizationServer) GetUserClaimOk() (*string, bool) {
	if o == nil || IsNil(o.UserClaim) {
		return nil, false
	}
	return o.UserClaim, true
}

// HasUserClaim returns a boolean if a field has been set.
func (o *OAuthAuthorizationServer) HasUserClaim() bool {
	if o != nil && !IsNil(o.UserClaim) {
		return true
	}

	return false
}

// SetUserClaim gets a reference to the given string and assigns it to the UserClaim field.
func (o *OAuthAuthorizationServer) SetUserClaim(v string) {
	o.UserClaim = &v
}

// GetGroupClaim returns the GroupClaim field value if set, zero value otherwise.
func (o *OAuthAuthorizationServer) GetGroupClaim() string {
	if o == nil || IsNil(o.GroupClaim) {
		var ret string
		return ret
	}
	return *o.GroupClaim
}

// GetGroupClaimOk returns a tuple with the GroupClaim field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthAuthorizationServer) GetGroupClaimOk() (*string, bool) {
	if o == nil || IsNil(o.GroupClaim) {
		return nil, false
	}
	return o.GroupClaim, true
}

// HasGroupClaim returns a boolean if a field has been set.
func (o *OAuthAuthorizationServer) HasGroupClaim() bool {
	if o != nil && !IsNil(o.GroupClaim) {
		return true
	}

	return false
}

// SetGroupClaim gets a reference to the given string and assigns it to the GroupClaim field.
func (o *OAuthAuthorizationServer) SetGroupClaim(v string) {
	o.GroupClaim = &v
}

// GetEmailClaim returns the EmailClaim field value if set, zero value otherwise.
func (o *OAuthAuthorizationServer) GetEmailClaim() string {
	if o == nil || IsNil(o.EmailClaim) {
		var ret string
		return ret
	}
	return *o.EmailClaim
}

// GetEmailClaimOk returns a tuple with the EmailClaim field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthAuthorizationServer) GetEmailClaimOk() (*string, bool) {
	if o == nil || IsNil(o.EmailClaim) {
		return nil, false
	}
	return o.EmailClaim, true
}

// HasEmailClaim returns a boolean if a field has been set.
func (o *OAuthAuthorizationServer) HasEmailClaim() bool {
	if o != nil && !IsNil(o.EmailClaim) {
		return true
	}

	return false
}

// SetEmailClaim gets a reference to the given string and assigns it to the EmailClaim field.
func (o *OAuthAuthorizationServer) SetEmailClaim(v string) {
	o.EmailClaim = &v
}

// GetValidationMethod returns the ValidationMethod field value if set, zero value otherwise.
func (o *OAuthAuthorizationServer) GetValidationMethod() string {
	if o == nil || IsNil(o.ValidationMethod) {
		var ret string
		return ret
	}
	return *o.ValidationMethod
}

// GetValidationMethodOk returns a tuple with the ValidationMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthAuthorizationServer) GetValidationMethodOk() (*string, bool) {
	if o == nil || IsNil(o.ValidationMethod) {
		return nil, false
	}
	return o.ValidationMethod, true
}

// HasValidationMethod returns a boolean if a field has been set.
func (o *OAuthAuthorizationServer) HasValidationMethod() bool {
	if o != nil && !IsNil(o.ValidationMethod) {
		return true
	}

	return false
}

// SetValidationMethod gets a reference to the given string and assigns it to the ValidationMethod field.
func (o *OAuthAuthorizationServer) SetValidationMethod(v string) {
	o.ValidationMethod = &v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *OAuthAuthorizationServer) GetClientId() string {
	if o == nil || IsNil(o.ClientId) {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthAuthorizationServer) GetClientIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClientId) {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *OAuthAuthorizationServer) HasClientId() bool {
	if o != nil && !IsNil(o.ClientId) {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *OAuthAuthorizationServer) SetClientId(v string) {
	o.ClientId = &v
}

// GetClientSecret returns the ClientSecret field value if set, zero value otherwise.
func (o *OAuthAuthorizationServer) GetClientSecret() string {
	if o == nil || IsNil(o.ClientSecret) {
		var ret string
		return ret
	}
	return *o.ClientSecret
}

// GetClientSecretOk returns a tuple with the ClientSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthAuthorizationServer) GetClientSecretOk() (*string, bool) {
	if o == nil || IsNil(o.ClientSecret) {
		return nil, false
	}
	return o.ClientSecret, true
}

// HasClientSecret returns a boolean if a field has been set.
func (o *OAuthAuthorizationServer) HasClientSecret() bool {
	if o != nil && !IsNil(o.ClientSecret) {
		return true
	}

	return false
}

// SetClientSecret gets a reference to the given string and assigns it to the ClientSecret field.
func (o *OAuthAuthorizationServer) SetClientSecret(v string) {
	o.ClientSecret = &v
}

// GetIntrospectionUrl returns the IntrospectionUrl field value if set, zero value otherwise.
func (o *OAuthAuthorizationServer) GetIntrospectionUrl() string {
	if o == nil || IsNil(o.IntrospectionUrl) {
		var ret string
		return ret
	}
	return *o.IntrospectionUrl
}

// GetIntrospectionUrlOk returns a tuple with the IntrospectionUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthAuthorizationServer) GetIntrospectionUrlOk() (*string, bool) {
	if o == nil || IsNil(o.IntrospectionUrl) {
		return nil, false
	}
	return o.IntrospectionUrl, true
}

// HasIntrospectionUrl returns a boolean if a field has been set.
func (o *OAuthAuthorizationServer) HasIntrospectionUrl() bool {
	if o != nil && !IsNil(o.IntrospectionUrl) {
		return true
	}

	return false
}

// SetIntrospectionUrl gets a reference to the given string and assigns it to the IntrospectionUrl field.
func (o *OAuthAuthorizationServer) SetIntrospectionUrl(v string) {
	o.IntrospectionUrl = &v
}

// GetUserInfoUrl returns the UserInfoUrl field value if set, zero value otherwise.
func (o *OAuthAuthorizationServer) GetUserInfoUrl() string {
	if o == nil || IsNil(o.UserInfoUrl) {
		var ret string
		return ret
	}
	return *o.UserInfoUrl
}

// GetUserInfoUrlOk returns a tuple with the UserInfoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthAuthorizationServer) GetUserInfoUrlOk() (*string, bool) {
	if o == nil || IsNil(o.UserInfoUrl) {
		return nil, false
	}
	return o.UserInfoUrl, true
}

// HasUserInfoUrl returns a boolean if a field has been set.
func (o *OAuthAuthorizationServer) HasUserInfoUrl() bool {
	if o != nil && !IsNil(o.UserInfoUrl) {
		return true
	}

	return false
}

// SetUserInfoUrl gets a reference to the given string and assigns it to the UserInfoUrl field.
func (o *OAuthAuthorizationServer) SetUserInfoUrl(v string) {
	o.UserInfoUrl = &v
}

// GetAuthorizationOption returns the AuthorizationOption field value if set, zero value otherwise.
func (o *OAuthAuthorizationServer) GetAuthorizationOption() string {
	if o == nil || IsNil(o.AuthorizationOption) {
		var ret string
		return ret
	}
	return *o.AuthorizationOption
}

// GetAuthorizationOptionOk returns a tuple with the AuthorizationOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthAuthorizationServer) GetAuthorizationOptionOk() (*string, bool) {
	if o == nil || IsNil(o.AuthorizationOption) {
		return nil, false
	}
	return o.AuthorizationOption, true
}

// HasAuthorizationOption returns a boolean if a field has been set.
func (o *OAuthAuthorizationServer) HasAuthorizationOption() bool {
	if o != nil && !IsNil(o.AuthorizationOption) {
		return true
	}

	return false
}

// SetAuthorizationOption gets a reference to the given string and assigns it to the AuthorizationOption field.
func (o *OAuthAuthorizationServer) SetAuthorizationOption(v string) {
	o.AuthorizationOption = &v
}

// GetAudience returns the Audience field value if set, zero value otherwise.
func (o *OAuthAuthorizationServer) GetAudience() string {
	if o == nil || IsNil(o.Audience) {
		var ret string
		return ret
	}
	return *o.Audience
}

// GetAudienceOk returns a tuple with the Audience field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthAuthorizationServer) GetAudienceOk() (*string, bool) {
	if o == nil || IsNil(o.Audience) {
		return nil, false
	}
	return o.Audience, true
}

// HasAudience returns a boolean if a field has been set.
func (o *OAuthAuthorizationServer) HasAudience() bool {
	if o != nil && !IsNil(o.Audience) {
		return true
	}

	return false
}

// SetAudience gets a reference to the given string and assigns it to the Audience field.
func (o *OAuthAuthorizationServer) SetAudience(v string) {
	o.Audience = &v
}

// GetIssuer returns the Issuer field value if set, zero value otherwise.
func (o *OAuthAuthorizationServer) GetIssuer() string {
	if o == nil || IsNil(o.Issuer) {
		var ret string
		return ret
	}
	return *o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthAuthorizationServer) GetIssuerOk() (*string, bool) {
	if o == nil || IsNil(o.Issuer) {
		return nil, false
	}
	return o.Issuer, true
}

// HasIssuer returns a boolean if a field has been set.
func (o *OAuthAuthorizationServer) HasIssuer() bool {
	if o != nil && !IsNil(o.Issuer) {
		return true
	}

	return false
}

// SetIssuer gets a reference to the given string and assigns it to the Issuer field.
func (o *OAuthAuthorizationServer) SetIssuer(v string) {
	o.Issuer = &v
}

// GetSigningCertificate returns the SigningCertificate field value if set, zero value otherwise.
func (o *OAuthAuthorizationServer) GetSigningCertificate() string {
	if o == nil || IsNil(o.SigningCertificate) {
		var ret string
		return ret
	}
	return *o.SigningCertificate
}

// GetSigningCertificateOk returns a tuple with the SigningCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthAuthorizationServer) GetSigningCertificateOk() (*string, bool) {
	if o == nil || IsNil(o.SigningCertificate) {
		return nil, false
	}
	return o.SigningCertificate, true
}

// HasSigningCertificate returns a boolean if a field has been set.
func (o *OAuthAuthorizationServer) HasSigningCertificate() bool {
	if o != nil && !IsNil(o.SigningCertificate) {
		return true
	}

	return false
}

// SetSigningCertificate gets a reference to the given string and assigns it to the SigningCertificate field.
func (o *OAuthAuthorizationServer) SetSigningCertificate(v string) {
	o.SigningCertificate = &v
}

func (o OAuthAuthorizationServer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OAuthAuthorizationServer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.UserClaim) {
		toSerialize["userClaim"] = o.UserClaim
	}
	if !IsNil(o.GroupClaim) {
		toSerialize["groupClaim"] = o.GroupClaim
	}
	if !IsNil(o.EmailClaim) {
		toSerialize["emailClaim"] = o.EmailClaim
	}
	if !IsNil(o.ValidationMethod) {
		toSerialize["validationMethod"] = o.ValidationMethod
	}
	if !IsNil(o.ClientId) {
		toSerialize["clientId"] = o.ClientId
	}
	if !IsNil(o.ClientSecret) {
		toSerialize["clientSecret"] = o.ClientSecret
	}
	if !IsNil(o.IntrospectionUrl) {
		toSerialize["introspectionUrl"] = o.IntrospectionUrl
	}
	if !IsNil(o.UserInfoUrl) {
		toSerialize["userInfoUrl"] = o.UserInfoUrl
	}
	if !IsNil(o.AuthorizationOption) {
		toSerialize["authorizationOption"] = o.AuthorizationOption
	}
	if !IsNil(o.Audience) {
		toSerialize["audience"] = o.Audience
	}
	if !IsNil(o.Issuer) {
		toSerialize["issuer"] = o.Issuer
	}
	if !IsNil(o.SigningCertificate) {
		toSerialize["signingCertificate"] = o.SigningCertificate
	}
	return toSerialize, nil
}

type NullableOAuthAuthorizationServer struct {
	value *OAuthAuthorizationServer
	isSet bool
}

func (v NullableOAuthAuthorizationServer) Get() *OAuthAuthorizationServer {
	return v.value
}

func (v *NullableOAuthAuthorizationServer) Set(val *OAuthAuthorizationServer) {
	v.value = val
	v.isSet = true
}

func (v NullableOAuthAuthorizationServer) IsSet() bool {
	return v.isSet
}

func (v *NullableOAuthAuthorizationServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOAuthAuthorizationServer(val *OAuthAuthorizationServer) *NullableOAuthAuthorizationServer {
	return &NullableOAuthAuthorizationServer{value: val, isSet: true}
}

func (v NullableOAuthAuthorizationServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOAuthAuthorizationServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



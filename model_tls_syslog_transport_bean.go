/*
BlueCat Address Manager 9.5 RESTful v2 API

The **BlueCat Address Manager 9.5 RESTful v2 API** is a new RESTful API for Address Manager that presents Address Manager objects as resources. Each resource has a unique endpoint, and related resources are grouped in collections. To fetch an individual resource, a `GET` request is sent to the resource's endpoint. To fetch all resources in a collection, a `GET` request is sent to the collection's endpoint.  The RESTful v2 API is [hypermedia driven](https://en.wikipedia.org/wiki/HATEOAS) and uses the [HAL](https://en.wikipedia.org/wiki/Hypertext_Application_Language) format for representing links. When navigating through the API, you can use those links to navigate to related resources or child resources of the requested endpoint. The API supports the following media types for most endpoints:  `application/hal+json`, `application/json`, and `text/csv`.  For authentication, the API supports both `Basic` and `Bearer` HTTP authentication schemes.  To get started, create a session and receive credentials for `Basic` authentication by sending a `POST` request to the [/sessions](#/Admin%20Resources/postSession) endpoint, with a message body containing the user's credentials:  ```{\"username\":\"apiuser\", \"password\":\"apipass\"}```  The response will contain an `apiToken` field that can be entered with the username in the Swagger UI **Authorize** dialog. The response will also contain a `basicAuthenticationCredentials` field containing a base64 encoding of the requester's username and API token delimited by a colon. This string can be injected directly into request `Authorization` headers in the following format:  ```Authorization: Basic YXBpOlQ0OExOT3VIRGhDcnVBNEo1bGFES3JuS3hTZC9QK3pjczZXTzBJMDY=```  For full details on API format and authentication methods, refer to the Address Manager RESTful v2 API Guide on the BlueCat Documentation Portal.

API version: 9.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gobam2

import (
	"encoding/json"
)

// checks if the TlsSyslogTransportBean type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TlsSyslogTransportBean{}

// TlsSyslogTransportBean struct for TlsSyslogTransportBean
type TlsSyslogTransportBean struct {
	SyslogTransportBean
	PeerVerify *string `json:"peerVerify,omitempty"`
	CaCertificate *string `json:"caCertificate,omitempty"`
	Certificate *string `json:"certificate,omitempty"`
	PrivateKey *string `json:"privateKey,omitempty"`
}

// NewTlsSyslogTransportBean instantiates a new TlsSyslogTransportBean object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTlsSyslogTransportBean() *TlsSyslogTransportBean {
	this := TlsSyslogTransportBean{}
	return &this
}

// NewTlsSyslogTransportBeanWithDefaults instantiates a new TlsSyslogTransportBean object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTlsSyslogTransportBeanWithDefaults() *TlsSyslogTransportBean {
	this := TlsSyslogTransportBean{}
	return &this
}

// GetPeerVerify returns the PeerVerify field value if set, zero value otherwise.
func (o *TlsSyslogTransportBean) GetPeerVerify() string {
	if o == nil || IsNil(o.PeerVerify) {
		var ret string
		return ret
	}
	return *o.PeerVerify
}

// GetPeerVerifyOk returns a tuple with the PeerVerify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TlsSyslogTransportBean) GetPeerVerifyOk() (*string, bool) {
	if o == nil || IsNil(o.PeerVerify) {
		return nil, false
	}
	return o.PeerVerify, true
}

// HasPeerVerify returns a boolean if a field has been set.
func (o *TlsSyslogTransportBean) HasPeerVerify() bool {
	if o != nil && !IsNil(o.PeerVerify) {
		return true
	}

	return false
}

// SetPeerVerify gets a reference to the given string and assigns it to the PeerVerify field.
func (o *TlsSyslogTransportBean) SetPeerVerify(v string) {
	o.PeerVerify = &v
}

// GetCaCertificate returns the CaCertificate field value if set, zero value otherwise.
func (o *TlsSyslogTransportBean) GetCaCertificate() string {
	if o == nil || IsNil(o.CaCertificate) {
		var ret string
		return ret
	}
	return *o.CaCertificate
}

// GetCaCertificateOk returns a tuple with the CaCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TlsSyslogTransportBean) GetCaCertificateOk() (*string, bool) {
	if o == nil || IsNil(o.CaCertificate) {
		return nil, false
	}
	return o.CaCertificate, true
}

// HasCaCertificate returns a boolean if a field has been set.
func (o *TlsSyslogTransportBean) HasCaCertificate() bool {
	if o != nil && !IsNil(o.CaCertificate) {
		return true
	}

	return false
}

// SetCaCertificate gets a reference to the given string and assigns it to the CaCertificate field.
func (o *TlsSyslogTransportBean) SetCaCertificate(v string) {
	o.CaCertificate = &v
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *TlsSyslogTransportBean) GetCertificate() string {
	if o == nil || IsNil(o.Certificate) {
		var ret string
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TlsSyslogTransportBean) GetCertificateOk() (*string, bool) {
	if o == nil || IsNil(o.Certificate) {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *TlsSyslogTransportBean) HasCertificate() bool {
	if o != nil && !IsNil(o.Certificate) {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given string and assigns it to the Certificate field.
func (o *TlsSyslogTransportBean) SetCertificate(v string) {
	o.Certificate = &v
}

// GetPrivateKey returns the PrivateKey field value if set, zero value otherwise.
func (o *TlsSyslogTransportBean) GetPrivateKey() string {
	if o == nil || IsNil(o.PrivateKey) {
		var ret string
		return ret
	}
	return *o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TlsSyslogTransportBean) GetPrivateKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PrivateKey) {
		return nil, false
	}
	return o.PrivateKey, true
}

// HasPrivateKey returns a boolean if a field has been set.
func (o *TlsSyslogTransportBean) HasPrivateKey() bool {
	if o != nil && !IsNil(o.PrivateKey) {
		return true
	}

	return false
}

// SetPrivateKey gets a reference to the given string and assigns it to the PrivateKey field.
func (o *TlsSyslogTransportBean) SetPrivateKey(v string) {
	o.PrivateKey = &v
}

func (o TlsSyslogTransportBean) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TlsSyslogTransportBean) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PeerVerify) {
		toSerialize["peerVerify"] = o.PeerVerify
	}
	if !IsNil(o.CaCertificate) {
		toSerialize["caCertificate"] = o.CaCertificate
	}
	if !IsNil(o.Certificate) {
		toSerialize["certificate"] = o.Certificate
	}
	if !IsNil(o.PrivateKey) {
		toSerialize["privateKey"] = o.PrivateKey
	}
	return toSerialize, nil
}

type NullableTlsSyslogTransportBean struct {
	value *TlsSyslogTransportBean
	isSet bool
}

func (v NullableTlsSyslogTransportBean) Get() *TlsSyslogTransportBean {
	return v.value
}

func (v *NullableTlsSyslogTransportBean) Set(val *TlsSyslogTransportBean) {
	v.value = val
	v.isSet = true
}

func (v NullableTlsSyslogTransportBean) IsSet() bool {
	return v.isSet
}

func (v *NullableTlsSyslogTransportBean) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTlsSyslogTransportBean(val *TlsSyslogTransportBean) *NullableTlsSyslogTransportBean {
	return &NullableTlsSyslogTransportBean{value: val, isSet: true}
}

func (v NullableTlsSyslogTransportBean) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTlsSyslogTransportBean) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



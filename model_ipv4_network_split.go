/*
BlueCat Address Manager 9.5 RESTful v2 API

The **BlueCat Address Manager 9.5 RESTful v2 API** is a new RESTful API for Address Manager that presents Address Manager objects as resources. Each resource has a unique endpoint, and related resources are grouped in collections. To fetch an individual resource, a `GET` request is sent to the resource's endpoint. To fetch all resources in a collection, a `GET` request is sent to the collection's endpoint.  The RESTful v2 API is [hypermedia driven](https://en.wikipedia.org/wiki/HATEOAS) and uses the [HAL](https://en.wikipedia.org/wiki/Hypertext_Application_Language) format for representing links. When navigating through the API, you can use those links to navigate to related resources or child resources of the requested endpoint. The API supports the following media types for most endpoints:  `application/hal+json`, `application/json`, and `text/csv`.  For authentication, the API supports both `Basic` and `Bearer` HTTP authentication schemes.  To get started, create a session and receive credentials for `Basic` authentication by sending a `POST` request to the [/sessions](#/Admin%20Resources/postSession) endpoint, with a message body containing the user's credentials:  ```{\"username\":\"apiuser\", \"password\":\"apipass\"}```  The response will contain an `apiToken` field that can be entered with the username in the Swagger UI **Authorize** dialog. The response will also contain a `basicAuthenticationCredentials` field containing a base64 encoding of the requester's username and API token delimited by a colon. This string can be injected directly into request `Authorization` headers in the following format:  ```Authorization: Basic YXBpOlQ0OExOT3VIRGhDcnVBNEo1bGFES3JuS3hTZC9QK3pjczZXTzBJMDY=```  For full details on API format and authentication methods, refer to the Address Manager RESTful v2 API Guide on the BlueCat Documentation Portal.

API version: 9.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gobam2

import (
	"encoding/json"
)

// checks if the IPv4NetworkSplit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IPv4NetworkSplit{}

// IPv4NetworkSplit struct for IPv4NetworkSplit
type IPv4NetworkSplit struct {
	Split
	// The resource type.
	Type *string `json:"type,omitempty"`
	Network *InlinedIPv4Network `json:"network,omitempty"`
	// The number of resultant sub-networks after the split.
	NetworkCount *int32 `json:"networkCount,omitempty"`
	// Indicates whether the gateway address of the original network is kept.
	GatewayPreserved *bool `json:"gatewayPreserved,omitempty"`
	// Indicates whether the first IP address after the network ID is assigned as the default gateway address.
	DefaultGatewayAssigned *bool `json:"defaultGatewayAssigned,omitempty"`
	// The method used to resolve conflicts between template items and the resource the template is applied to.
	ConflictResolutionStrategy *string `json:"conflictResolutionStrategy,omitempty"`
	Template *InlinedIPv4Template `json:"template,omitempty"`
}

// NewIPv4NetworkSplit instantiates a new IPv4NetworkSplit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIPv4NetworkSplit() *IPv4NetworkSplit {
	this := IPv4NetworkSplit{}
	return &this
}

// NewIPv4NetworkSplitWithDefaults instantiates a new IPv4NetworkSplit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIPv4NetworkSplitWithDefaults() *IPv4NetworkSplit {
	this := IPv4NetworkSplit{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IPv4NetworkSplit) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPv4NetworkSplit) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IPv4NetworkSplit) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *IPv4NetworkSplit) SetType(v string) {
	o.Type = &v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *IPv4NetworkSplit) GetNetwork() InlinedIPv4Network {
	if o == nil || IsNil(o.Network) {
		var ret InlinedIPv4Network
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPv4NetworkSplit) GetNetworkOk() (*InlinedIPv4Network, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *IPv4NetworkSplit) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given InlinedIPv4Network and assigns it to the Network field.
func (o *IPv4NetworkSplit) SetNetwork(v InlinedIPv4Network) {
	o.Network = &v
}

// GetNetworkCount returns the NetworkCount field value if set, zero value otherwise.
func (o *IPv4NetworkSplit) GetNetworkCount() int32 {
	if o == nil || IsNil(o.NetworkCount) {
		var ret int32
		return ret
	}
	return *o.NetworkCount
}

// GetNetworkCountOk returns a tuple with the NetworkCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPv4NetworkSplit) GetNetworkCountOk() (*int32, bool) {
	if o == nil || IsNil(o.NetworkCount) {
		return nil, false
	}
	return o.NetworkCount, true
}

// HasNetworkCount returns a boolean if a field has been set.
func (o *IPv4NetworkSplit) HasNetworkCount() bool {
	if o != nil && !IsNil(o.NetworkCount) {
		return true
	}

	return false
}

// SetNetworkCount gets a reference to the given int32 and assigns it to the NetworkCount field.
func (o *IPv4NetworkSplit) SetNetworkCount(v int32) {
	o.NetworkCount = &v
}

// GetGatewayPreserved returns the GatewayPreserved field value if set, zero value otherwise.
func (o *IPv4NetworkSplit) GetGatewayPreserved() bool {
	if o == nil || IsNil(o.GatewayPreserved) {
		var ret bool
		return ret
	}
	return *o.GatewayPreserved
}

// GetGatewayPreservedOk returns a tuple with the GatewayPreserved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPv4NetworkSplit) GetGatewayPreservedOk() (*bool, bool) {
	if o == nil || IsNil(o.GatewayPreserved) {
		return nil, false
	}
	return o.GatewayPreserved, true
}

// HasGatewayPreserved returns a boolean if a field has been set.
func (o *IPv4NetworkSplit) HasGatewayPreserved() bool {
	if o != nil && !IsNil(o.GatewayPreserved) {
		return true
	}

	return false
}

// SetGatewayPreserved gets a reference to the given bool and assigns it to the GatewayPreserved field.
func (o *IPv4NetworkSplit) SetGatewayPreserved(v bool) {
	o.GatewayPreserved = &v
}

// GetDefaultGatewayAssigned returns the DefaultGatewayAssigned field value if set, zero value otherwise.
func (o *IPv4NetworkSplit) GetDefaultGatewayAssigned() bool {
	if o == nil || IsNil(o.DefaultGatewayAssigned) {
		var ret bool
		return ret
	}
	return *o.DefaultGatewayAssigned
}

// GetDefaultGatewayAssignedOk returns a tuple with the DefaultGatewayAssigned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPv4NetworkSplit) GetDefaultGatewayAssignedOk() (*bool, bool) {
	if o == nil || IsNil(o.DefaultGatewayAssigned) {
		return nil, false
	}
	return o.DefaultGatewayAssigned, true
}

// HasDefaultGatewayAssigned returns a boolean if a field has been set.
func (o *IPv4NetworkSplit) HasDefaultGatewayAssigned() bool {
	if o != nil && !IsNil(o.DefaultGatewayAssigned) {
		return true
	}

	return false
}

// SetDefaultGatewayAssigned gets a reference to the given bool and assigns it to the DefaultGatewayAssigned field.
func (o *IPv4NetworkSplit) SetDefaultGatewayAssigned(v bool) {
	o.DefaultGatewayAssigned = &v
}

// GetConflictResolutionStrategy returns the ConflictResolutionStrategy field value if set, zero value otherwise.
func (o *IPv4NetworkSplit) GetConflictResolutionStrategy() string {
	if o == nil || IsNil(o.ConflictResolutionStrategy) {
		var ret string
		return ret
	}
	return *o.ConflictResolutionStrategy
}

// GetConflictResolutionStrategyOk returns a tuple with the ConflictResolutionStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPv4NetworkSplit) GetConflictResolutionStrategyOk() (*string, bool) {
	if o == nil || IsNil(o.ConflictResolutionStrategy) {
		return nil, false
	}
	return o.ConflictResolutionStrategy, true
}

// HasConflictResolutionStrategy returns a boolean if a field has been set.
func (o *IPv4NetworkSplit) HasConflictResolutionStrategy() bool {
	if o != nil && !IsNil(o.ConflictResolutionStrategy) {
		return true
	}

	return false
}

// SetConflictResolutionStrategy gets a reference to the given string and assigns it to the ConflictResolutionStrategy field.
func (o *IPv4NetworkSplit) SetConflictResolutionStrategy(v string) {
	o.ConflictResolutionStrategy = &v
}

// GetTemplate returns the Template field value if set, zero value otherwise.
func (o *IPv4NetworkSplit) GetTemplate() InlinedIPv4Template {
	if o == nil || IsNil(o.Template) {
		var ret InlinedIPv4Template
		return ret
	}
	return *o.Template
}

// GetTemplateOk returns a tuple with the Template field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPv4NetworkSplit) GetTemplateOk() (*InlinedIPv4Template, bool) {
	if o == nil || IsNil(o.Template) {
		return nil, false
	}
	return o.Template, true
}

// HasTemplate returns a boolean if a field has been set.
func (o *IPv4NetworkSplit) HasTemplate() bool {
	if o != nil && !IsNil(o.Template) {
		return true
	}

	return false
}

// SetTemplate gets a reference to the given InlinedIPv4Template and assigns it to the Template field.
func (o *IPv4NetworkSplit) SetTemplate(v InlinedIPv4Template) {
	o.Template = &v
}

func (o IPv4NetworkSplit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IPv4NetworkSplit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.NetworkCount) {
		toSerialize["networkCount"] = o.NetworkCount
	}
	if !IsNil(o.GatewayPreserved) {
		toSerialize["gatewayPreserved"] = o.GatewayPreserved
	}
	if !IsNil(o.DefaultGatewayAssigned) {
		toSerialize["defaultGatewayAssigned"] = o.DefaultGatewayAssigned
	}
	if !IsNil(o.ConflictResolutionStrategy) {
		toSerialize["conflictResolutionStrategy"] = o.ConflictResolutionStrategy
	}
	if !IsNil(o.Template) {
		toSerialize["template"] = o.Template
	}
	return toSerialize, nil
}

type NullableIPv4NetworkSplit struct {
	value *IPv4NetworkSplit
	isSet bool
}

func (v NullableIPv4NetworkSplit) Get() *IPv4NetworkSplit {
	return v.value
}

func (v *NullableIPv4NetworkSplit) Set(val *IPv4NetworkSplit) {
	v.value = val
	v.isSet = true
}

func (v NullableIPv4NetworkSplit) IsSet() bool {
	return v.isSet
}

func (v *NullableIPv4NetworkSplit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIPv4NetworkSplit(val *IPv4NetworkSplit) *NullableIPv4NetworkSplit {
	return &NullableIPv4NetworkSplit{value: val, isSet: true}
}

func (v NullableIPv4NetworkSplit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIPv4NetworkSplit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



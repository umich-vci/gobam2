/*
BlueCat Address Manager 9.5 RESTful v2 API

The **BlueCat Address Manager 9.5 RESTful v2 API** is a new RESTful API for Address Manager that presents Address Manager objects as resources. Each resource has a unique endpoint, and related resources are grouped in collections. To fetch an individual resource, a `GET` request is sent to the resource's endpoint. To fetch all resources in a collection, a `GET` request is sent to the collection's endpoint.  The RESTful v2 API is [hypermedia driven](https://en.wikipedia.org/wiki/HATEOAS) and uses the [HAL](https://en.wikipedia.org/wiki/Hypertext_Application_Language) format for representing links. When navigating through the API, you can use those links to navigate to related resources or child resources of the requested endpoint. The API supports the following media types for most endpoints:  `application/hal+json`, `application/json`, and `text/csv`.  For authentication, the API supports both `Basic` and `Bearer` HTTP authentication schemes.  To get started, create a session and receive credentials for `Basic` authentication by sending a `POST` request to the [/sessions](#/Admin%20Resources/postSession) endpoint, with a message body containing the user's credentials:  ```{\"username\":\"apiuser\", \"password\":\"apipass\"}```  The response will contain an `apiToken` field that can be entered with the username in the Swagger UI **Authorize** dialog. The response will also contain a `basicAuthenticationCredentials` field containing a base64 encoding of the requester's username and API token delimited by a colon. This string can be injected directly into request `Authorization` headers in the following format:  ```Authorization: Basic YXBpOlQ0OExOT3VIRGhDcnVBNEo1bGFES3JuS3hTZC9QK3pjczZXTzBJMDY=```  For full details on API format and authentication methods, refer to the Address Manager RESTful v2 API Guide on the BlueCat Documentation Portal.

API version: 9.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gobam2

import (
	"encoding/json"
)

// checks if the IPv4Address type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IPv4Address{}

// IPv4Address struct for IPv4Address
type IPv4Address struct {
	Address
	// The type of IP address.
	Type *string `json:"type,omitempty"`
	// The state of the IP address.
	State *string `json:"state,omitempty"`
	IpGroup *InlinedIPv4Group `json:"ipGroup,omitempty"`
	Template *InlinedIPv4Template `json:"template,omitempty"`
	// The ID of the circuit from which the request came.
	CircuitId *string `json:"circuitId,omitempty"`
	// Connected router port information for the IPv4 address.
	RouterPortInfo *string `json:"routerPortInfo,omitempty"`
	// Connected switch port information for the IPv4 address.
	SwitchPortInfo *string `json:"switchPortInfo,omitempty"`
	// VLAN information for the IPv4 address.
	VlanInfo *string `json:"vlanInfo,omitempty"`
	// An identifier sent by the DHCP client software running on a device.
	VendorClassIdentifier *string `json:"vendorClassIdentifier,omitempty"`
	// The list of parameters that the device requested from the DHCP server.
	ParameterRequestList []int32 `json:"parameterRequestList,omitempty"`
	ClientIdentifier *InlinedDHCPClientIdentifier `json:"clientIdentifier,omitempty"`
}

// NewIPv4Address instantiates a new IPv4Address object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIPv4Address() *IPv4Address {
	this := IPv4Address{}
	return &this
}

// NewIPv4AddressWithDefaults instantiates a new IPv4Address object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIPv4AddressWithDefaults() *IPv4Address {
	this := IPv4Address{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IPv4Address) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPv4Address) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IPv4Address) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *IPv4Address) SetType(v string) {
	o.Type = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *IPv4Address) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPv4Address) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *IPv4Address) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *IPv4Address) SetState(v string) {
	o.State = &v
}

// GetIpGroup returns the IpGroup field value if set, zero value otherwise.
func (o *IPv4Address) GetIpGroup() InlinedIPv4Group {
	if o == nil || IsNil(o.IpGroup) {
		var ret InlinedIPv4Group
		return ret
	}
	return *o.IpGroup
}

// GetIpGroupOk returns a tuple with the IpGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPv4Address) GetIpGroupOk() (*InlinedIPv4Group, bool) {
	if o == nil || IsNil(o.IpGroup) {
		return nil, false
	}
	return o.IpGroup, true
}

// HasIpGroup returns a boolean if a field has been set.
func (o *IPv4Address) HasIpGroup() bool {
	if o != nil && !IsNil(o.IpGroup) {
		return true
	}

	return false
}

// SetIpGroup gets a reference to the given InlinedIPv4Group and assigns it to the IpGroup field.
func (o *IPv4Address) SetIpGroup(v InlinedIPv4Group) {
	o.IpGroup = &v
}

// GetTemplate returns the Template field value if set, zero value otherwise.
func (o *IPv4Address) GetTemplate() InlinedIPv4Template {
	if o == nil || IsNil(o.Template) {
		var ret InlinedIPv4Template
		return ret
	}
	return *o.Template
}

// GetTemplateOk returns a tuple with the Template field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPv4Address) GetTemplateOk() (*InlinedIPv4Template, bool) {
	if o == nil || IsNil(o.Template) {
		return nil, false
	}
	return o.Template, true
}

// HasTemplate returns a boolean if a field has been set.
func (o *IPv4Address) HasTemplate() bool {
	if o != nil && !IsNil(o.Template) {
		return true
	}

	return false
}

// SetTemplate gets a reference to the given InlinedIPv4Template and assigns it to the Template field.
func (o *IPv4Address) SetTemplate(v InlinedIPv4Template) {
	o.Template = &v
}

// GetCircuitId returns the CircuitId field value if set, zero value otherwise.
func (o *IPv4Address) GetCircuitId() string {
	if o == nil || IsNil(o.CircuitId) {
		var ret string
		return ret
	}
	return *o.CircuitId
}

// GetCircuitIdOk returns a tuple with the CircuitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPv4Address) GetCircuitIdOk() (*string, bool) {
	if o == nil || IsNil(o.CircuitId) {
		return nil, false
	}
	return o.CircuitId, true
}

// HasCircuitId returns a boolean if a field has been set.
func (o *IPv4Address) HasCircuitId() bool {
	if o != nil && !IsNil(o.CircuitId) {
		return true
	}

	return false
}

// SetCircuitId gets a reference to the given string and assigns it to the CircuitId field.
func (o *IPv4Address) SetCircuitId(v string) {
	o.CircuitId = &v
}

// GetRouterPortInfo returns the RouterPortInfo field value if set, zero value otherwise.
func (o *IPv4Address) GetRouterPortInfo() string {
	if o == nil || IsNil(o.RouterPortInfo) {
		var ret string
		return ret
	}
	return *o.RouterPortInfo
}

// GetRouterPortInfoOk returns a tuple with the RouterPortInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPv4Address) GetRouterPortInfoOk() (*string, bool) {
	if o == nil || IsNil(o.RouterPortInfo) {
		return nil, false
	}
	return o.RouterPortInfo, true
}

// HasRouterPortInfo returns a boolean if a field has been set.
func (o *IPv4Address) HasRouterPortInfo() bool {
	if o != nil && !IsNil(o.RouterPortInfo) {
		return true
	}

	return false
}

// SetRouterPortInfo gets a reference to the given string and assigns it to the RouterPortInfo field.
func (o *IPv4Address) SetRouterPortInfo(v string) {
	o.RouterPortInfo = &v
}

// GetSwitchPortInfo returns the SwitchPortInfo field value if set, zero value otherwise.
func (o *IPv4Address) GetSwitchPortInfo() string {
	if o == nil || IsNil(o.SwitchPortInfo) {
		var ret string
		return ret
	}
	return *o.SwitchPortInfo
}

// GetSwitchPortInfoOk returns a tuple with the SwitchPortInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPv4Address) GetSwitchPortInfoOk() (*string, bool) {
	if o == nil || IsNil(o.SwitchPortInfo) {
		return nil, false
	}
	return o.SwitchPortInfo, true
}

// HasSwitchPortInfo returns a boolean if a field has been set.
func (o *IPv4Address) HasSwitchPortInfo() bool {
	if o != nil && !IsNil(o.SwitchPortInfo) {
		return true
	}

	return false
}

// SetSwitchPortInfo gets a reference to the given string and assigns it to the SwitchPortInfo field.
func (o *IPv4Address) SetSwitchPortInfo(v string) {
	o.SwitchPortInfo = &v
}

// GetVlanInfo returns the VlanInfo field value if set, zero value otherwise.
func (o *IPv4Address) GetVlanInfo() string {
	if o == nil || IsNil(o.VlanInfo) {
		var ret string
		return ret
	}
	return *o.VlanInfo
}

// GetVlanInfoOk returns a tuple with the VlanInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPv4Address) GetVlanInfoOk() (*string, bool) {
	if o == nil || IsNil(o.VlanInfo) {
		return nil, false
	}
	return o.VlanInfo, true
}

// HasVlanInfo returns a boolean if a field has been set.
func (o *IPv4Address) HasVlanInfo() bool {
	if o != nil && !IsNil(o.VlanInfo) {
		return true
	}

	return false
}

// SetVlanInfo gets a reference to the given string and assigns it to the VlanInfo field.
func (o *IPv4Address) SetVlanInfo(v string) {
	o.VlanInfo = &v
}

// GetVendorClassIdentifier returns the VendorClassIdentifier field value if set, zero value otherwise.
func (o *IPv4Address) GetVendorClassIdentifier() string {
	if o == nil || IsNil(o.VendorClassIdentifier) {
		var ret string
		return ret
	}
	return *o.VendorClassIdentifier
}

// GetVendorClassIdentifierOk returns a tuple with the VendorClassIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPv4Address) GetVendorClassIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.VendorClassIdentifier) {
		return nil, false
	}
	return o.VendorClassIdentifier, true
}

// HasVendorClassIdentifier returns a boolean if a field has been set.
func (o *IPv4Address) HasVendorClassIdentifier() bool {
	if o != nil && !IsNil(o.VendorClassIdentifier) {
		return true
	}

	return false
}

// SetVendorClassIdentifier gets a reference to the given string and assigns it to the VendorClassIdentifier field.
func (o *IPv4Address) SetVendorClassIdentifier(v string) {
	o.VendorClassIdentifier = &v
}

// GetParameterRequestList returns the ParameterRequestList field value if set, zero value otherwise.
func (o *IPv4Address) GetParameterRequestList() []int32 {
	if o == nil || IsNil(o.ParameterRequestList) {
		var ret []int32
		return ret
	}
	return o.ParameterRequestList
}

// GetParameterRequestListOk returns a tuple with the ParameterRequestList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPv4Address) GetParameterRequestListOk() ([]int32, bool) {
	if o == nil || IsNil(o.ParameterRequestList) {
		return nil, false
	}
	return o.ParameterRequestList, true
}

// HasParameterRequestList returns a boolean if a field has been set.
func (o *IPv4Address) HasParameterRequestList() bool {
	if o != nil && !IsNil(o.ParameterRequestList) {
		return true
	}

	return false
}

// SetParameterRequestList gets a reference to the given []int32 and assigns it to the ParameterRequestList field.
func (o *IPv4Address) SetParameterRequestList(v []int32) {
	o.ParameterRequestList = v
}

// GetClientIdentifier returns the ClientIdentifier field value if set, zero value otherwise.
func (o *IPv4Address) GetClientIdentifier() InlinedDHCPClientIdentifier {
	if o == nil || IsNil(o.ClientIdentifier) {
		var ret InlinedDHCPClientIdentifier
		return ret
	}
	return *o.ClientIdentifier
}

// GetClientIdentifierOk returns a tuple with the ClientIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPv4Address) GetClientIdentifierOk() (*InlinedDHCPClientIdentifier, bool) {
	if o == nil || IsNil(o.ClientIdentifier) {
		return nil, false
	}
	return o.ClientIdentifier, true
}

// HasClientIdentifier returns a boolean if a field has been set.
func (o *IPv4Address) HasClientIdentifier() bool {
	if o != nil && !IsNil(o.ClientIdentifier) {
		return true
	}

	return false
}

// SetClientIdentifier gets a reference to the given InlinedDHCPClientIdentifier and assigns it to the ClientIdentifier field.
func (o *IPv4Address) SetClientIdentifier(v InlinedDHCPClientIdentifier) {
	o.ClientIdentifier = &v
}

func (o IPv4Address) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IPv4Address) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.IpGroup) {
		toSerialize["ipGroup"] = o.IpGroup
	}
	if !IsNil(o.Template) {
		toSerialize["template"] = o.Template
	}
	if !IsNil(o.CircuitId) {
		toSerialize["circuitId"] = o.CircuitId
	}
	if !IsNil(o.RouterPortInfo) {
		toSerialize["routerPortInfo"] = o.RouterPortInfo
	}
	if !IsNil(o.SwitchPortInfo) {
		toSerialize["switchPortInfo"] = o.SwitchPortInfo
	}
	if !IsNil(o.VlanInfo) {
		toSerialize["vlanInfo"] = o.VlanInfo
	}
	if !IsNil(o.VendorClassIdentifier) {
		toSerialize["vendorClassIdentifier"] = o.VendorClassIdentifier
	}
	if !IsNil(o.ParameterRequestList) {
		toSerialize["parameterRequestList"] = o.ParameterRequestList
	}
	if !IsNil(o.ClientIdentifier) {
		toSerialize["clientIdentifier"] = o.ClientIdentifier
	}
	return toSerialize, nil
}

type NullableIPv4Address struct {
	value *IPv4Address
	isSet bool
}

func (v NullableIPv4Address) Get() *IPv4Address {
	return v.value
}

func (v *NullableIPv4Address) Set(val *IPv4Address) {
	v.value = val
	v.isSet = true
}

func (v NullableIPv4Address) IsSet() bool {
	return v.isSet
}

func (v *NullableIPv4Address) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIPv4Address(val *IPv4Address) *NullableIPv4Address {
	return &NullableIPv4Address{value: val, isSet: true}
}

func (v NullableIPv4Address) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIPv4Address) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



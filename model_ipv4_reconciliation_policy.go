/*
BlueCat Address Manager 9.5 RESTful v2 API

The **BlueCat Address Manager 9.5 RESTful v2 API** is a new RESTful API for Address Manager that presents Address Manager objects as resources. Each resource has a unique endpoint, and related resources are grouped in collections. To fetch an individual resource, a `GET` request is sent to the resource's endpoint. To fetch all resources in a collection, a `GET` request is sent to the collection's endpoint.  The RESTful v2 API is [hypermedia driven](https://en.wikipedia.org/wiki/HATEOAS) and uses the [HAL](https://en.wikipedia.org/wiki/Hypertext_Application_Language) format for representing links. When navigating through the API, you can use those links to navigate to related resources or child resources of the requested endpoint. The API supports the following media types for most endpoints:  `application/hal+json`, `application/json`, and `text/csv`.  For authentication, the API supports both `Basic` and `Bearer` HTTP authentication schemes.  To get started, create a session and receive credentials for `Basic` authentication by sending a `POST` request to the [/sessions](#/Admin%20Resources/postSession) endpoint, with a message body containing the user's credentials:  ```{\"username\":\"apiuser\", \"password\":\"apipass\"}```  The response will contain an `apiToken` field that can be entered with the username in the Swagger UI **Authorize** dialog. The response will also contain a `basicAuthenticationCredentials` field containing a base64 encoding of the requester's username and API token delimited by a colon. This string can be injected directly into request `Authorization` headers in the following format:  ```Authorization: Basic YXBpOlQ0OExOT3VIRGhDcnVBNEo1bGFES3JuS3hTZC9QK3pjczZXTzBJMDY=```  For full details on API format and authentication methods, refer to the Address Manager RESTful v2 API Guide on the BlueCat Documentation Portal.

API version: 9.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gobam2

import (
	"encoding/json"
)

// checks if the IPv4ReconciliationPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IPv4ReconciliationPolicy{}

// IPv4ReconciliationPolicy struct for IPv4ReconciliationPolicy
type IPv4ReconciliationPolicy struct {
	ReconciliationPolicy
	// The resource type.
	Type *string `json:"type,omitempty"`
	// The discovery method for the reconciliation policy.
	DiscoveryMethod *string `json:"discoveryMethod,omitempty"`
	// The IPv4 range(s) in CIDR format for the reconciliation policy to search.
	NetworkBoundaries []string `json:"networkBoundaries,omitempty"`
	// The IPv4 address ranges in CIDR format for which ping sweep sends an ICMP echo request.
	PingSweepNetworkGaps []string `json:"pingSweepNetworkGaps,omitempty"`
	// The IPv4 addresses and ranges for the reconciliation policy to ignore. The list of overrides can contain single addresses, ranges in CIDR format (e.g. 10.0.0.0/16), or ranges in address range format (e.g. 10.0.0.0-10.0.255.255).
	Overrides []string `json:"overrides,omitempty"`
	// The age parameter for automatic reconciliation of reclaimable addresses. Reconciliation will be applied to reclaimable IP addresses older than this value. Reclaimable addresses are addresses that exist in Address Manager but are not found on the physical network.
	ReclaimAcceptanceAge *string `json:"reclaimAcceptanceAge,omitempty"`
	// The age parameter for automatic reconciliation of unknown addresses. Reconciliation will be applied to unknown IP addresses older than this value. Unknown addresses are addresses that exist on the physical network but do not exist in Address Manager.
	UnknownAcceptanceAge *string `json:"unknownAcceptanceAge,omitempty"`
	// The age parameter for automatic reconciliation of mismatched addresses. Reconciliation will be applied to mismatched IP addresses older than this value. Mismatched addresses are addresses that exist in both Address Manager and the physical network, but do not match in either the MAC address, DNS host name info, VLAN info, or connect switch port info.
	MismatchAcceptanceAge *string `json:"mismatchAcceptanceAge,omitempty"`
	View *InlinedView `json:"view,omitempty"`
}

// NewIPv4ReconciliationPolicy instantiates a new IPv4ReconciliationPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIPv4ReconciliationPolicy() *IPv4ReconciliationPolicy {
	this := IPv4ReconciliationPolicy{}
	return &this
}

// NewIPv4ReconciliationPolicyWithDefaults instantiates a new IPv4ReconciliationPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIPv4ReconciliationPolicyWithDefaults() *IPv4ReconciliationPolicy {
	this := IPv4ReconciliationPolicy{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IPv4ReconciliationPolicy) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPv4ReconciliationPolicy) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IPv4ReconciliationPolicy) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *IPv4ReconciliationPolicy) SetType(v string) {
	o.Type = &v
}

// GetDiscoveryMethod returns the DiscoveryMethod field value if set, zero value otherwise.
func (o *IPv4ReconciliationPolicy) GetDiscoveryMethod() string {
	if o == nil || IsNil(o.DiscoveryMethod) {
		var ret string
		return ret
	}
	return *o.DiscoveryMethod
}

// GetDiscoveryMethodOk returns a tuple with the DiscoveryMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPv4ReconciliationPolicy) GetDiscoveryMethodOk() (*string, bool) {
	if o == nil || IsNil(o.DiscoveryMethod) {
		return nil, false
	}
	return o.DiscoveryMethod, true
}

// HasDiscoveryMethod returns a boolean if a field has been set.
func (o *IPv4ReconciliationPolicy) HasDiscoveryMethod() bool {
	if o != nil && !IsNil(o.DiscoveryMethod) {
		return true
	}

	return false
}

// SetDiscoveryMethod gets a reference to the given string and assigns it to the DiscoveryMethod field.
func (o *IPv4ReconciliationPolicy) SetDiscoveryMethod(v string) {
	o.DiscoveryMethod = &v
}

// GetNetworkBoundaries returns the NetworkBoundaries field value if set, zero value otherwise.
func (o *IPv4ReconciliationPolicy) GetNetworkBoundaries() []string {
	if o == nil || IsNil(o.NetworkBoundaries) {
		var ret []string
		return ret
	}
	return o.NetworkBoundaries
}

// GetNetworkBoundariesOk returns a tuple with the NetworkBoundaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPv4ReconciliationPolicy) GetNetworkBoundariesOk() ([]string, bool) {
	if o == nil || IsNil(o.NetworkBoundaries) {
		return nil, false
	}
	return o.NetworkBoundaries, true
}

// HasNetworkBoundaries returns a boolean if a field has been set.
func (o *IPv4ReconciliationPolicy) HasNetworkBoundaries() bool {
	if o != nil && !IsNil(o.NetworkBoundaries) {
		return true
	}

	return false
}

// SetNetworkBoundaries gets a reference to the given []string and assigns it to the NetworkBoundaries field.
func (o *IPv4ReconciliationPolicy) SetNetworkBoundaries(v []string) {
	o.NetworkBoundaries = v
}

// GetPingSweepNetworkGaps returns the PingSweepNetworkGaps field value if set, zero value otherwise.
func (o *IPv4ReconciliationPolicy) GetPingSweepNetworkGaps() []string {
	if o == nil || IsNil(o.PingSweepNetworkGaps) {
		var ret []string
		return ret
	}
	return o.PingSweepNetworkGaps
}

// GetPingSweepNetworkGapsOk returns a tuple with the PingSweepNetworkGaps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPv4ReconciliationPolicy) GetPingSweepNetworkGapsOk() ([]string, bool) {
	if o == nil || IsNil(o.PingSweepNetworkGaps) {
		return nil, false
	}
	return o.PingSweepNetworkGaps, true
}

// HasPingSweepNetworkGaps returns a boolean if a field has been set.
func (o *IPv4ReconciliationPolicy) HasPingSweepNetworkGaps() bool {
	if o != nil && !IsNil(o.PingSweepNetworkGaps) {
		return true
	}

	return false
}

// SetPingSweepNetworkGaps gets a reference to the given []string and assigns it to the PingSweepNetworkGaps field.
func (o *IPv4ReconciliationPolicy) SetPingSweepNetworkGaps(v []string) {
	o.PingSweepNetworkGaps = v
}

// GetOverrides returns the Overrides field value if set, zero value otherwise.
func (o *IPv4ReconciliationPolicy) GetOverrides() []string {
	if o == nil || IsNil(o.Overrides) {
		var ret []string
		return ret
	}
	return o.Overrides
}

// GetOverridesOk returns a tuple with the Overrides field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPv4ReconciliationPolicy) GetOverridesOk() ([]string, bool) {
	if o == nil || IsNil(o.Overrides) {
		return nil, false
	}
	return o.Overrides, true
}

// HasOverrides returns a boolean if a field has been set.
func (o *IPv4ReconciliationPolicy) HasOverrides() bool {
	if o != nil && !IsNil(o.Overrides) {
		return true
	}

	return false
}

// SetOverrides gets a reference to the given []string and assigns it to the Overrides field.
func (o *IPv4ReconciliationPolicy) SetOverrides(v []string) {
	o.Overrides = v
}

// GetReclaimAcceptanceAge returns the ReclaimAcceptanceAge field value if set, zero value otherwise.
func (o *IPv4ReconciliationPolicy) GetReclaimAcceptanceAge() string {
	if o == nil || IsNil(o.ReclaimAcceptanceAge) {
		var ret string
		return ret
	}
	return *o.ReclaimAcceptanceAge
}

// GetReclaimAcceptanceAgeOk returns a tuple with the ReclaimAcceptanceAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPv4ReconciliationPolicy) GetReclaimAcceptanceAgeOk() (*string, bool) {
	if o == nil || IsNil(o.ReclaimAcceptanceAge) {
		return nil, false
	}
	return o.ReclaimAcceptanceAge, true
}

// HasReclaimAcceptanceAge returns a boolean if a field has been set.
func (o *IPv4ReconciliationPolicy) HasReclaimAcceptanceAge() bool {
	if o != nil && !IsNil(o.ReclaimAcceptanceAge) {
		return true
	}

	return false
}

// SetReclaimAcceptanceAge gets a reference to the given string and assigns it to the ReclaimAcceptanceAge field.
func (o *IPv4ReconciliationPolicy) SetReclaimAcceptanceAge(v string) {
	o.ReclaimAcceptanceAge = &v
}

// GetUnknownAcceptanceAge returns the UnknownAcceptanceAge field value if set, zero value otherwise.
func (o *IPv4ReconciliationPolicy) GetUnknownAcceptanceAge() string {
	if o == nil || IsNil(o.UnknownAcceptanceAge) {
		var ret string
		return ret
	}
	return *o.UnknownAcceptanceAge
}

// GetUnknownAcceptanceAgeOk returns a tuple with the UnknownAcceptanceAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPv4ReconciliationPolicy) GetUnknownAcceptanceAgeOk() (*string, bool) {
	if o == nil || IsNil(o.UnknownAcceptanceAge) {
		return nil, false
	}
	return o.UnknownAcceptanceAge, true
}

// HasUnknownAcceptanceAge returns a boolean if a field has been set.
func (o *IPv4ReconciliationPolicy) HasUnknownAcceptanceAge() bool {
	if o != nil && !IsNil(o.UnknownAcceptanceAge) {
		return true
	}

	return false
}

// SetUnknownAcceptanceAge gets a reference to the given string and assigns it to the UnknownAcceptanceAge field.
func (o *IPv4ReconciliationPolicy) SetUnknownAcceptanceAge(v string) {
	o.UnknownAcceptanceAge = &v
}

// GetMismatchAcceptanceAge returns the MismatchAcceptanceAge field value if set, zero value otherwise.
func (o *IPv4ReconciliationPolicy) GetMismatchAcceptanceAge() string {
	if o == nil || IsNil(o.MismatchAcceptanceAge) {
		var ret string
		return ret
	}
	return *o.MismatchAcceptanceAge
}

// GetMismatchAcceptanceAgeOk returns a tuple with the MismatchAcceptanceAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPv4ReconciliationPolicy) GetMismatchAcceptanceAgeOk() (*string, bool) {
	if o == nil || IsNil(o.MismatchAcceptanceAge) {
		return nil, false
	}
	return o.MismatchAcceptanceAge, true
}

// HasMismatchAcceptanceAge returns a boolean if a field has been set.
func (o *IPv4ReconciliationPolicy) HasMismatchAcceptanceAge() bool {
	if o != nil && !IsNil(o.MismatchAcceptanceAge) {
		return true
	}

	return false
}

// SetMismatchAcceptanceAge gets a reference to the given string and assigns it to the MismatchAcceptanceAge field.
func (o *IPv4ReconciliationPolicy) SetMismatchAcceptanceAge(v string) {
	o.MismatchAcceptanceAge = &v
}

// GetView returns the View field value if set, zero value otherwise.
func (o *IPv4ReconciliationPolicy) GetView() InlinedView {
	if o == nil || IsNil(o.View) {
		var ret InlinedView
		return ret
	}
	return *o.View
}

// GetViewOk returns a tuple with the View field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPv4ReconciliationPolicy) GetViewOk() (*InlinedView, bool) {
	if o == nil || IsNil(o.View) {
		return nil, false
	}
	return o.View, true
}

// HasView returns a boolean if a field has been set.
func (o *IPv4ReconciliationPolicy) HasView() bool {
	if o != nil && !IsNil(o.View) {
		return true
	}

	return false
}

// SetView gets a reference to the given InlinedView and assigns it to the View field.
func (o *IPv4ReconciliationPolicy) SetView(v InlinedView) {
	o.View = &v
}

func (o IPv4ReconciliationPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IPv4ReconciliationPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.DiscoveryMethod) {
		toSerialize["discoveryMethod"] = o.DiscoveryMethod
	}
	if !IsNil(o.NetworkBoundaries) {
		toSerialize["networkBoundaries"] = o.NetworkBoundaries
	}
	if !IsNil(o.PingSweepNetworkGaps) {
		toSerialize["pingSweepNetworkGaps"] = o.PingSweepNetworkGaps
	}
	if !IsNil(o.Overrides) {
		toSerialize["overrides"] = o.Overrides
	}
	if !IsNil(o.ReclaimAcceptanceAge) {
		toSerialize["reclaimAcceptanceAge"] = o.ReclaimAcceptanceAge
	}
	if !IsNil(o.UnknownAcceptanceAge) {
		toSerialize["unknownAcceptanceAge"] = o.UnknownAcceptanceAge
	}
	if !IsNil(o.MismatchAcceptanceAge) {
		toSerialize["mismatchAcceptanceAge"] = o.MismatchAcceptanceAge
	}
	if !IsNil(o.View) {
		toSerialize["view"] = o.View
	}
	return toSerialize, nil
}

type NullableIPv4ReconciliationPolicy struct {
	value *IPv4ReconciliationPolicy
	isSet bool
}

func (v NullableIPv4ReconciliationPolicy) Get() *IPv4ReconciliationPolicy {
	return v.value
}

func (v *NullableIPv4ReconciliationPolicy) Set(val *IPv4ReconciliationPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableIPv4ReconciliationPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableIPv4ReconciliationPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIPv4ReconciliationPolicy(val *IPv4ReconciliationPolicy) *NullableIPv4ReconciliationPolicy {
	return &NullableIPv4ReconciliationPolicy{value: val, isSet: true}
}

func (v NullableIPv4ReconciliationPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIPv4ReconciliationPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
BlueCat Address Manager 9.5 RESTful v2 API

The **BlueCat Address Manager 9.5 RESTful v2 API** is a new RESTful API for Address Manager that presents Address Manager objects as resources. Each resource has a unique endpoint, and related resources are grouped in collections. To fetch an individual resource, a `GET` request is sent to the resource's endpoint. To fetch all resources in a collection, a `GET` request is sent to the collection's endpoint.  The RESTful v2 API is [hypermedia driven](https://en.wikipedia.org/wiki/HATEOAS) and uses the [HAL](https://en.wikipedia.org/wiki/Hypertext_Application_Language) format for representing links. When navigating through the API, you can use those links to navigate to related resources or child resources of the requested endpoint. The API supports the following media types for most endpoints:  `application/hal+json`, `application/json`, and `text/csv`.  For authentication, the API supports both `Basic` and `Bearer` HTTP authentication schemes.  To get started, create a session and receive credentials for `Basic` authentication by sending a `POST` request to the [/sessions](#/Admin%20Resources/postSession) endpoint, with a message body containing the user's credentials:  ```{\"username\":\"apiuser\", \"password\":\"apipass\"}```  The response will contain an `apiToken` field that can be entered with the username in the Swagger UI **Authorize** dialog. The response will also contain a `basicAuthenticationCredentials` field containing a base64 encoding of the requester's username and API token delimited by a colon. This string can be injected directly into request `Authorization` headers in the following format:  ```Authorization: Basic YXBpOlQ0OExOT3VIRGhDcnVBNEo1bGFES3JuS3hTZC9QK3pjczZXTzBJMDY=```  For full details on API format and authentication methods, refer to the Address Manager RESTful v2 API Guide on the BlueCat Documentation Portal.

API version: 9.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gobam2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserPostRequestBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserPostRequestBody{}

// UserPostRequestBody struct for UserPostRequestBody
type UserPostRequestBody struct {
	// The user or user group resource identifier.
	Id *int64 `json:"id,omitempty"`
	// The user scope resource type.
	Type *string `json:"type,omitempty"`
	// The name of the user.
	Name string `json:"name" validate:"regexp=^.*\\\\S+.*$"`
	// User-defined fields set for the resource.
	UserDefinedFields *map[string]string `json:"userDefinedFields,omitempty"`
	// The password of the user.
	Password *string `json:"password,omitempty" validate:"regexp=^.*\\\\S+.*$"`
	Authenticator *InlinedAuthenticator `json:"authenticator,omitempty"`
	// The email address of the user.
	Email string `json:"email" validate:"regexp=^.*\\\\S+.*$"`
	// The phone number of the user.
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	// The configured security privilege of the user.
	SecurityPrivilege string `json:"securityPrivilege"`
	// The configured history privilege of the user.
	HistoryPrivilege *string `json:"historyPrivilege,omitempty"`
	// The access type of the user. The access type can be GUI, API, or both.
	AccessType string `json:"accessType"`
	// Indicates whether the user must reset their password upon their initial log in to Address Manager.
	PasswordResetRequired *bool `json:"passwordResetRequired,omitempty"`
	// Indicates whether the user account has been locked.
	AccountLocked *bool `json:"accountLocked,omitempty"`
	// Indicates whether the user must access Address Manager using X.509 authentication only.
	X509Required *bool `json:"x509Required,omitempty"`
	// The administrative access right levels that the user has for the events list, log management, and reporting.
	AdministrativeAccessLevels *map[string]string `json:"administrativeAccessLevels,omitempty"`
}

type _UserPostRequestBody UserPostRequestBody

// NewUserPostRequestBody instantiates a new UserPostRequestBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPostRequestBody(name string, email string, securityPrivilege string, accessType string) *UserPostRequestBody {
	this := UserPostRequestBody{}
	this.Name = name
	this.Email = email
	this.SecurityPrivilege = securityPrivilege
	this.AccessType = accessType
	return &this
}

// NewUserPostRequestBodyWithDefaults instantiates a new UserPostRequestBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPostRequestBodyWithDefaults() *UserPostRequestBody {
	this := UserPostRequestBody{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserPostRequestBody) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPostRequestBody) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserPostRequestBody) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *UserPostRequestBody) SetId(v int64) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UserPostRequestBody) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPostRequestBody) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UserPostRequestBody) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UserPostRequestBody) SetType(v string) {
	o.Type = &v
}

// GetName returns the Name field value
func (o *UserPostRequestBody) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UserPostRequestBody) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UserPostRequestBody) SetName(v string) {
	o.Name = v
}

// GetUserDefinedFields returns the UserDefinedFields field value if set, zero value otherwise.
func (o *UserPostRequestBody) GetUserDefinedFields() map[string]string {
	if o == nil || IsNil(o.UserDefinedFields) {
		var ret map[string]string
		return ret
	}
	return *o.UserDefinedFields
}

// GetUserDefinedFieldsOk returns a tuple with the UserDefinedFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPostRequestBody) GetUserDefinedFieldsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.UserDefinedFields) {
		return nil, false
	}
	return o.UserDefinedFields, true
}

// HasUserDefinedFields returns a boolean if a field has been set.
func (o *UserPostRequestBody) HasUserDefinedFields() bool {
	if o != nil && !IsNil(o.UserDefinedFields) {
		return true
	}

	return false
}

// SetUserDefinedFields gets a reference to the given map[string]string and assigns it to the UserDefinedFields field.
func (o *UserPostRequestBody) SetUserDefinedFields(v map[string]string) {
	o.UserDefinedFields = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *UserPostRequestBody) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPostRequestBody) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *UserPostRequestBody) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *UserPostRequestBody) SetPassword(v string) {
	o.Password = &v
}

// GetAuthenticator returns the Authenticator field value if set, zero value otherwise.
func (o *UserPostRequestBody) GetAuthenticator() InlinedAuthenticator {
	if o == nil || IsNil(o.Authenticator) {
		var ret InlinedAuthenticator
		return ret
	}
	return *o.Authenticator
}

// GetAuthenticatorOk returns a tuple with the Authenticator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPostRequestBody) GetAuthenticatorOk() (*InlinedAuthenticator, bool) {
	if o == nil || IsNil(o.Authenticator) {
		return nil, false
	}
	return o.Authenticator, true
}

// HasAuthenticator returns a boolean if a field has been set.
func (o *UserPostRequestBody) HasAuthenticator() bool {
	if o != nil && !IsNil(o.Authenticator) {
		return true
	}

	return false
}

// SetAuthenticator gets a reference to the given InlinedAuthenticator and assigns it to the Authenticator field.
func (o *UserPostRequestBody) SetAuthenticator(v InlinedAuthenticator) {
	o.Authenticator = &v
}

// GetEmail returns the Email field value
func (o *UserPostRequestBody) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *UserPostRequestBody) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *UserPostRequestBody) SetEmail(v string) {
	o.Email = v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *UserPostRequestBody) GetPhoneNumber() string {
	if o == nil || IsNil(o.PhoneNumber) {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPostRequestBody) GetPhoneNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PhoneNumber) {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *UserPostRequestBody) HasPhoneNumber() bool {
	if o != nil && !IsNil(o.PhoneNumber) {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *UserPostRequestBody) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

// GetSecurityPrivilege returns the SecurityPrivilege field value
func (o *UserPostRequestBody) GetSecurityPrivilege() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SecurityPrivilege
}

// GetSecurityPrivilegeOk returns a tuple with the SecurityPrivilege field value
// and a boolean to check if the value has been set.
func (o *UserPostRequestBody) GetSecurityPrivilegeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecurityPrivilege, true
}

// SetSecurityPrivilege sets field value
func (o *UserPostRequestBody) SetSecurityPrivilege(v string) {
	o.SecurityPrivilege = v
}

// GetHistoryPrivilege returns the HistoryPrivilege field value if set, zero value otherwise.
func (o *UserPostRequestBody) GetHistoryPrivilege() string {
	if o == nil || IsNil(o.HistoryPrivilege) {
		var ret string
		return ret
	}
	return *o.HistoryPrivilege
}

// GetHistoryPrivilegeOk returns a tuple with the HistoryPrivilege field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPostRequestBody) GetHistoryPrivilegeOk() (*string, bool) {
	if o == nil || IsNil(o.HistoryPrivilege) {
		return nil, false
	}
	return o.HistoryPrivilege, true
}

// HasHistoryPrivilege returns a boolean if a field has been set.
func (o *UserPostRequestBody) HasHistoryPrivilege() bool {
	if o != nil && !IsNil(o.HistoryPrivilege) {
		return true
	}

	return false
}

// SetHistoryPrivilege gets a reference to the given string and assigns it to the HistoryPrivilege field.
func (o *UserPostRequestBody) SetHistoryPrivilege(v string) {
	o.HistoryPrivilege = &v
}

// GetAccessType returns the AccessType field value
func (o *UserPostRequestBody) GetAccessType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessType
}

// GetAccessTypeOk returns a tuple with the AccessType field value
// and a boolean to check if the value has been set.
func (o *UserPostRequestBody) GetAccessTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessType, true
}

// SetAccessType sets field value
func (o *UserPostRequestBody) SetAccessType(v string) {
	o.AccessType = v
}

// GetPasswordResetRequired returns the PasswordResetRequired field value if set, zero value otherwise.
func (o *UserPostRequestBody) GetPasswordResetRequired() bool {
	if o == nil || IsNil(o.PasswordResetRequired) {
		var ret bool
		return ret
	}
	return *o.PasswordResetRequired
}

// GetPasswordResetRequiredOk returns a tuple with the PasswordResetRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPostRequestBody) GetPasswordResetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.PasswordResetRequired) {
		return nil, false
	}
	return o.PasswordResetRequired, true
}

// HasPasswordResetRequired returns a boolean if a field has been set.
func (o *UserPostRequestBody) HasPasswordResetRequired() bool {
	if o != nil && !IsNil(o.PasswordResetRequired) {
		return true
	}

	return false
}

// SetPasswordResetRequired gets a reference to the given bool and assigns it to the PasswordResetRequired field.
func (o *UserPostRequestBody) SetPasswordResetRequired(v bool) {
	o.PasswordResetRequired = &v
}

// GetAccountLocked returns the AccountLocked field value if set, zero value otherwise.
func (o *UserPostRequestBody) GetAccountLocked() bool {
	if o == nil || IsNil(o.AccountLocked) {
		var ret bool
		return ret
	}
	return *o.AccountLocked
}

// GetAccountLockedOk returns a tuple with the AccountLocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPostRequestBody) GetAccountLockedOk() (*bool, bool) {
	if o == nil || IsNil(o.AccountLocked) {
		return nil, false
	}
	return o.AccountLocked, true
}

// HasAccountLocked returns a boolean if a field has been set.
func (o *UserPostRequestBody) HasAccountLocked() bool {
	if o != nil && !IsNil(o.AccountLocked) {
		return true
	}

	return false
}

// SetAccountLocked gets a reference to the given bool and assigns it to the AccountLocked field.
func (o *UserPostRequestBody) SetAccountLocked(v bool) {
	o.AccountLocked = &v
}

// GetX509Required returns the X509Required field value if set, zero value otherwise.
func (o *UserPostRequestBody) GetX509Required() bool {
	if o == nil || IsNil(o.X509Required) {
		var ret bool
		return ret
	}
	return *o.X509Required
}

// GetX509RequiredOk returns a tuple with the X509Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPostRequestBody) GetX509RequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.X509Required) {
		return nil, false
	}
	return o.X509Required, true
}

// HasX509Required returns a boolean if a field has been set.
func (o *UserPostRequestBody) HasX509Required() bool {
	if o != nil && !IsNil(o.X509Required) {
		return true
	}

	return false
}

// SetX509Required gets a reference to the given bool and assigns it to the X509Required field.
func (o *UserPostRequestBody) SetX509Required(v bool) {
	o.X509Required = &v
}

// GetAdministrativeAccessLevels returns the AdministrativeAccessLevels field value if set, zero value otherwise.
func (o *UserPostRequestBody) GetAdministrativeAccessLevels() map[string]string {
	if o == nil || IsNil(o.AdministrativeAccessLevels) {
		var ret map[string]string
		return ret
	}
	return *o.AdministrativeAccessLevels
}

// GetAdministrativeAccessLevelsOk returns a tuple with the AdministrativeAccessLevels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPostRequestBody) GetAdministrativeAccessLevelsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.AdministrativeAccessLevels) {
		return nil, false
	}
	return o.AdministrativeAccessLevels, true
}

// HasAdministrativeAccessLevels returns a boolean if a field has been set.
func (o *UserPostRequestBody) HasAdministrativeAccessLevels() bool {
	if o != nil && !IsNil(o.AdministrativeAccessLevels) {
		return true
	}

	return false
}

// SetAdministrativeAccessLevels gets a reference to the given map[string]string and assigns it to the AdministrativeAccessLevels field.
func (o *UserPostRequestBody) SetAdministrativeAccessLevels(v map[string]string) {
	o.AdministrativeAccessLevels = &v
}

func (o UserPostRequestBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserPostRequestBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.UserDefinedFields) {
		toSerialize["userDefinedFields"] = o.UserDefinedFields
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Authenticator) {
		toSerialize["authenticator"] = o.Authenticator
	}
	toSerialize["email"] = o.Email
	if !IsNil(o.PhoneNumber) {
		toSerialize["phoneNumber"] = o.PhoneNumber
	}
	toSerialize["securityPrivilege"] = o.SecurityPrivilege
	if !IsNil(o.HistoryPrivilege) {
		toSerialize["historyPrivilege"] = o.HistoryPrivilege
	}
	toSerialize["accessType"] = o.AccessType
	if !IsNil(o.PasswordResetRequired) {
		toSerialize["passwordResetRequired"] = o.PasswordResetRequired
	}
	if !IsNil(o.AccountLocked) {
		toSerialize["accountLocked"] = o.AccountLocked
	}
	if !IsNil(o.X509Required) {
		toSerialize["x509Required"] = o.X509Required
	}
	if !IsNil(o.AdministrativeAccessLevels) {
		toSerialize["administrativeAccessLevels"] = o.AdministrativeAccessLevels
	}
	return toSerialize, nil
}

func (o *UserPostRequestBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"email",
		"securityPrivilege",
		"accessType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserPostRequestBody := _UserPostRequestBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserPostRequestBody)

	if err != nil {
		return err
	}

	*o = UserPostRequestBody(varUserPostRequestBody)

	return err
}

type NullableUserPostRequestBody struct {
	value *UserPostRequestBody
	isSet bool
}

func (v NullableUserPostRequestBody) Get() *UserPostRequestBody {
	return v.value
}

func (v *NullableUserPostRequestBody) Set(val *UserPostRequestBody) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPostRequestBody) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPostRequestBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPostRequestBody(val *UserPostRequestBody) *NullableUserPostRequestBody {
	return &NullableUserPostRequestBody{value: val, isSet: true}
}

func (v NullableUserPostRequestBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPostRequestBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



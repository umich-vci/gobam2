/*
BlueCat Address Manager 9.5 RESTful v2 API

The **BlueCat Address Manager 9.5 RESTful v2 API** is a new RESTful API for Address Manager that presents Address Manager objects as resources. Each resource has a unique endpoint, and related resources are grouped in collections. To fetch an individual resource, a `GET` request is sent to the resource's endpoint. To fetch all resources in a collection, a `GET` request is sent to the collection's endpoint.  The RESTful v2 API is [hypermedia driven](https://en.wikipedia.org/wiki/HATEOAS) and uses the [HAL](https://en.wikipedia.org/wiki/Hypertext_Application_Language) format for representing links. When navigating through the API, you can use those links to navigate to related resources or child resources of the requested endpoint. The API supports the following media types for most endpoints:  `application/hal+json`, `application/json`, and `text/csv`.  For authentication, the API supports both `Basic` and `Bearer` HTTP authentication schemes.  To get started, create a session and receive credentials for `Basic` authentication by sending a `POST` request to the [/sessions](#/Admin%20Resources/postSession) endpoint, with a message body containing the user's credentials:  ```{\"username\":\"apiuser\", \"password\":\"apipass\"}```  The response will contain an `apiToken` field that can be entered with the username in the Swagger UI **Authorize** dialog. The response will also contain a `basicAuthenticationCredentials` field containing a base64 encoding of the requester's username and API token delimited by a colon. This string can be injected directly into request `Authorization` headers in the following format:  ```Authorization: Basic YXBpOlQ0OExOT3VIRGhDcnVBNEo1bGFES3JuS3hTZC9QK3pjczZXTzBJMDY=```  For full details on API format and authentication methods, refer to the Address Manager RESTful v2 API Guide on the BlueCat Documentation Portal.

API version: 9.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gobam2

import (
	"encoding/json"
)

// checks if the LogLevelSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogLevelSettings{}

// LogLevelSettings struct for LogLevelSettings
type LogLevelSettings struct {
	Settings
	// The resource type.
	Type *string `json:"type,omitempty"`
	AddressManager *string `json:"addressManager,omitempty"`
	RestV2 *string `json:"restV2,omitempty"`
	ZoneImport *string `json:"zoneImport,omitempty"`
	ReconciliationService *string `json:"reconciliationService,omitempty"`
	DiscoveryEngine *string `json:"discoveryEngine,omitempty"`
	SnmpClient *string `json:"snmpClient,omitempty"`
	MonitoringService *string `json:"monitoringService,omitempty"`
	RrdTool *string `json:"rrdTool,omitempty"`
}

// NewLogLevelSettings instantiates a new LogLevelSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogLevelSettings() *LogLevelSettings {
	this := LogLevelSettings{}
	return &this
}

// NewLogLevelSettingsWithDefaults instantiates a new LogLevelSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogLevelSettingsWithDefaults() *LogLevelSettings {
	this := LogLevelSettings{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *LogLevelSettings) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogLevelSettings) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *LogLevelSettings) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *LogLevelSettings) SetType(v string) {
	o.Type = &v
}

// GetAddressManager returns the AddressManager field value if set, zero value otherwise.
func (o *LogLevelSettings) GetAddressManager() string {
	if o == nil || IsNil(o.AddressManager) {
		var ret string
		return ret
	}
	return *o.AddressManager
}

// GetAddressManagerOk returns a tuple with the AddressManager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogLevelSettings) GetAddressManagerOk() (*string, bool) {
	if o == nil || IsNil(o.AddressManager) {
		return nil, false
	}
	return o.AddressManager, true
}

// HasAddressManager returns a boolean if a field has been set.
func (o *LogLevelSettings) HasAddressManager() bool {
	if o != nil && !IsNil(o.AddressManager) {
		return true
	}

	return false
}

// SetAddressManager gets a reference to the given string and assigns it to the AddressManager field.
func (o *LogLevelSettings) SetAddressManager(v string) {
	o.AddressManager = &v
}

// GetRestV2 returns the RestV2 field value if set, zero value otherwise.
func (o *LogLevelSettings) GetRestV2() string {
	if o == nil || IsNil(o.RestV2) {
		var ret string
		return ret
	}
	return *o.RestV2
}

// GetRestV2Ok returns a tuple with the RestV2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogLevelSettings) GetRestV2Ok() (*string, bool) {
	if o == nil || IsNil(o.RestV2) {
		return nil, false
	}
	return o.RestV2, true
}

// HasRestV2 returns a boolean if a field has been set.
func (o *LogLevelSettings) HasRestV2() bool {
	if o != nil && !IsNil(o.RestV2) {
		return true
	}

	return false
}

// SetRestV2 gets a reference to the given string and assigns it to the RestV2 field.
func (o *LogLevelSettings) SetRestV2(v string) {
	o.RestV2 = &v
}

// GetZoneImport returns the ZoneImport field value if set, zero value otherwise.
func (o *LogLevelSettings) GetZoneImport() string {
	if o == nil || IsNil(o.ZoneImport) {
		var ret string
		return ret
	}
	return *o.ZoneImport
}

// GetZoneImportOk returns a tuple with the ZoneImport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogLevelSettings) GetZoneImportOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneImport) {
		return nil, false
	}
	return o.ZoneImport, true
}

// HasZoneImport returns a boolean if a field has been set.
func (o *LogLevelSettings) HasZoneImport() bool {
	if o != nil && !IsNil(o.ZoneImport) {
		return true
	}

	return false
}

// SetZoneImport gets a reference to the given string and assigns it to the ZoneImport field.
func (o *LogLevelSettings) SetZoneImport(v string) {
	o.ZoneImport = &v
}

// GetReconciliationService returns the ReconciliationService field value if set, zero value otherwise.
func (o *LogLevelSettings) GetReconciliationService() string {
	if o == nil || IsNil(o.ReconciliationService) {
		var ret string
		return ret
	}
	return *o.ReconciliationService
}

// GetReconciliationServiceOk returns a tuple with the ReconciliationService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogLevelSettings) GetReconciliationServiceOk() (*string, bool) {
	if o == nil || IsNil(o.ReconciliationService) {
		return nil, false
	}
	return o.ReconciliationService, true
}

// HasReconciliationService returns a boolean if a field has been set.
func (o *LogLevelSettings) HasReconciliationService() bool {
	if o != nil && !IsNil(o.ReconciliationService) {
		return true
	}

	return false
}

// SetReconciliationService gets a reference to the given string and assigns it to the ReconciliationService field.
func (o *LogLevelSettings) SetReconciliationService(v string) {
	o.ReconciliationService = &v
}

// GetDiscoveryEngine returns the DiscoveryEngine field value if set, zero value otherwise.
func (o *LogLevelSettings) GetDiscoveryEngine() string {
	if o == nil || IsNil(o.DiscoveryEngine) {
		var ret string
		return ret
	}
	return *o.DiscoveryEngine
}

// GetDiscoveryEngineOk returns a tuple with the DiscoveryEngine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogLevelSettings) GetDiscoveryEngineOk() (*string, bool) {
	if o == nil || IsNil(o.DiscoveryEngine) {
		return nil, false
	}
	return o.DiscoveryEngine, true
}

// HasDiscoveryEngine returns a boolean if a field has been set.
func (o *LogLevelSettings) HasDiscoveryEngine() bool {
	if o != nil && !IsNil(o.DiscoveryEngine) {
		return true
	}

	return false
}

// SetDiscoveryEngine gets a reference to the given string and assigns it to the DiscoveryEngine field.
func (o *LogLevelSettings) SetDiscoveryEngine(v string) {
	o.DiscoveryEngine = &v
}

// GetSnmpClient returns the SnmpClient field value if set, zero value otherwise.
func (o *LogLevelSettings) GetSnmpClient() string {
	if o == nil || IsNil(o.SnmpClient) {
		var ret string
		return ret
	}
	return *o.SnmpClient
}

// GetSnmpClientOk returns a tuple with the SnmpClient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogLevelSettings) GetSnmpClientOk() (*string, bool) {
	if o == nil || IsNil(o.SnmpClient) {
		return nil, false
	}
	return o.SnmpClient, true
}

// HasSnmpClient returns a boolean if a field has been set.
func (o *LogLevelSettings) HasSnmpClient() bool {
	if o != nil && !IsNil(o.SnmpClient) {
		return true
	}

	return false
}

// SetSnmpClient gets a reference to the given string and assigns it to the SnmpClient field.
func (o *LogLevelSettings) SetSnmpClient(v string) {
	o.SnmpClient = &v
}

// GetMonitoringService returns the MonitoringService field value if set, zero value otherwise.
func (o *LogLevelSettings) GetMonitoringService() string {
	if o == nil || IsNil(o.MonitoringService) {
		var ret string
		return ret
	}
	return *o.MonitoringService
}

// GetMonitoringServiceOk returns a tuple with the MonitoringService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogLevelSettings) GetMonitoringServiceOk() (*string, bool) {
	if o == nil || IsNil(o.MonitoringService) {
		return nil, false
	}
	return o.MonitoringService, true
}

// HasMonitoringService returns a boolean if a field has been set.
func (o *LogLevelSettings) HasMonitoringService() bool {
	if o != nil && !IsNil(o.MonitoringService) {
		return true
	}

	return false
}

// SetMonitoringService gets a reference to the given string and assigns it to the MonitoringService field.
func (o *LogLevelSettings) SetMonitoringService(v string) {
	o.MonitoringService = &v
}

// GetRrdTool returns the RrdTool field value if set, zero value otherwise.
func (o *LogLevelSettings) GetRrdTool() string {
	if o == nil || IsNil(o.RrdTool) {
		var ret string
		return ret
	}
	return *o.RrdTool
}

// GetRrdToolOk returns a tuple with the RrdTool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogLevelSettings) GetRrdToolOk() (*string, bool) {
	if o == nil || IsNil(o.RrdTool) {
		return nil, false
	}
	return o.RrdTool, true
}

// HasRrdTool returns a boolean if a field has been set.
func (o *LogLevelSettings) HasRrdTool() bool {
	if o != nil && !IsNil(o.RrdTool) {
		return true
	}

	return false
}

// SetRrdTool gets a reference to the given string and assigns it to the RrdTool field.
func (o *LogLevelSettings) SetRrdTool(v string) {
	o.RrdTool = &v
}

func (o LogLevelSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogLevelSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.AddressManager) {
		toSerialize["addressManager"] = o.AddressManager
	}
	if !IsNil(o.RestV2) {
		toSerialize["restV2"] = o.RestV2
	}
	if !IsNil(o.ZoneImport) {
		toSerialize["zoneImport"] = o.ZoneImport
	}
	if !IsNil(o.ReconciliationService) {
		toSerialize["reconciliationService"] = o.ReconciliationService
	}
	if !IsNil(o.DiscoveryEngine) {
		toSerialize["discoveryEngine"] = o.DiscoveryEngine
	}
	if !IsNil(o.SnmpClient) {
		toSerialize["snmpClient"] = o.SnmpClient
	}
	if !IsNil(o.MonitoringService) {
		toSerialize["monitoringService"] = o.MonitoringService
	}
	if !IsNil(o.RrdTool) {
		toSerialize["rrdTool"] = o.RrdTool
	}
	return toSerialize, nil
}

type NullableLogLevelSettings struct {
	value *LogLevelSettings
	isSet bool
}

func (v NullableLogLevelSettings) Get() *LogLevelSettings {
	return v.value
}

func (v *NullableLogLevelSettings) Set(val *LogLevelSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableLogLevelSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableLogLevelSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogLevelSettings(val *LogLevelSettings) *NullableLogLevelSettings {
	return &NullableLogLevelSettings{value: val, isSet: true}
}

func (v NullableLogLevelSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogLevelSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



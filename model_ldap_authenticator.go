/*
BlueCat Address Manager 9.5 RESTful v2 API

The **BlueCat Address Manager 9.5 RESTful v2 API** is a new RESTful API for Address Manager that presents Address Manager objects as resources. Each resource has a unique endpoint, and related resources are grouped in collections. To fetch an individual resource, a `GET` request is sent to the resource's endpoint. To fetch all resources in a collection, a `GET` request is sent to the collection's endpoint.  The RESTful v2 API is [hypermedia driven](https://en.wikipedia.org/wiki/HATEOAS) and uses the [HAL](https://en.wikipedia.org/wiki/Hypertext_Application_Language) format for representing links. When navigating through the API, you can use those links to navigate to related resources or child resources of the requested endpoint. The API supports the following media types for most endpoints:  `application/hal+json`, `application/json`, and `text/csv`.  For authentication, the API supports both `Basic` and `Bearer` HTTP authentication schemes.  To get started, create a session and receive credentials for `Basic` authentication by sending a `POST` request to the [/sessions](#/Admin%20Resources/postSession) endpoint, with a message body containing the user's credentials:  ```{\"username\":\"apiuser\", \"password\":\"apipass\"}```  The response will contain an `apiToken` field that can be entered with the username in the Swagger UI **Authorize** dialog. The response will also contain a `basicAuthenticationCredentials` field containing a base64 encoding of the requester's username and API token delimited by a colon. This string can be injected directly into request `Authorization` headers in the following format:  ```Authorization: Basic YXBpOlQ0OExOT3VIRGhDcnVBNEo1bGFES3JuS3hTZC9QK3pjczZXTzBJMDY=```  For full details on API format and authentication methods, refer to the Address Manager RESTful v2 API Guide on the BlueCat Documentation Portal.

API version: 9.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gobam2

import (
	"encoding/json"
)

// checks if the LDAPAuthenticator type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LDAPAuthenticator{}

// LDAPAuthenticator struct for LDAPAuthenticator
type LDAPAuthenticator struct {
	Authenticator
	// The type of authenticator.
	Type *string `json:"type,omitempty"`
	// The fully qualified domain name or IP address for the authenticator.
	Hostname *string `json:"hostname,omitempty" validate:"regexp=^.*\\\\S+.*$"`
	// The TCP port used for communication between Address Manager and the default LDAP server.
	Port *int32 `json:"port,omitempty"`
	// The distinguished name or relative distinguished name of a user with rights to search the LDAP directory.
	AdminDn *string `json:"adminDn,omitempty" validate:"regexp=^.*\\\\S+.*$"`
	// The password for the distinguished name or relative distinguished name.
	AdminPassword *string `json:"adminPassword,omitempty" validate:"regexp=^.*\\\\S+.*$"`
	// Determines whether SSL communication is enabled between Address Manager and the LDAP server.
	SslEnabled *bool `json:"sslEnabled,omitempty"`
	// The type of LDAP schema.
	SchemaType *string `json:"schemaType,omitempty"`
	// The search base distinguished name location from which the search for users on the LDAP server begins.
	SearchBase *string `json:"searchBase,omitempty" validate:"regexp=^.*\\\\S+.*$"`
	// The user object class used to locate an LDAP user.
	UserObjectClass *string `json:"userObjectClass,omitempty" validate:"regexp=^.*\\\\S+.*$"`
	// The group object class used to indicate that a DN is a group.
	GroupObjectClass *string `json:"groupObjectClass,omitempty" validate:"regexp=^.*\\\\S+.*$"`
	// The user attribute for user accounts in the LDAP tree.
	UserPrefix *string `json:"userPrefix,omitempty" validate:"regexp=^.*\\\\S+.*$"`
	// The variable to be used for the email prefix.
	EmailPrefix *string `json:"emailPrefix,omitempty" validate:"regexp=^.*\\\\S+.*$"`
	// The attribute used to store user-group membership information.
	MemberOfPrefix *string `json:"memberOfPrefix,omitempty" validate:"regexp=^.*\\\\S+.*$"`
	// The environment property that indicates how to handle referrals from external resources to the service providers.
	ReferralPolicy *string `json:"referralPolicy,omitempty"`
	// The environment property that indicates whether alias entries are dereferenced.
	AliasDereferencePolicy *string `json:"aliasDereferencePolicy,omitempty"`
}

// NewLDAPAuthenticator instantiates a new LDAPAuthenticator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLDAPAuthenticator() *LDAPAuthenticator {
	this := LDAPAuthenticator{}
	return &this
}

// NewLDAPAuthenticatorWithDefaults instantiates a new LDAPAuthenticator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLDAPAuthenticatorWithDefaults() *LDAPAuthenticator {
	this := LDAPAuthenticator{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *LDAPAuthenticator) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPAuthenticator) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *LDAPAuthenticator) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *LDAPAuthenticator) SetType(v string) {
	o.Type = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *LDAPAuthenticator) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPAuthenticator) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *LDAPAuthenticator) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *LDAPAuthenticator) SetHostname(v string) {
	o.Hostname = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *LDAPAuthenticator) GetPort() int32 {
	if o == nil || IsNil(o.Port) {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPAuthenticator) GetPortOk() (*int32, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *LDAPAuthenticator) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *LDAPAuthenticator) SetPort(v int32) {
	o.Port = &v
}

// GetAdminDn returns the AdminDn field value if set, zero value otherwise.
func (o *LDAPAuthenticator) GetAdminDn() string {
	if o == nil || IsNil(o.AdminDn) {
		var ret string
		return ret
	}
	return *o.AdminDn
}

// GetAdminDnOk returns a tuple with the AdminDn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPAuthenticator) GetAdminDnOk() (*string, bool) {
	if o == nil || IsNil(o.AdminDn) {
		return nil, false
	}
	return o.AdminDn, true
}

// HasAdminDn returns a boolean if a field has been set.
func (o *LDAPAuthenticator) HasAdminDn() bool {
	if o != nil && !IsNil(o.AdminDn) {
		return true
	}

	return false
}

// SetAdminDn gets a reference to the given string and assigns it to the AdminDn field.
func (o *LDAPAuthenticator) SetAdminDn(v string) {
	o.AdminDn = &v
}

// GetAdminPassword returns the AdminPassword field value if set, zero value otherwise.
func (o *LDAPAuthenticator) GetAdminPassword() string {
	if o == nil || IsNil(o.AdminPassword) {
		var ret string
		return ret
	}
	return *o.AdminPassword
}

// GetAdminPasswordOk returns a tuple with the AdminPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPAuthenticator) GetAdminPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.AdminPassword) {
		return nil, false
	}
	return o.AdminPassword, true
}

// HasAdminPassword returns a boolean if a field has been set.
func (o *LDAPAuthenticator) HasAdminPassword() bool {
	if o != nil && !IsNil(o.AdminPassword) {
		return true
	}

	return false
}

// SetAdminPassword gets a reference to the given string and assigns it to the AdminPassword field.
func (o *LDAPAuthenticator) SetAdminPassword(v string) {
	o.AdminPassword = &v
}

// GetSslEnabled returns the SslEnabled field value if set, zero value otherwise.
func (o *LDAPAuthenticator) GetSslEnabled() bool {
	if o == nil || IsNil(o.SslEnabled) {
		var ret bool
		return ret
	}
	return *o.SslEnabled
}

// GetSslEnabledOk returns a tuple with the SslEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPAuthenticator) GetSslEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.SslEnabled) {
		return nil, false
	}
	return o.SslEnabled, true
}

// HasSslEnabled returns a boolean if a field has been set.
func (o *LDAPAuthenticator) HasSslEnabled() bool {
	if o != nil && !IsNil(o.SslEnabled) {
		return true
	}

	return false
}

// SetSslEnabled gets a reference to the given bool and assigns it to the SslEnabled field.
func (o *LDAPAuthenticator) SetSslEnabled(v bool) {
	o.SslEnabled = &v
}

// GetSchemaType returns the SchemaType field value if set, zero value otherwise.
func (o *LDAPAuthenticator) GetSchemaType() string {
	if o == nil || IsNil(o.SchemaType) {
		var ret string
		return ret
	}
	return *o.SchemaType
}

// GetSchemaTypeOk returns a tuple with the SchemaType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPAuthenticator) GetSchemaTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SchemaType) {
		return nil, false
	}
	return o.SchemaType, true
}

// HasSchemaType returns a boolean if a field has been set.
func (o *LDAPAuthenticator) HasSchemaType() bool {
	if o != nil && !IsNil(o.SchemaType) {
		return true
	}

	return false
}

// SetSchemaType gets a reference to the given string and assigns it to the SchemaType field.
func (o *LDAPAuthenticator) SetSchemaType(v string) {
	o.SchemaType = &v
}

// GetSearchBase returns the SearchBase field value if set, zero value otherwise.
func (o *LDAPAuthenticator) GetSearchBase() string {
	if o == nil || IsNil(o.SearchBase) {
		var ret string
		return ret
	}
	return *o.SearchBase
}

// GetSearchBaseOk returns a tuple with the SearchBase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPAuthenticator) GetSearchBaseOk() (*string, bool) {
	if o == nil || IsNil(o.SearchBase) {
		return nil, false
	}
	return o.SearchBase, true
}

// HasSearchBase returns a boolean if a field has been set.
func (o *LDAPAuthenticator) HasSearchBase() bool {
	if o != nil && !IsNil(o.SearchBase) {
		return true
	}

	return false
}

// SetSearchBase gets a reference to the given string and assigns it to the SearchBase field.
func (o *LDAPAuthenticator) SetSearchBase(v string) {
	o.SearchBase = &v
}

// GetUserObjectClass returns the UserObjectClass field value if set, zero value otherwise.
func (o *LDAPAuthenticator) GetUserObjectClass() string {
	if o == nil || IsNil(o.UserObjectClass) {
		var ret string
		return ret
	}
	return *o.UserObjectClass
}

// GetUserObjectClassOk returns a tuple with the UserObjectClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPAuthenticator) GetUserObjectClassOk() (*string, bool) {
	if o == nil || IsNil(o.UserObjectClass) {
		return nil, false
	}
	return o.UserObjectClass, true
}

// HasUserObjectClass returns a boolean if a field has been set.
func (o *LDAPAuthenticator) HasUserObjectClass() bool {
	if o != nil && !IsNil(o.UserObjectClass) {
		return true
	}

	return false
}

// SetUserObjectClass gets a reference to the given string and assigns it to the UserObjectClass field.
func (o *LDAPAuthenticator) SetUserObjectClass(v string) {
	o.UserObjectClass = &v
}

// GetGroupObjectClass returns the GroupObjectClass field value if set, zero value otherwise.
func (o *LDAPAuthenticator) GetGroupObjectClass() string {
	if o == nil || IsNil(o.GroupObjectClass) {
		var ret string
		return ret
	}
	return *o.GroupObjectClass
}

// GetGroupObjectClassOk returns a tuple with the GroupObjectClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPAuthenticator) GetGroupObjectClassOk() (*string, bool) {
	if o == nil || IsNil(o.GroupObjectClass) {
		return nil, false
	}
	return o.GroupObjectClass, true
}

// HasGroupObjectClass returns a boolean if a field has been set.
func (o *LDAPAuthenticator) HasGroupObjectClass() bool {
	if o != nil && !IsNil(o.GroupObjectClass) {
		return true
	}

	return false
}

// SetGroupObjectClass gets a reference to the given string and assigns it to the GroupObjectClass field.
func (o *LDAPAuthenticator) SetGroupObjectClass(v string) {
	o.GroupObjectClass = &v
}

// GetUserPrefix returns the UserPrefix field value if set, zero value otherwise.
func (o *LDAPAuthenticator) GetUserPrefix() string {
	if o == nil || IsNil(o.UserPrefix) {
		var ret string
		return ret
	}
	return *o.UserPrefix
}

// GetUserPrefixOk returns a tuple with the UserPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPAuthenticator) GetUserPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.UserPrefix) {
		return nil, false
	}
	return o.UserPrefix, true
}

// HasUserPrefix returns a boolean if a field has been set.
func (o *LDAPAuthenticator) HasUserPrefix() bool {
	if o != nil && !IsNil(o.UserPrefix) {
		return true
	}

	return false
}

// SetUserPrefix gets a reference to the given string and assigns it to the UserPrefix field.
func (o *LDAPAuthenticator) SetUserPrefix(v string) {
	o.UserPrefix = &v
}

// GetEmailPrefix returns the EmailPrefix field value if set, zero value otherwise.
func (o *LDAPAuthenticator) GetEmailPrefix() string {
	if o == nil || IsNil(o.EmailPrefix) {
		var ret string
		return ret
	}
	return *o.EmailPrefix
}

// GetEmailPrefixOk returns a tuple with the EmailPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPAuthenticator) GetEmailPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.EmailPrefix) {
		return nil, false
	}
	return o.EmailPrefix, true
}

// HasEmailPrefix returns a boolean if a field has been set.
func (o *LDAPAuthenticator) HasEmailPrefix() bool {
	if o != nil && !IsNil(o.EmailPrefix) {
		return true
	}

	return false
}

// SetEmailPrefix gets a reference to the given string and assigns it to the EmailPrefix field.
func (o *LDAPAuthenticator) SetEmailPrefix(v string) {
	o.EmailPrefix = &v
}

// GetMemberOfPrefix returns the MemberOfPrefix field value if set, zero value otherwise.
func (o *LDAPAuthenticator) GetMemberOfPrefix() string {
	if o == nil || IsNil(o.MemberOfPrefix) {
		var ret string
		return ret
	}
	return *o.MemberOfPrefix
}

// GetMemberOfPrefixOk returns a tuple with the MemberOfPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPAuthenticator) GetMemberOfPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.MemberOfPrefix) {
		return nil, false
	}
	return o.MemberOfPrefix, true
}

// HasMemberOfPrefix returns a boolean if a field has been set.
func (o *LDAPAuthenticator) HasMemberOfPrefix() bool {
	if o != nil && !IsNil(o.MemberOfPrefix) {
		return true
	}

	return false
}

// SetMemberOfPrefix gets a reference to the given string and assigns it to the MemberOfPrefix field.
func (o *LDAPAuthenticator) SetMemberOfPrefix(v string) {
	o.MemberOfPrefix = &v
}

// GetReferralPolicy returns the ReferralPolicy field value if set, zero value otherwise.
func (o *LDAPAuthenticator) GetReferralPolicy() string {
	if o == nil || IsNil(o.ReferralPolicy) {
		var ret string
		return ret
	}
	return *o.ReferralPolicy
}

// GetReferralPolicyOk returns a tuple with the ReferralPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPAuthenticator) GetReferralPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.ReferralPolicy) {
		return nil, false
	}
	return o.ReferralPolicy, true
}

// HasReferralPolicy returns a boolean if a field has been set.
func (o *LDAPAuthenticator) HasReferralPolicy() bool {
	if o != nil && !IsNil(o.ReferralPolicy) {
		return true
	}

	return false
}

// SetReferralPolicy gets a reference to the given string and assigns it to the ReferralPolicy field.
func (o *LDAPAuthenticator) SetReferralPolicy(v string) {
	o.ReferralPolicy = &v
}

// GetAliasDereferencePolicy returns the AliasDereferencePolicy field value if set, zero value otherwise.
func (o *LDAPAuthenticator) GetAliasDereferencePolicy() string {
	if o == nil || IsNil(o.AliasDereferencePolicy) {
		var ret string
		return ret
	}
	return *o.AliasDereferencePolicy
}

// GetAliasDereferencePolicyOk returns a tuple with the AliasDereferencePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPAuthenticator) GetAliasDereferencePolicyOk() (*string, bool) {
	if o == nil || IsNil(o.AliasDereferencePolicy) {
		return nil, false
	}
	return o.AliasDereferencePolicy, true
}

// HasAliasDereferencePolicy returns a boolean if a field has been set.
func (o *LDAPAuthenticator) HasAliasDereferencePolicy() bool {
	if o != nil && !IsNil(o.AliasDereferencePolicy) {
		return true
	}

	return false
}

// SetAliasDereferencePolicy gets a reference to the given string and assigns it to the AliasDereferencePolicy field.
func (o *LDAPAuthenticator) SetAliasDereferencePolicy(v string) {
	o.AliasDereferencePolicy = &v
}

func (o LDAPAuthenticator) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LDAPAuthenticator) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.AdminDn) {
		toSerialize["adminDn"] = o.AdminDn
	}
	if !IsNil(o.AdminPassword) {
		toSerialize["adminPassword"] = o.AdminPassword
	}
	if !IsNil(o.SslEnabled) {
		toSerialize["sslEnabled"] = o.SslEnabled
	}
	if !IsNil(o.SchemaType) {
		toSerialize["schemaType"] = o.SchemaType
	}
	if !IsNil(o.SearchBase) {
		toSerialize["searchBase"] = o.SearchBase
	}
	if !IsNil(o.UserObjectClass) {
		toSerialize["userObjectClass"] = o.UserObjectClass
	}
	if !IsNil(o.GroupObjectClass) {
		toSerialize["groupObjectClass"] = o.GroupObjectClass
	}
	if !IsNil(o.UserPrefix) {
		toSerialize["userPrefix"] = o.UserPrefix
	}
	if !IsNil(o.EmailPrefix) {
		toSerialize["emailPrefix"] = o.EmailPrefix
	}
	if !IsNil(o.MemberOfPrefix) {
		toSerialize["memberOfPrefix"] = o.MemberOfPrefix
	}
	if !IsNil(o.ReferralPolicy) {
		toSerialize["referralPolicy"] = o.ReferralPolicy
	}
	if !IsNil(o.AliasDereferencePolicy) {
		toSerialize["aliasDereferencePolicy"] = o.AliasDereferencePolicy
	}
	return toSerialize, nil
}

type NullableLDAPAuthenticator struct {
	value *LDAPAuthenticator
	isSet bool
}

func (v NullableLDAPAuthenticator) Get() *LDAPAuthenticator {
	return v.value
}

func (v *NullableLDAPAuthenticator) Set(val *LDAPAuthenticator) {
	v.value = val
	v.isSet = true
}

func (v NullableLDAPAuthenticator) IsSet() bool {
	return v.isSet
}

func (v *NullableLDAPAuthenticator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLDAPAuthenticator(val *LDAPAuthenticator) *NullableLDAPAuthenticator {
	return &NullableLDAPAuthenticator{value: val, isSet: true}
}

func (v NullableLDAPAuthenticator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLDAPAuthenticator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



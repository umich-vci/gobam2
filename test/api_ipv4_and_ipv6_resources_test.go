/*
BlueCat Address Manager 9.5 RESTful v2 API

Testing IPv4AndIPv6ResourcesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package gobam2

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/umich-vci/gobam2"
)

func Test_gobam2_IPv4AndIPv6ResourcesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test IPv4AndIPv6ResourcesAPIService DeleteAddress", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.DeleteAddress(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService DeleteBlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.DeleteBlock(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService DeleteCollectionAddress", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collection string
		var collectionId int64
		var id int64

		httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.DeleteCollectionAddress(context.Background(), collection, collectionId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService DeleteCollectionAppliedResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collection string
		var collectionId int64
		var id int64

		httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.DeleteCollectionAppliedResource(context.Background(), collection, collectionId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService DeleteCollectionRestrictedRange", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collection string
		var collectionId int64
		var id int64

		httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.DeleteCollectionRestrictedRange(context.Background(), collection, collectionId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService DeleteIpGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.DeleteIpGroup(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService DeleteNetwork", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.DeleteNetwork(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService DeleteRange", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.DeleteRange(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService DeleteReconciliationPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.DeleteReconciliationPolicy(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService DeleteTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.DeleteTemplate(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService DeleteTemplateItem", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.DeleteTemplateItem(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetAddress", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetAddress(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetAddresses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetAddresses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetBlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetBlock(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetBlockBlocks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collectionId int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetBlockBlocks(context.Background(), collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetBlockNetworks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collectionId int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetBlockNetworks(context.Background(), collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetBlocks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetBlocks(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetCollectionAddress", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collection string
		var collectionId int64
		var id int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetCollectionAddress(context.Background(), collection, collectionId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetCollectionAddresses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collection string
		var collectionId int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetCollectionAddresses(context.Background(), collection, collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetCollectionAppliedResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collection string
		var collectionId int64
		var id int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetCollectionAppliedResource(context.Background(), collection, collectionId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetCollectionAppliedResources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collection string
		var collectionId int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetCollectionAppliedResources(context.Background(), collection, collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetCollectionLeases", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collection string
		var collectionId int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetCollectionLeases(context.Background(), collection, collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetCollectionMerges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collection string
		var collectionId int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetCollectionMerges(context.Background(), collection, collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetCollectionMoves", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collection string
		var collectionId int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetCollectionMoves(context.Background(), collection, collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetCollectionReconciliationPolicies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collection string
		var collectionId int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetCollectionReconciliationPolicies(context.Background(), collection, collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetCollectionRestrictedRange", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collection string
		var collectionId int64
		var id int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetCollectionRestrictedRange(context.Background(), collection, collectionId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetCollectionRestrictedRanges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collection string
		var collectionId int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetCollectionRestrictedRanges(context.Background(), collection, collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetCollectionSplits", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collection string
		var collectionId int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetCollectionSplits(context.Background(), collection, collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetCollectionTemplateApplications", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collection string
		var collectionId int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetCollectionTemplateApplications(context.Background(), collection, collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetCollectionTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collection string
		var collectionId int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetCollectionTemplates(context.Background(), collection, collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetConfigurationBlocks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collectionId int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetConfigurationBlocks(context.Background(), collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetIpGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetIpGroup(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetIpGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetIpGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetLease", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetLease(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetLeases", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetLeases(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetMerge", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetMerge(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetMergeBlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collectionId int64
		var id int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetMergeBlock(context.Background(), collectionId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetMergeBlocks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collectionId int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetMergeBlocks(context.Background(), collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetMergeNetwork", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collectionId int64
		var id int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetMergeNetwork(context.Background(), collectionId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetMergeNetworks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collectionId int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetMergeNetworks(context.Background(), collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetMergeRange", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collectionId int64
		var id int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetMergeRange(context.Background(), collectionId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetMergeRanges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collectionId int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetMergeRanges(context.Background(), collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetMerges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetMerges(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetMove", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetMove(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetMoves", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetMoves(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetNetwork", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetNetwork(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetNetworkAddresses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collectionId int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetNetworkAddresses(context.Background(), collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetNetworkIpGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collectionId int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetNetworkIpGroups(context.Background(), collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetNetworkRanges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collectionId int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetNetworkRanges(context.Background(), collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetNetworks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetNetworks(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetRange", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetRange(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetRanges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetRanges(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetReconciliationPolicies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetReconciliationPolicies(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetReconciliationPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetReconciliationPolicy(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetReconciliationPolicyDiscoveredDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collectionId int64
		var id int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetReconciliationPolicyDiscoveredDevice(context.Background(), collectionId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetReconciliationPolicyDiscoveredDevices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collectionId int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetReconciliationPolicyDiscoveredDevices(context.Background(), collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetSplit", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetSplit(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetSplitBlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collectionId int64
		var id int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetSplitBlock(context.Background(), collectionId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetSplitBlocks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collectionId int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetSplitBlocks(context.Background(), collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetSplitNetwork", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collectionId int64
		var id int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetSplitNetwork(context.Background(), collectionId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetSplitNetworks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collectionId int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetSplitNetworks(context.Background(), collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetSplits", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetSplits(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetTemplate(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetTemplateApplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetTemplateApplication(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetTemplateApplications", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetTemplateApplications(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetTemplateConflictingResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collectionId int64
		var id int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetTemplateConflictingResource(context.Background(), collectionId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetTemplateConflictingResources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collectionId int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetTemplateConflictingResources(context.Background(), collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetTemplateItem", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetTemplateItem(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetTemplateItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetTemplateItems(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetTemplateTemplateItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collectionId int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetTemplateTemplateItems(context.Background(), collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService GetTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.GetTemplates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService PostBlockBlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collectionId int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.PostBlockBlock(context.Background(), collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService PostBlockNetwork", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collectionId int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.PostBlockNetwork(context.Background(), collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService PostCollectionAddress", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collection string
		var collectionId int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.PostCollectionAddress(context.Background(), collection, collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService PostCollectionAppliedResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collection string
		var collectionId int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.PostCollectionAppliedResource(context.Background(), collection, collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService PostCollectionMerge", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collection string
		var collectionId int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.PostCollectionMerge(context.Background(), collection, collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService PostCollectionMove", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collection string
		var collectionId int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.PostCollectionMove(context.Background(), collection, collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService PostCollectionReconciliationPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collection string
		var collectionId int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.PostCollectionReconciliationPolicy(context.Background(), collection, collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService PostCollectionRestrictedRange", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collection string
		var collectionId int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.PostCollectionRestrictedRange(context.Background(), collection, collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService PostCollectionSplit", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collection string
		var collectionId int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.PostCollectionSplit(context.Background(), collection, collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService PostCollectionTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collection string
		var collectionId int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.PostCollectionTemplate(context.Background(), collection, collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService PostCollectionTemplateApplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collection string
		var collectionId int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.PostCollectionTemplateApplication(context.Background(), collection, collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService PostConfigurationBlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collectionId int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.PostConfigurationBlock(context.Background(), collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService PostNetworkAddress", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collectionId int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.PostNetworkAddress(context.Background(), collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService PostNetworkIpGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collectionId int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.PostNetworkIpGroup(context.Background(), collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService PostNetworkRange", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collectionId int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.PostNetworkRange(context.Background(), collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService PostTemplateTemplateItem", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collectionId int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.PostTemplateTemplateItem(context.Background(), collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService PutAddress", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.PutAddress(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService PutBlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.PutBlock(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService PutIpGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.PutIpGroup(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService PutNetwork", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.PutNetwork(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService PutRange", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.PutRange(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService PutReconciliationPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.PutReconciliationPolicy(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService PutTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.PutTemplate(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IPv4AndIPv6ResourcesAPIService PutTemplateItem", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.IPv4AndIPv6ResourcesAPI.PutTemplateItem(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

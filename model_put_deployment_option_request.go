/*
BlueCat Address Manager 9.5 RESTful v2 API

The **BlueCat Address Manager 9.5 RESTful v2 API** is a new RESTful API for Address Manager that presents Address Manager objects as resources. Each resource has a unique endpoint, and related resources are grouped in collections. To fetch an individual resource, a `GET` request is sent to the resource's endpoint. To fetch all resources in a collection, a `GET` request is sent to the collection's endpoint.  The RESTful v2 API is [hypermedia driven](https://en.wikipedia.org/wiki/HATEOAS) and uses the [HAL](https://en.wikipedia.org/wiki/Hypertext_Application_Language) format for representing links. When navigating through the API, you can use those links to navigate to related resources or child resources of the requested endpoint. The API supports the following media types for most endpoints:  `application/hal+json`, `application/json`, and `text/csv`.  For authentication, the API supports both `Basic` and `Bearer` HTTP authentication schemes.  To get started, create a session and receive credentials for `Basic` authentication by sending a `POST` request to the [/sessions](#/Admin%20Resources/postSession) endpoint, with a message body containing the user's credentials:  ```{\"username\":\"apiuser\", \"password\":\"apipass\"}```  The response will contain an `apiToken` field that can be entered with the username in the Swagger UI **Authorize** dialog. The response will also contain a `basicAuthenticationCredentials` field containing a base64 encoding of the requester's username and API token delimited by a colon. This string can be injected directly into request `Authorization` headers in the following format:  ```Authorization: Basic YXBpOlQ0OExOT3VIRGhDcnVBNEo1bGFES3JuS3hTZC9QK3pjczZXTzBJMDY=```  For full details on API format and authentication methods, refer to the Address Manager RESTful v2 API Guide on the BlueCat Documentation Portal.

API version: 9.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gobam2

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// PutDeploymentOptionRequest - struct for PutDeploymentOptionRequest
type PutDeploymentOptionRequest struct {
	DHCPVendorOptionPutRequestBody *DHCPVendorOptionPutRequestBody
	DHCPv4ClientOptionPutRequestBody *DHCPv4ClientOptionPutRequestBody
	DHCPv4RawOptionPutRequestBody *DHCPv4RawOptionPutRequestBody
	DHCPv4ServiceOptionPutRequestBody *DHCPv4ServiceOptionPutRequestBody
	DHCPv6ClientOptionPutRequestBody *DHCPv6ClientOptionPutRequestBody
	DHCPv6RawOptionPutRequestBody *DHCPv6RawOptionPutRequestBody
	DHCPv6ServiceOptionPutRequestBody *DHCPv6ServiceOptionPutRequestBody
	DNSOptionPutRequestBody *DNSOptionPutRequestBody
	DNSRawOptionPutRequestBody *DNSRawOptionPutRequestBody
	StartOfAuthorityPutRequestBody *StartOfAuthorityPutRequestBody
}

// DHCPVendorOptionPutRequestBodyAsPutDeploymentOptionRequest is a convenience function that returns DHCPVendorOptionPutRequestBody wrapped in PutDeploymentOptionRequest
func DHCPVendorOptionPutRequestBodyAsPutDeploymentOptionRequest(v *DHCPVendorOptionPutRequestBody) PutDeploymentOptionRequest {
	return PutDeploymentOptionRequest{
		DHCPVendorOptionPutRequestBody: v,
	}
}

// DHCPv4ClientOptionPutRequestBodyAsPutDeploymentOptionRequest is a convenience function that returns DHCPv4ClientOptionPutRequestBody wrapped in PutDeploymentOptionRequest
func DHCPv4ClientOptionPutRequestBodyAsPutDeploymentOptionRequest(v *DHCPv4ClientOptionPutRequestBody) PutDeploymentOptionRequest {
	return PutDeploymentOptionRequest{
		DHCPv4ClientOptionPutRequestBody: v,
	}
}

// DHCPv4RawOptionPutRequestBodyAsPutDeploymentOptionRequest is a convenience function that returns DHCPv4RawOptionPutRequestBody wrapped in PutDeploymentOptionRequest
func DHCPv4RawOptionPutRequestBodyAsPutDeploymentOptionRequest(v *DHCPv4RawOptionPutRequestBody) PutDeploymentOptionRequest {
	return PutDeploymentOptionRequest{
		DHCPv4RawOptionPutRequestBody: v,
	}
}

// DHCPv4ServiceOptionPutRequestBodyAsPutDeploymentOptionRequest is a convenience function that returns DHCPv4ServiceOptionPutRequestBody wrapped in PutDeploymentOptionRequest
func DHCPv4ServiceOptionPutRequestBodyAsPutDeploymentOptionRequest(v *DHCPv4ServiceOptionPutRequestBody) PutDeploymentOptionRequest {
	return PutDeploymentOptionRequest{
		DHCPv4ServiceOptionPutRequestBody: v,
	}
}

// DHCPv6ClientOptionPutRequestBodyAsPutDeploymentOptionRequest is a convenience function that returns DHCPv6ClientOptionPutRequestBody wrapped in PutDeploymentOptionRequest
func DHCPv6ClientOptionPutRequestBodyAsPutDeploymentOptionRequest(v *DHCPv6ClientOptionPutRequestBody) PutDeploymentOptionRequest {
	return PutDeploymentOptionRequest{
		DHCPv6ClientOptionPutRequestBody: v,
	}
}

// DHCPv6RawOptionPutRequestBodyAsPutDeploymentOptionRequest is a convenience function that returns DHCPv6RawOptionPutRequestBody wrapped in PutDeploymentOptionRequest
func DHCPv6RawOptionPutRequestBodyAsPutDeploymentOptionRequest(v *DHCPv6RawOptionPutRequestBody) PutDeploymentOptionRequest {
	return PutDeploymentOptionRequest{
		DHCPv6RawOptionPutRequestBody: v,
	}
}

// DHCPv6ServiceOptionPutRequestBodyAsPutDeploymentOptionRequest is a convenience function that returns DHCPv6ServiceOptionPutRequestBody wrapped in PutDeploymentOptionRequest
func DHCPv6ServiceOptionPutRequestBodyAsPutDeploymentOptionRequest(v *DHCPv6ServiceOptionPutRequestBody) PutDeploymentOptionRequest {
	return PutDeploymentOptionRequest{
		DHCPv6ServiceOptionPutRequestBody: v,
	}
}

// DNSOptionPutRequestBodyAsPutDeploymentOptionRequest is a convenience function that returns DNSOptionPutRequestBody wrapped in PutDeploymentOptionRequest
func DNSOptionPutRequestBodyAsPutDeploymentOptionRequest(v *DNSOptionPutRequestBody) PutDeploymentOptionRequest {
	return PutDeploymentOptionRequest{
		DNSOptionPutRequestBody: v,
	}
}

// DNSRawOptionPutRequestBodyAsPutDeploymentOptionRequest is a convenience function that returns DNSRawOptionPutRequestBody wrapped in PutDeploymentOptionRequest
func DNSRawOptionPutRequestBodyAsPutDeploymentOptionRequest(v *DNSRawOptionPutRequestBody) PutDeploymentOptionRequest {
	return PutDeploymentOptionRequest{
		DNSRawOptionPutRequestBody: v,
	}
}

// StartOfAuthorityPutRequestBodyAsPutDeploymentOptionRequest is a convenience function that returns StartOfAuthorityPutRequestBody wrapped in PutDeploymentOptionRequest
func StartOfAuthorityPutRequestBodyAsPutDeploymentOptionRequest(v *StartOfAuthorityPutRequestBody) PutDeploymentOptionRequest {
	return PutDeploymentOptionRequest{
		StartOfAuthorityPutRequestBody: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PutDeploymentOptionRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DHCPVendorOptionPutRequestBody
	err = newStrictDecoder(data).Decode(&dst.DHCPVendorOptionPutRequestBody)
	if err == nil {
		jsonDHCPVendorOptionPutRequestBody, _ := json.Marshal(dst.DHCPVendorOptionPutRequestBody)
		if string(jsonDHCPVendorOptionPutRequestBody) == "{}" { // empty struct
			dst.DHCPVendorOptionPutRequestBody = nil
		} else {
			if err = validator.Validate(dst.DHCPVendorOptionPutRequestBody); err != nil {
				dst.DHCPVendorOptionPutRequestBody = nil
			} else {
				match++
			}
		}
	} else {
		dst.DHCPVendorOptionPutRequestBody = nil
	}

	// try to unmarshal data into DHCPv4ClientOptionPutRequestBody
	err = newStrictDecoder(data).Decode(&dst.DHCPv4ClientOptionPutRequestBody)
	if err == nil {
		jsonDHCPv4ClientOptionPutRequestBody, _ := json.Marshal(dst.DHCPv4ClientOptionPutRequestBody)
		if string(jsonDHCPv4ClientOptionPutRequestBody) == "{}" { // empty struct
			dst.DHCPv4ClientOptionPutRequestBody = nil
		} else {
			if err = validator.Validate(dst.DHCPv4ClientOptionPutRequestBody); err != nil {
				dst.DHCPv4ClientOptionPutRequestBody = nil
			} else {
				match++
			}
		}
	} else {
		dst.DHCPv4ClientOptionPutRequestBody = nil
	}

	// try to unmarshal data into DHCPv4RawOptionPutRequestBody
	err = newStrictDecoder(data).Decode(&dst.DHCPv4RawOptionPutRequestBody)
	if err == nil {
		jsonDHCPv4RawOptionPutRequestBody, _ := json.Marshal(dst.DHCPv4RawOptionPutRequestBody)
		if string(jsonDHCPv4RawOptionPutRequestBody) == "{}" { // empty struct
			dst.DHCPv4RawOptionPutRequestBody = nil
		} else {
			if err = validator.Validate(dst.DHCPv4RawOptionPutRequestBody); err != nil {
				dst.DHCPv4RawOptionPutRequestBody = nil
			} else {
				match++
			}
		}
	} else {
		dst.DHCPv4RawOptionPutRequestBody = nil
	}

	// try to unmarshal data into DHCPv4ServiceOptionPutRequestBody
	err = newStrictDecoder(data).Decode(&dst.DHCPv4ServiceOptionPutRequestBody)
	if err == nil {
		jsonDHCPv4ServiceOptionPutRequestBody, _ := json.Marshal(dst.DHCPv4ServiceOptionPutRequestBody)
		if string(jsonDHCPv4ServiceOptionPutRequestBody) == "{}" { // empty struct
			dst.DHCPv4ServiceOptionPutRequestBody = nil
		} else {
			if err = validator.Validate(dst.DHCPv4ServiceOptionPutRequestBody); err != nil {
				dst.DHCPv4ServiceOptionPutRequestBody = nil
			} else {
				match++
			}
		}
	} else {
		dst.DHCPv4ServiceOptionPutRequestBody = nil
	}

	// try to unmarshal data into DHCPv6ClientOptionPutRequestBody
	err = newStrictDecoder(data).Decode(&dst.DHCPv6ClientOptionPutRequestBody)
	if err == nil {
		jsonDHCPv6ClientOptionPutRequestBody, _ := json.Marshal(dst.DHCPv6ClientOptionPutRequestBody)
		if string(jsonDHCPv6ClientOptionPutRequestBody) == "{}" { // empty struct
			dst.DHCPv6ClientOptionPutRequestBody = nil
		} else {
			if err = validator.Validate(dst.DHCPv6ClientOptionPutRequestBody); err != nil {
				dst.DHCPv6ClientOptionPutRequestBody = nil
			} else {
				match++
			}
		}
	} else {
		dst.DHCPv6ClientOptionPutRequestBody = nil
	}

	// try to unmarshal data into DHCPv6RawOptionPutRequestBody
	err = newStrictDecoder(data).Decode(&dst.DHCPv6RawOptionPutRequestBody)
	if err == nil {
		jsonDHCPv6RawOptionPutRequestBody, _ := json.Marshal(dst.DHCPv6RawOptionPutRequestBody)
		if string(jsonDHCPv6RawOptionPutRequestBody) == "{}" { // empty struct
			dst.DHCPv6RawOptionPutRequestBody = nil
		} else {
			if err = validator.Validate(dst.DHCPv6RawOptionPutRequestBody); err != nil {
				dst.DHCPv6RawOptionPutRequestBody = nil
			} else {
				match++
			}
		}
	} else {
		dst.DHCPv6RawOptionPutRequestBody = nil
	}

	// try to unmarshal data into DHCPv6ServiceOptionPutRequestBody
	err = newStrictDecoder(data).Decode(&dst.DHCPv6ServiceOptionPutRequestBody)
	if err == nil {
		jsonDHCPv6ServiceOptionPutRequestBody, _ := json.Marshal(dst.DHCPv6ServiceOptionPutRequestBody)
		if string(jsonDHCPv6ServiceOptionPutRequestBody) == "{}" { // empty struct
			dst.DHCPv6ServiceOptionPutRequestBody = nil
		} else {
			if err = validator.Validate(dst.DHCPv6ServiceOptionPutRequestBody); err != nil {
				dst.DHCPv6ServiceOptionPutRequestBody = nil
			} else {
				match++
			}
		}
	} else {
		dst.DHCPv6ServiceOptionPutRequestBody = nil
	}

	// try to unmarshal data into DNSOptionPutRequestBody
	err = newStrictDecoder(data).Decode(&dst.DNSOptionPutRequestBody)
	if err == nil {
		jsonDNSOptionPutRequestBody, _ := json.Marshal(dst.DNSOptionPutRequestBody)
		if string(jsonDNSOptionPutRequestBody) == "{}" { // empty struct
			dst.DNSOptionPutRequestBody = nil
		} else {
			if err = validator.Validate(dst.DNSOptionPutRequestBody); err != nil {
				dst.DNSOptionPutRequestBody = nil
			} else {
				match++
			}
		}
	} else {
		dst.DNSOptionPutRequestBody = nil
	}

	// try to unmarshal data into DNSRawOptionPutRequestBody
	err = newStrictDecoder(data).Decode(&dst.DNSRawOptionPutRequestBody)
	if err == nil {
		jsonDNSRawOptionPutRequestBody, _ := json.Marshal(dst.DNSRawOptionPutRequestBody)
		if string(jsonDNSRawOptionPutRequestBody) == "{}" { // empty struct
			dst.DNSRawOptionPutRequestBody = nil
		} else {
			if err = validator.Validate(dst.DNSRawOptionPutRequestBody); err != nil {
				dst.DNSRawOptionPutRequestBody = nil
			} else {
				match++
			}
		}
	} else {
		dst.DNSRawOptionPutRequestBody = nil
	}

	// try to unmarshal data into StartOfAuthorityPutRequestBody
	err = newStrictDecoder(data).Decode(&dst.StartOfAuthorityPutRequestBody)
	if err == nil {
		jsonStartOfAuthorityPutRequestBody, _ := json.Marshal(dst.StartOfAuthorityPutRequestBody)
		if string(jsonStartOfAuthorityPutRequestBody) == "{}" { // empty struct
			dst.StartOfAuthorityPutRequestBody = nil
		} else {
			if err = validator.Validate(dst.StartOfAuthorityPutRequestBody); err != nil {
				dst.StartOfAuthorityPutRequestBody = nil
			} else {
				match++
			}
		}
	} else {
		dst.StartOfAuthorityPutRequestBody = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DHCPVendorOptionPutRequestBody = nil
		dst.DHCPv4ClientOptionPutRequestBody = nil
		dst.DHCPv4RawOptionPutRequestBody = nil
		dst.DHCPv4ServiceOptionPutRequestBody = nil
		dst.DHCPv6ClientOptionPutRequestBody = nil
		dst.DHCPv6RawOptionPutRequestBody = nil
		dst.DHCPv6ServiceOptionPutRequestBody = nil
		dst.DNSOptionPutRequestBody = nil
		dst.DNSRawOptionPutRequestBody = nil
		dst.StartOfAuthorityPutRequestBody = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PutDeploymentOptionRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PutDeploymentOptionRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PutDeploymentOptionRequest) MarshalJSON() ([]byte, error) {
	if src.DHCPVendorOptionPutRequestBody != nil {
		return json.Marshal(&src.DHCPVendorOptionPutRequestBody)
	}

	if src.DHCPv4ClientOptionPutRequestBody != nil {
		return json.Marshal(&src.DHCPv4ClientOptionPutRequestBody)
	}

	if src.DHCPv4RawOptionPutRequestBody != nil {
		return json.Marshal(&src.DHCPv4RawOptionPutRequestBody)
	}

	if src.DHCPv4ServiceOptionPutRequestBody != nil {
		return json.Marshal(&src.DHCPv4ServiceOptionPutRequestBody)
	}

	if src.DHCPv6ClientOptionPutRequestBody != nil {
		return json.Marshal(&src.DHCPv6ClientOptionPutRequestBody)
	}

	if src.DHCPv6RawOptionPutRequestBody != nil {
		return json.Marshal(&src.DHCPv6RawOptionPutRequestBody)
	}

	if src.DHCPv6ServiceOptionPutRequestBody != nil {
		return json.Marshal(&src.DHCPv6ServiceOptionPutRequestBody)
	}

	if src.DNSOptionPutRequestBody != nil {
		return json.Marshal(&src.DNSOptionPutRequestBody)
	}

	if src.DNSRawOptionPutRequestBody != nil {
		return json.Marshal(&src.DNSRawOptionPutRequestBody)
	}

	if src.StartOfAuthorityPutRequestBody != nil {
		return json.Marshal(&src.StartOfAuthorityPutRequestBody)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PutDeploymentOptionRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DHCPVendorOptionPutRequestBody != nil {
		return obj.DHCPVendorOptionPutRequestBody
	}

	if obj.DHCPv4ClientOptionPutRequestBody != nil {
		return obj.DHCPv4ClientOptionPutRequestBody
	}

	if obj.DHCPv4RawOptionPutRequestBody != nil {
		return obj.DHCPv4RawOptionPutRequestBody
	}

	if obj.DHCPv4ServiceOptionPutRequestBody != nil {
		return obj.DHCPv4ServiceOptionPutRequestBody
	}

	if obj.DHCPv6ClientOptionPutRequestBody != nil {
		return obj.DHCPv6ClientOptionPutRequestBody
	}

	if obj.DHCPv6RawOptionPutRequestBody != nil {
		return obj.DHCPv6RawOptionPutRequestBody
	}

	if obj.DHCPv6ServiceOptionPutRequestBody != nil {
		return obj.DHCPv6ServiceOptionPutRequestBody
	}

	if obj.DNSOptionPutRequestBody != nil {
		return obj.DNSOptionPutRequestBody
	}

	if obj.DNSRawOptionPutRequestBody != nil {
		return obj.DNSRawOptionPutRequestBody
	}

	if obj.StartOfAuthorityPutRequestBody != nil {
		return obj.StartOfAuthorityPutRequestBody
	}

	// all schemas are nil
	return nil
}

type NullablePutDeploymentOptionRequest struct {
	value *PutDeploymentOptionRequest
	isSet bool
}

func (v NullablePutDeploymentOptionRequest) Get() *PutDeploymentOptionRequest {
	return v.value
}

func (v *NullablePutDeploymentOptionRequest) Set(val *PutDeploymentOptionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePutDeploymentOptionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePutDeploymentOptionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePutDeploymentOptionRequest(val *PutDeploymentOptionRequest) *NullablePutDeploymentOptionRequest {
	return &NullablePutDeploymentOptionRequest{value: val, isSet: true}
}

func (v NullablePutDeploymentOptionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePutDeploymentOptionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
BlueCat Address Manager 9.5 RESTful v2 API

The **BlueCat Address Manager 9.5 RESTful v2 API** is a new RESTful API for Address Manager that presents Address Manager objects as resources. Each resource has a unique endpoint, and related resources are grouped in collections. To fetch an individual resource, a `GET` request is sent to the resource's endpoint. To fetch all resources in a collection, a `GET` request is sent to the collection's endpoint.  The RESTful v2 API is [hypermedia driven](https://en.wikipedia.org/wiki/HATEOAS) and uses the [HAL](https://en.wikipedia.org/wiki/Hypertext_Application_Language) format for representing links. When navigating through the API, you can use those links to navigate to related resources or child resources of the requested endpoint. The API supports the following media types for most endpoints:  `application/hal+json`, `application/json`, and `text/csv`.  For authentication, the API supports both `Basic` and `Bearer` HTTP authentication schemes.  To get started, create a session and receive credentials for `Basic` authentication by sending a `POST` request to the [/sessions](#/Admin%20Resources/postSession) endpoint, with a message body containing the user's credentials:  ```{\"username\":\"apiuser\", \"password\":\"apipass\"}```  The response will contain an `apiToken` field that can be entered with the username in the Swagger UI **Authorize** dialog. The response will also contain a `basicAuthenticationCredentials` field containing a base64 encoding of the requester's username and API token delimited by a colon. This string can be injected directly into request `Authorization` headers in the following format:  ```Authorization: Basic YXBpOlQ0OExOT3VIRGhDcnVBNEo1bGFES3JuS3hTZC9QK3pjczZXTzBJMDY=```  For full details on API format and authentication methods, refer to the Address Manager RESTful v2 API Guide on the BlueCat Documentation Portal.

API version: 9.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gobam2

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// GetSettings200Response1DataInner - struct for GetSettings200Response1DataInner
type GetSettings200Response1DataInner struct {
	AuditDataSettings *AuditDataSettings
	GlobalSettings *GlobalSettings
	LogLevelSettings *LogLevelSettings
	LoginPolicySettings *LoginPolicySettings
	MonitoringSettings *MonitoringSettings
	PasswordPolicySettings *PasswordPolicySettings
	SAMLServiceProviderSettings *SAMLServiceProviderSettings
	SSOEnforcementSettings *SSOEnforcementSettings
	SystemSettings *SystemSettings
}

// AuditDataSettingsAsGetSettings200Response1DataInner is a convenience function that returns AuditDataSettings wrapped in GetSettings200Response1DataInner
func AuditDataSettingsAsGetSettings200Response1DataInner(v *AuditDataSettings) GetSettings200Response1DataInner {
	return GetSettings200Response1DataInner{
		AuditDataSettings: v,
	}
}

// GlobalSettingsAsGetSettings200Response1DataInner is a convenience function that returns GlobalSettings wrapped in GetSettings200Response1DataInner
func GlobalSettingsAsGetSettings200Response1DataInner(v *GlobalSettings) GetSettings200Response1DataInner {
	return GetSettings200Response1DataInner{
		GlobalSettings: v,
	}
}

// LogLevelSettingsAsGetSettings200Response1DataInner is a convenience function that returns LogLevelSettings wrapped in GetSettings200Response1DataInner
func LogLevelSettingsAsGetSettings200Response1DataInner(v *LogLevelSettings) GetSettings200Response1DataInner {
	return GetSettings200Response1DataInner{
		LogLevelSettings: v,
	}
}

// LoginPolicySettingsAsGetSettings200Response1DataInner is a convenience function that returns LoginPolicySettings wrapped in GetSettings200Response1DataInner
func LoginPolicySettingsAsGetSettings200Response1DataInner(v *LoginPolicySettings) GetSettings200Response1DataInner {
	return GetSettings200Response1DataInner{
		LoginPolicySettings: v,
	}
}

// MonitoringSettingsAsGetSettings200Response1DataInner is a convenience function that returns MonitoringSettings wrapped in GetSettings200Response1DataInner
func MonitoringSettingsAsGetSettings200Response1DataInner(v *MonitoringSettings) GetSettings200Response1DataInner {
	return GetSettings200Response1DataInner{
		MonitoringSettings: v,
	}
}

// PasswordPolicySettingsAsGetSettings200Response1DataInner is a convenience function that returns PasswordPolicySettings wrapped in GetSettings200Response1DataInner
func PasswordPolicySettingsAsGetSettings200Response1DataInner(v *PasswordPolicySettings) GetSettings200Response1DataInner {
	return GetSettings200Response1DataInner{
		PasswordPolicySettings: v,
	}
}

// SAMLServiceProviderSettingsAsGetSettings200Response1DataInner is a convenience function that returns SAMLServiceProviderSettings wrapped in GetSettings200Response1DataInner
func SAMLServiceProviderSettingsAsGetSettings200Response1DataInner(v *SAMLServiceProviderSettings) GetSettings200Response1DataInner {
	return GetSettings200Response1DataInner{
		SAMLServiceProviderSettings: v,
	}
}

// SSOEnforcementSettingsAsGetSettings200Response1DataInner is a convenience function that returns SSOEnforcementSettings wrapped in GetSettings200Response1DataInner
func SSOEnforcementSettingsAsGetSettings200Response1DataInner(v *SSOEnforcementSettings) GetSettings200Response1DataInner {
	return GetSettings200Response1DataInner{
		SSOEnforcementSettings: v,
	}
}

// SystemSettingsAsGetSettings200Response1DataInner is a convenience function that returns SystemSettings wrapped in GetSettings200Response1DataInner
func SystemSettingsAsGetSettings200Response1DataInner(v *SystemSettings) GetSettings200Response1DataInner {
	return GetSettings200Response1DataInner{
		SystemSettings: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetSettings200Response1DataInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AuditDataSettings
	err = newStrictDecoder(data).Decode(&dst.AuditDataSettings)
	if err == nil {
		jsonAuditDataSettings, _ := json.Marshal(dst.AuditDataSettings)
		if string(jsonAuditDataSettings) == "{}" { // empty struct
			dst.AuditDataSettings = nil
		} else {
			if err = validator.Validate(dst.AuditDataSettings); err != nil {
				dst.AuditDataSettings = nil
			} else {
				match++
			}
		}
	} else {
		dst.AuditDataSettings = nil
	}

	// try to unmarshal data into GlobalSettings
	err = newStrictDecoder(data).Decode(&dst.GlobalSettings)
	if err == nil {
		jsonGlobalSettings, _ := json.Marshal(dst.GlobalSettings)
		if string(jsonGlobalSettings) == "{}" { // empty struct
			dst.GlobalSettings = nil
		} else {
			if err = validator.Validate(dst.GlobalSettings); err != nil {
				dst.GlobalSettings = nil
			} else {
				match++
			}
		}
	} else {
		dst.GlobalSettings = nil
	}

	// try to unmarshal data into LogLevelSettings
	err = newStrictDecoder(data).Decode(&dst.LogLevelSettings)
	if err == nil {
		jsonLogLevelSettings, _ := json.Marshal(dst.LogLevelSettings)
		if string(jsonLogLevelSettings) == "{}" { // empty struct
			dst.LogLevelSettings = nil
		} else {
			if err = validator.Validate(dst.LogLevelSettings); err != nil {
				dst.LogLevelSettings = nil
			} else {
				match++
			}
		}
	} else {
		dst.LogLevelSettings = nil
	}

	// try to unmarshal data into LoginPolicySettings
	err = newStrictDecoder(data).Decode(&dst.LoginPolicySettings)
	if err == nil {
		jsonLoginPolicySettings, _ := json.Marshal(dst.LoginPolicySettings)
		if string(jsonLoginPolicySettings) == "{}" { // empty struct
			dst.LoginPolicySettings = nil
		} else {
			if err = validator.Validate(dst.LoginPolicySettings); err != nil {
				dst.LoginPolicySettings = nil
			} else {
				match++
			}
		}
	} else {
		dst.LoginPolicySettings = nil
	}

	// try to unmarshal data into MonitoringSettings
	err = newStrictDecoder(data).Decode(&dst.MonitoringSettings)
	if err == nil {
		jsonMonitoringSettings, _ := json.Marshal(dst.MonitoringSettings)
		if string(jsonMonitoringSettings) == "{}" { // empty struct
			dst.MonitoringSettings = nil
		} else {
			if err = validator.Validate(dst.MonitoringSettings); err != nil {
				dst.MonitoringSettings = nil
			} else {
				match++
			}
		}
	} else {
		dst.MonitoringSettings = nil
	}

	// try to unmarshal data into PasswordPolicySettings
	err = newStrictDecoder(data).Decode(&dst.PasswordPolicySettings)
	if err == nil {
		jsonPasswordPolicySettings, _ := json.Marshal(dst.PasswordPolicySettings)
		if string(jsonPasswordPolicySettings) == "{}" { // empty struct
			dst.PasswordPolicySettings = nil
		} else {
			if err = validator.Validate(dst.PasswordPolicySettings); err != nil {
				dst.PasswordPolicySettings = nil
			} else {
				match++
			}
		}
	} else {
		dst.PasswordPolicySettings = nil
	}

	// try to unmarshal data into SAMLServiceProviderSettings
	err = newStrictDecoder(data).Decode(&dst.SAMLServiceProviderSettings)
	if err == nil {
		jsonSAMLServiceProviderSettings, _ := json.Marshal(dst.SAMLServiceProviderSettings)
		if string(jsonSAMLServiceProviderSettings) == "{}" { // empty struct
			dst.SAMLServiceProviderSettings = nil
		} else {
			if err = validator.Validate(dst.SAMLServiceProviderSettings); err != nil {
				dst.SAMLServiceProviderSettings = nil
			} else {
				match++
			}
		}
	} else {
		dst.SAMLServiceProviderSettings = nil
	}

	// try to unmarshal data into SSOEnforcementSettings
	err = newStrictDecoder(data).Decode(&dst.SSOEnforcementSettings)
	if err == nil {
		jsonSSOEnforcementSettings, _ := json.Marshal(dst.SSOEnforcementSettings)
		if string(jsonSSOEnforcementSettings) == "{}" { // empty struct
			dst.SSOEnforcementSettings = nil
		} else {
			if err = validator.Validate(dst.SSOEnforcementSettings); err != nil {
				dst.SSOEnforcementSettings = nil
			} else {
				match++
			}
		}
	} else {
		dst.SSOEnforcementSettings = nil
	}

	// try to unmarshal data into SystemSettings
	err = newStrictDecoder(data).Decode(&dst.SystemSettings)
	if err == nil {
		jsonSystemSettings, _ := json.Marshal(dst.SystemSettings)
		if string(jsonSystemSettings) == "{}" { // empty struct
			dst.SystemSettings = nil
		} else {
			if err = validator.Validate(dst.SystemSettings); err != nil {
				dst.SystemSettings = nil
			} else {
				match++
			}
		}
	} else {
		dst.SystemSettings = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AuditDataSettings = nil
		dst.GlobalSettings = nil
		dst.LogLevelSettings = nil
		dst.LoginPolicySettings = nil
		dst.MonitoringSettings = nil
		dst.PasswordPolicySettings = nil
		dst.SAMLServiceProviderSettings = nil
		dst.SSOEnforcementSettings = nil
		dst.SystemSettings = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetSettings200Response1DataInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetSettings200Response1DataInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetSettings200Response1DataInner) MarshalJSON() ([]byte, error) {
	if src.AuditDataSettings != nil {
		return json.Marshal(&src.AuditDataSettings)
	}

	if src.GlobalSettings != nil {
		return json.Marshal(&src.GlobalSettings)
	}

	if src.LogLevelSettings != nil {
		return json.Marshal(&src.LogLevelSettings)
	}

	if src.LoginPolicySettings != nil {
		return json.Marshal(&src.LoginPolicySettings)
	}

	if src.MonitoringSettings != nil {
		return json.Marshal(&src.MonitoringSettings)
	}

	if src.PasswordPolicySettings != nil {
		return json.Marshal(&src.PasswordPolicySettings)
	}

	if src.SAMLServiceProviderSettings != nil {
		return json.Marshal(&src.SAMLServiceProviderSettings)
	}

	if src.SSOEnforcementSettings != nil {
		return json.Marshal(&src.SSOEnforcementSettings)
	}

	if src.SystemSettings != nil {
		return json.Marshal(&src.SystemSettings)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetSettings200Response1DataInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AuditDataSettings != nil {
		return obj.AuditDataSettings
	}

	if obj.GlobalSettings != nil {
		return obj.GlobalSettings
	}

	if obj.LogLevelSettings != nil {
		return obj.LogLevelSettings
	}

	if obj.LoginPolicySettings != nil {
		return obj.LoginPolicySettings
	}

	if obj.MonitoringSettings != nil {
		return obj.MonitoringSettings
	}

	if obj.PasswordPolicySettings != nil {
		return obj.PasswordPolicySettings
	}

	if obj.SAMLServiceProviderSettings != nil {
		return obj.SAMLServiceProviderSettings
	}

	if obj.SSOEnforcementSettings != nil {
		return obj.SSOEnforcementSettings
	}

	if obj.SystemSettings != nil {
		return obj.SystemSettings
	}

	// all schemas are nil
	return nil
}

type NullableGetSettings200Response1DataInner struct {
	value *GetSettings200Response1DataInner
	isSet bool
}

func (v NullableGetSettings200Response1DataInner) Get() *GetSettings200Response1DataInner {
	return v.value
}

func (v *NullableGetSettings200Response1DataInner) Set(val *GetSettings200Response1DataInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGetSettings200Response1DataInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGetSettings200Response1DataInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetSettings200Response1DataInner(val *GetSettings200Response1DataInner) *NullableGetSettings200Response1DataInner {
	return &NullableGetSettings200Response1DataInner{value: val, isSet: true}
}

func (v NullableGetSettings200Response1DataInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetSettings200Response1DataInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



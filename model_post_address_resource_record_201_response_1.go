/*
BlueCat Address Manager 9.5 RESTful v2 API

The **BlueCat Address Manager 9.5 RESTful v2 API** is a new RESTful API for Address Manager that presents Address Manager objects as resources. Each resource has a unique endpoint, and related resources are grouped in collections. To fetch an individual resource, a `GET` request is sent to the resource's endpoint. To fetch all resources in a collection, a `GET` request is sent to the collection's endpoint.  The RESTful v2 API is [hypermedia driven](https://en.wikipedia.org/wiki/HATEOAS) and uses the [HAL](https://en.wikipedia.org/wiki/Hypertext_Application_Language) format for representing links. When navigating through the API, you can use those links to navigate to related resources or child resources of the requested endpoint. The API supports the following media types for most endpoints:  `application/hal+json`, `application/json`, and `text/csv`.  For authentication, the API supports both `Basic` and `Bearer` HTTP authentication schemes.  To get started, create a session and receive credentials for `Basic` authentication by sending a `POST` request to the [/sessions](#/Admin%20Resources/postSession) endpoint, with a message body containing the user's credentials:  ```{\"username\":\"apiuser\", \"password\":\"apipass\"}```  The response will contain an `apiToken` field that can be entered with the username in the Swagger UI **Authorize** dialog. The response will also contain a `basicAuthenticationCredentials` field containing a base64 encoding of the requester's username and API token delimited by a colon. This string can be injected directly into request `Authorization` headers in the following format:  ```Authorization: Basic YXBpOlQ0OExOT3VIRGhDcnVBNEo1bGFES3JuS3hTZC9QK3pjczZXTzBJMDY=```  For full details on API format and authentication methods, refer to the Address Manager RESTful v2 API Guide on the BlueCat Documentation Portal.

API version: 9.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gobam2

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// PostAddressResourceRecord201Response1 - struct for PostAddressResourceRecord201Response1
type PostAddressResourceRecord201Response1 struct {
	ExternalHostRecord *ExternalHostRecord
	HostRecord *HostRecord
}

// ExternalHostRecordAsPostAddressResourceRecord201Response1 is a convenience function that returns ExternalHostRecord wrapped in PostAddressResourceRecord201Response1
func ExternalHostRecordAsPostAddressResourceRecord201Response1(v *ExternalHostRecord) PostAddressResourceRecord201Response1 {
	return PostAddressResourceRecord201Response1{
		ExternalHostRecord: v,
	}
}

// HostRecordAsPostAddressResourceRecord201Response1 is a convenience function that returns HostRecord wrapped in PostAddressResourceRecord201Response1
func HostRecordAsPostAddressResourceRecord201Response1(v *HostRecord) PostAddressResourceRecord201Response1 {
	return PostAddressResourceRecord201Response1{
		HostRecord: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PostAddressResourceRecord201Response1) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ExternalHostRecord
	err = newStrictDecoder(data).Decode(&dst.ExternalHostRecord)
	if err == nil {
		jsonExternalHostRecord, _ := json.Marshal(dst.ExternalHostRecord)
		if string(jsonExternalHostRecord) == "{}" { // empty struct
			dst.ExternalHostRecord = nil
		} else {
			if err = validator.Validate(dst.ExternalHostRecord); err != nil {
				dst.ExternalHostRecord = nil
			} else {
				match++
			}
		}
	} else {
		dst.ExternalHostRecord = nil
	}

	// try to unmarshal data into HostRecord
	err = newStrictDecoder(data).Decode(&dst.HostRecord)
	if err == nil {
		jsonHostRecord, _ := json.Marshal(dst.HostRecord)
		if string(jsonHostRecord) == "{}" { // empty struct
			dst.HostRecord = nil
		} else {
			if err = validator.Validate(dst.HostRecord); err != nil {
				dst.HostRecord = nil
			} else {
				match++
			}
		}
	} else {
		dst.HostRecord = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ExternalHostRecord = nil
		dst.HostRecord = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PostAddressResourceRecord201Response1)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PostAddressResourceRecord201Response1)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PostAddressResourceRecord201Response1) MarshalJSON() ([]byte, error) {
	if src.ExternalHostRecord != nil {
		return json.Marshal(&src.ExternalHostRecord)
	}

	if src.HostRecord != nil {
		return json.Marshal(&src.HostRecord)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PostAddressResourceRecord201Response1) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ExternalHostRecord != nil {
		return obj.ExternalHostRecord
	}

	if obj.HostRecord != nil {
		return obj.HostRecord
	}

	// all schemas are nil
	return nil
}

type NullablePostAddressResourceRecord201Response1 struct {
	value *PostAddressResourceRecord201Response1
	isSet bool
}

func (v NullablePostAddressResourceRecord201Response1) Get() *PostAddressResourceRecord201Response1 {
	return v.value
}

func (v *NullablePostAddressResourceRecord201Response1) Set(val *PostAddressResourceRecord201Response1) {
	v.value = val
	v.isSet = true
}

func (v NullablePostAddressResourceRecord201Response1) IsSet() bool {
	return v.isSet
}

func (v *NullablePostAddressResourceRecord201Response1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostAddressResourceRecord201Response1(val *PostAddressResourceRecord201Response1) *NullablePostAddressResourceRecord201Response1 {
	return &NullablePostAddressResourceRecord201Response1{value: val, isSet: true}
}

func (v NullablePostAddressResourceRecord201Response1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostAddressResourceRecord201Response1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
BlueCat Address Manager 9.5 RESTful v2 API

The **BlueCat Address Manager 9.5 RESTful v2 API** is a new RESTful API for Address Manager that presents Address Manager objects as resources. Each resource has a unique endpoint, and related resources are grouped in collections. To fetch an individual resource, a `GET` request is sent to the resource's endpoint. To fetch all resources in a collection, a `GET` request is sent to the collection's endpoint.  The RESTful v2 API is [hypermedia driven](https://en.wikipedia.org/wiki/HATEOAS) and uses the [HAL](https://en.wikipedia.org/wiki/Hypertext_Application_Language) format for representing links. When navigating through the API, you can use those links to navigate to related resources or child resources of the requested endpoint. The API supports the following media types for most endpoints:  `application/hal+json`, `application/json`, and `text/csv`.  For authentication, the API supports both `Basic` and `Bearer` HTTP authentication schemes.  To get started, create a session and receive credentials for `Basic` authentication by sending a `POST` request to the [/sessions](#/Admin%20Resources/postSession) endpoint, with a message body containing the user's credentials:  ```{\"username\":\"apiuser\", \"password\":\"apipass\"}```  The response will contain an `apiToken` field that can be entered with the username in the Swagger UI **Authorize** dialog. The response will also contain a `basicAuthenticationCredentials` field containing a base64 encoding of the requester's username and API token delimited by a colon. This string can be injected directly into request `Authorization` headers in the following format:  ```Authorization: Basic YXBpOlQ0OExOT3VIRGhDcnVBNEo1bGFES3JuS3hTZC9QK3pjczZXTzBJMDY=```  For full details on API format and authentication methods, refer to the Address Manager RESTful v2 API Guide on the BlueCat Documentation Portal.

API version: 9.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gobam2

import (
	"encoding/json"
)

// checks if the PutDeploymentOptionDefinition200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PutDeploymentOptionDefinition200Response{}

// PutDeploymentOptionDefinition200Response struct for PutDeploymentOptionDefinition200Response
type PutDeploymentOptionDefinition200Response struct {
	// The resource identifier.
	Id *int64 `json:"id,omitempty"`
	// The type of deployment option definition.
	Type *string `json:"type,omitempty"`
	// The name of the deployment option definition.
	Name *string `json:"name,omitempty" validate:"regexp=^.*\\\\S+.*$"`
	// User-defined fields set for the resource.
	UserDefinedFields *map[string]string `json:"userDefinedFields,omitempty"`
	AssignableTypes []string `json:"assignableTypes,omitempty"`
	// The ID of the vendor profile option definition.
	Code *int32 `json:"code,omitempty"`
	// The display name for the vendor profile option definition.
	DisplayName *string `json:"displayName,omitempty" validate:"regexp=^.*\\\\S+.*$"`
	// The description of the information passed by the option definition.
	Description *string `json:"description,omitempty" validate:"regexp=^.*\\\\S+.*$"`
	ValueFormat map[string]interface{} `json:"valueFormat,omitempty"`
	Links *ResourceLinks `json:"_links,omitempty"`
}

// NewPutDeploymentOptionDefinition200Response instantiates a new PutDeploymentOptionDefinition200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPutDeploymentOptionDefinition200Response() *PutDeploymentOptionDefinition200Response {
	this := PutDeploymentOptionDefinition200Response{}
	return &this
}

// NewPutDeploymentOptionDefinition200ResponseWithDefaults instantiates a new PutDeploymentOptionDefinition200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPutDeploymentOptionDefinition200ResponseWithDefaults() *PutDeploymentOptionDefinition200Response {
	this := PutDeploymentOptionDefinition200Response{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PutDeploymentOptionDefinition200Response) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutDeploymentOptionDefinition200Response) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PutDeploymentOptionDefinition200Response) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *PutDeploymentOptionDefinition200Response) SetId(v int64) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PutDeploymentOptionDefinition200Response) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutDeploymentOptionDefinition200Response) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PutDeploymentOptionDefinition200Response) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PutDeploymentOptionDefinition200Response) SetType(v string) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PutDeploymentOptionDefinition200Response) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutDeploymentOptionDefinition200Response) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PutDeploymentOptionDefinition200Response) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PutDeploymentOptionDefinition200Response) SetName(v string) {
	o.Name = &v
}

// GetUserDefinedFields returns the UserDefinedFields field value if set, zero value otherwise.
func (o *PutDeploymentOptionDefinition200Response) GetUserDefinedFields() map[string]string {
	if o == nil || IsNil(o.UserDefinedFields) {
		var ret map[string]string
		return ret
	}
	return *o.UserDefinedFields
}

// GetUserDefinedFieldsOk returns a tuple with the UserDefinedFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutDeploymentOptionDefinition200Response) GetUserDefinedFieldsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.UserDefinedFields) {
		return nil, false
	}
	return o.UserDefinedFields, true
}

// HasUserDefinedFields returns a boolean if a field has been set.
func (o *PutDeploymentOptionDefinition200Response) HasUserDefinedFields() bool {
	if o != nil && !IsNil(o.UserDefinedFields) {
		return true
	}

	return false
}

// SetUserDefinedFields gets a reference to the given map[string]string and assigns it to the UserDefinedFields field.
func (o *PutDeploymentOptionDefinition200Response) SetUserDefinedFields(v map[string]string) {
	o.UserDefinedFields = &v
}

// GetAssignableTypes returns the AssignableTypes field value if set, zero value otherwise.
func (o *PutDeploymentOptionDefinition200Response) GetAssignableTypes() []string {
	if o == nil || IsNil(o.AssignableTypes) {
		var ret []string
		return ret
	}
	return o.AssignableTypes
}

// GetAssignableTypesOk returns a tuple with the AssignableTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutDeploymentOptionDefinition200Response) GetAssignableTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.AssignableTypes) {
		return nil, false
	}
	return o.AssignableTypes, true
}

// HasAssignableTypes returns a boolean if a field has been set.
func (o *PutDeploymentOptionDefinition200Response) HasAssignableTypes() bool {
	if o != nil && !IsNil(o.AssignableTypes) {
		return true
	}

	return false
}

// SetAssignableTypes gets a reference to the given []string and assigns it to the AssignableTypes field.
func (o *PutDeploymentOptionDefinition200Response) SetAssignableTypes(v []string) {
	o.AssignableTypes = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *PutDeploymentOptionDefinition200Response) GetCode() int32 {
	if o == nil || IsNil(o.Code) {
		var ret int32
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutDeploymentOptionDefinition200Response) GetCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *PutDeploymentOptionDefinition200Response) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given int32 and assigns it to the Code field.
func (o *PutDeploymentOptionDefinition200Response) SetCode(v int32) {
	o.Code = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *PutDeploymentOptionDefinition200Response) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutDeploymentOptionDefinition200Response) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *PutDeploymentOptionDefinition200Response) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *PutDeploymentOptionDefinition200Response) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PutDeploymentOptionDefinition200Response) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutDeploymentOptionDefinition200Response) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PutDeploymentOptionDefinition200Response) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PutDeploymentOptionDefinition200Response) SetDescription(v string) {
	o.Description = &v
}

// GetValueFormat returns the ValueFormat field value if set, zero value otherwise.
func (o *PutDeploymentOptionDefinition200Response) GetValueFormat() map[string]interface{} {
	if o == nil || IsNil(o.ValueFormat) {
		var ret map[string]interface{}
		return ret
	}
	return o.ValueFormat
}

// GetValueFormatOk returns a tuple with the ValueFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutDeploymentOptionDefinition200Response) GetValueFormatOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ValueFormat) {
		return map[string]interface{}{}, false
	}
	return o.ValueFormat, true
}

// HasValueFormat returns a boolean if a field has been set.
func (o *PutDeploymentOptionDefinition200Response) HasValueFormat() bool {
	if o != nil && !IsNil(o.ValueFormat) {
		return true
	}

	return false
}

// SetValueFormat gets a reference to the given map[string]interface{} and assigns it to the ValueFormat field.
func (o *PutDeploymentOptionDefinition200Response) SetValueFormat(v map[string]interface{}) {
	o.ValueFormat = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *PutDeploymentOptionDefinition200Response) GetLinks() ResourceLinks {
	if o == nil || IsNil(o.Links) {
		var ret ResourceLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutDeploymentOptionDefinition200Response) GetLinksOk() (*ResourceLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *PutDeploymentOptionDefinition200Response) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given ResourceLinks and assigns it to the Links field.
func (o *PutDeploymentOptionDefinition200Response) SetLinks(v ResourceLinks) {
	o.Links = &v
}

func (o PutDeploymentOptionDefinition200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PutDeploymentOptionDefinition200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.UserDefinedFields) {
		toSerialize["userDefinedFields"] = o.UserDefinedFields
	}
	if !IsNil(o.AssignableTypes) {
		toSerialize["assignableTypes"] = o.AssignableTypes
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ValueFormat) {
		toSerialize["valueFormat"] = o.ValueFormat
	}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	return toSerialize, nil
}

type NullablePutDeploymentOptionDefinition200Response struct {
	value *PutDeploymentOptionDefinition200Response
	isSet bool
}

func (v NullablePutDeploymentOptionDefinition200Response) Get() *PutDeploymentOptionDefinition200Response {
	return v.value
}

func (v *NullablePutDeploymentOptionDefinition200Response) Set(val *PutDeploymentOptionDefinition200Response) {
	v.value = val
	v.isSet = true
}

func (v NullablePutDeploymentOptionDefinition200Response) IsSet() bool {
	return v.isSet
}

func (v *NullablePutDeploymentOptionDefinition200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePutDeploymentOptionDefinition200Response(val *PutDeploymentOptionDefinition200Response) *NullablePutDeploymentOptionDefinition200Response {
	return &NullablePutDeploymentOptionDefinition200Response{value: val, isSet: true}
}

func (v NullablePutDeploymentOptionDefinition200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePutDeploymentOptionDefinition200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



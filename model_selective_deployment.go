/*
BlueCat Address Manager 9.5 RESTful v2 API

The **BlueCat Address Manager 9.5 RESTful v2 API** is a new RESTful API for Address Manager that presents Address Manager objects as resources. Each resource has a unique endpoint, and related resources are grouped in collections. To fetch an individual resource, a `GET` request is sent to the resource's endpoint. To fetch all resources in a collection, a `GET` request is sent to the collection's endpoint.  The RESTful v2 API is [hypermedia driven](https://en.wikipedia.org/wiki/HATEOAS) and uses the [HAL](https://en.wikipedia.org/wiki/Hypertext_Application_Language) format for representing links. When navigating through the API, you can use those links to navigate to related resources or child resources of the requested endpoint. The API supports the following media types for most endpoints:  `application/hal+json`, `application/json`, and `text/csv`.  For authentication, the API supports both `Basic` and `Bearer` HTTP authentication schemes.  To get started, create a session and receive credentials for `Basic` authentication by sending a `POST` request to the [/sessions](#/Admin%20Resources/postSession) endpoint, with a message body containing the user's credentials:  ```{\"username\":\"apiuser\", \"password\":\"apipass\"}```  The response will contain an `apiToken` field that can be entered with the username in the Swagger UI **Authorize** dialog. The response will also contain a `basicAuthenticationCredentials` field containing a base64 encoding of the requester's username and API token delimited by a colon. This string can be injected directly into request `Authorization` headers in the following format:  ```Authorization: Basic YXBpOlQ0OExOT3VIRGhDcnVBNEo1bGFES3JuS3hTZC9QK3pjczZXTzBJMDY=```  For full details on API format and authentication methods, refer to the Address Manager RESTful v2 API Guide on the BlueCat Documentation Portal.

API version: 9.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gobam2

import (
	"encoding/json"
)

// checks if the SelectiveDeployment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SelectiveDeployment{}

// SelectiveDeployment struct for SelectiveDeployment
type SelectiveDeployment struct {
	Deployment
	// The resource type.
	Type *string `json:"type,omitempty"`
	// A list of resource record and IP address resources to deploy.
	Resources []InlinedDeployableResource `json:"resources,omitempty"`
	// The method used for batching selective deployment tasks.
	BatchMode *string `json:"batchMode,omitempty"`
	// Defines whether selective deployment tasks include resources that are related to the defined DNS records.
	RecordScope *string `json:"recordScope,omitempty"`
	// Indicates the mode of operation on a failed resource record. If false, the deployment stops when a record fails. If true, the deployment continues when a record fails and the deployment moves to the next record.
	ContinueOnFailureEnabled *bool `json:"continueOnFailureEnabled,omitempty"`
	// Defines how dynamic records are handled with selective deployment tasks.
	DynamicRecordDeploymentStrategy *string `json:"dynamicRecordDeploymentStrategy,omitempty"`
}

// NewSelectiveDeployment instantiates a new SelectiveDeployment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSelectiveDeployment() *SelectiveDeployment {
	this := SelectiveDeployment{}
	return &this
}

// NewSelectiveDeploymentWithDefaults instantiates a new SelectiveDeployment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSelectiveDeploymentWithDefaults() *SelectiveDeployment {
	this := SelectiveDeployment{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SelectiveDeployment) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectiveDeployment) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SelectiveDeployment) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SelectiveDeployment) SetType(v string) {
	o.Type = &v
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *SelectiveDeployment) GetResources() []InlinedDeployableResource {
	if o == nil || IsNil(o.Resources) {
		var ret []InlinedDeployableResource
		return ret
	}
	return o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectiveDeployment) GetResourcesOk() ([]InlinedDeployableResource, bool) {
	if o == nil || IsNil(o.Resources) {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *SelectiveDeployment) HasResources() bool {
	if o != nil && !IsNil(o.Resources) {
		return true
	}

	return false
}

// SetResources gets a reference to the given []InlinedDeployableResource and assigns it to the Resources field.
func (o *SelectiveDeployment) SetResources(v []InlinedDeployableResource) {
	o.Resources = v
}

// GetBatchMode returns the BatchMode field value if set, zero value otherwise.
func (o *SelectiveDeployment) GetBatchMode() string {
	if o == nil || IsNil(o.BatchMode) {
		var ret string
		return ret
	}
	return *o.BatchMode
}

// GetBatchModeOk returns a tuple with the BatchMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectiveDeployment) GetBatchModeOk() (*string, bool) {
	if o == nil || IsNil(o.BatchMode) {
		return nil, false
	}
	return o.BatchMode, true
}

// HasBatchMode returns a boolean if a field has been set.
func (o *SelectiveDeployment) HasBatchMode() bool {
	if o != nil && !IsNil(o.BatchMode) {
		return true
	}

	return false
}

// SetBatchMode gets a reference to the given string and assigns it to the BatchMode field.
func (o *SelectiveDeployment) SetBatchMode(v string) {
	o.BatchMode = &v
}

// GetRecordScope returns the RecordScope field value if set, zero value otherwise.
func (o *SelectiveDeployment) GetRecordScope() string {
	if o == nil || IsNil(o.RecordScope) {
		var ret string
		return ret
	}
	return *o.RecordScope
}

// GetRecordScopeOk returns a tuple with the RecordScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectiveDeployment) GetRecordScopeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordScope) {
		return nil, false
	}
	return o.RecordScope, true
}

// HasRecordScope returns a boolean if a field has been set.
func (o *SelectiveDeployment) HasRecordScope() bool {
	if o != nil && !IsNil(o.RecordScope) {
		return true
	}

	return false
}

// SetRecordScope gets a reference to the given string and assigns it to the RecordScope field.
func (o *SelectiveDeployment) SetRecordScope(v string) {
	o.RecordScope = &v
}

// GetContinueOnFailureEnabled returns the ContinueOnFailureEnabled field value if set, zero value otherwise.
func (o *SelectiveDeployment) GetContinueOnFailureEnabled() bool {
	if o == nil || IsNil(o.ContinueOnFailureEnabled) {
		var ret bool
		return ret
	}
	return *o.ContinueOnFailureEnabled
}

// GetContinueOnFailureEnabledOk returns a tuple with the ContinueOnFailureEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectiveDeployment) GetContinueOnFailureEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ContinueOnFailureEnabled) {
		return nil, false
	}
	return o.ContinueOnFailureEnabled, true
}

// HasContinueOnFailureEnabled returns a boolean if a field has been set.
func (o *SelectiveDeployment) HasContinueOnFailureEnabled() bool {
	if o != nil && !IsNil(o.ContinueOnFailureEnabled) {
		return true
	}

	return false
}

// SetContinueOnFailureEnabled gets a reference to the given bool and assigns it to the ContinueOnFailureEnabled field.
func (o *SelectiveDeployment) SetContinueOnFailureEnabled(v bool) {
	o.ContinueOnFailureEnabled = &v
}

// GetDynamicRecordDeploymentStrategy returns the DynamicRecordDeploymentStrategy field value if set, zero value otherwise.
func (o *SelectiveDeployment) GetDynamicRecordDeploymentStrategy() string {
	if o == nil || IsNil(o.DynamicRecordDeploymentStrategy) {
		var ret string
		return ret
	}
	return *o.DynamicRecordDeploymentStrategy
}

// GetDynamicRecordDeploymentStrategyOk returns a tuple with the DynamicRecordDeploymentStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectiveDeployment) GetDynamicRecordDeploymentStrategyOk() (*string, bool) {
	if o == nil || IsNil(o.DynamicRecordDeploymentStrategy) {
		return nil, false
	}
	return o.DynamicRecordDeploymentStrategy, true
}

// HasDynamicRecordDeploymentStrategy returns a boolean if a field has been set.
func (o *SelectiveDeployment) HasDynamicRecordDeploymentStrategy() bool {
	if o != nil && !IsNil(o.DynamicRecordDeploymentStrategy) {
		return true
	}

	return false
}

// SetDynamicRecordDeploymentStrategy gets a reference to the given string and assigns it to the DynamicRecordDeploymentStrategy field.
func (o *SelectiveDeployment) SetDynamicRecordDeploymentStrategy(v string) {
	o.DynamicRecordDeploymentStrategy = &v
}

func (o SelectiveDeployment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SelectiveDeployment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Resources) {
		toSerialize["resources"] = o.Resources
	}
	if !IsNil(o.BatchMode) {
		toSerialize["batchMode"] = o.BatchMode
	}
	if !IsNil(o.RecordScope) {
		toSerialize["recordScope"] = o.RecordScope
	}
	if !IsNil(o.ContinueOnFailureEnabled) {
		toSerialize["continueOnFailureEnabled"] = o.ContinueOnFailureEnabled
	}
	if !IsNil(o.DynamicRecordDeploymentStrategy) {
		toSerialize["dynamicRecordDeploymentStrategy"] = o.DynamicRecordDeploymentStrategy
	}
	return toSerialize, nil
}

type NullableSelectiveDeployment struct {
	value *SelectiveDeployment
	isSet bool
}

func (v NullableSelectiveDeployment) Get() *SelectiveDeployment {
	return v.value
}

func (v *NullableSelectiveDeployment) Set(val *SelectiveDeployment) {
	v.value = val
	v.isSet = true
}

func (v NullableSelectiveDeployment) IsSet() bool {
	return v.isSet
}

func (v *NullableSelectiveDeployment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSelectiveDeployment(val *SelectiveDeployment) *NullableSelectiveDeployment {
	return &NullableSelectiveDeployment{value: val, isSet: true}
}

func (v NullableSelectiveDeployment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSelectiveDeployment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



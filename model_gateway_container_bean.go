/*
BlueCat Address Manager 9.5 RESTful v2 API

The **BlueCat Address Manager 9.5 RESTful v2 API** is a new RESTful API for Address Manager that presents Address Manager objects as resources. Each resource has a unique endpoint, and related resources are grouped in collections. To fetch an individual resource, a `GET` request is sent to the resource's endpoint. To fetch all resources in a collection, a `GET` request is sent to the collection's endpoint.  The RESTful v2 API is [hypermedia driven](https://en.wikipedia.org/wiki/HATEOAS) and uses the [HAL](https://en.wikipedia.org/wiki/Hypertext_Application_Language) format for representing links. When navigating through the API, you can use those links to navigate to related resources or child resources of the requested endpoint. The API supports the following media types for most endpoints:  `application/hal+json`, `application/json`, and `text/csv`.  For authentication, the API supports both `Basic` and `Bearer` HTTP authentication schemes.  To get started, create a session and receive credentials for `Basic` authentication by sending a `POST` request to the [/sessions](#/Admin%20Resources/postSession) endpoint, with a message body containing the user's credentials:  ```{\"username\":\"apiuser\", \"password\":\"apipass\"}```  The response will contain an `apiToken` field that can be entered with the username in the Swagger UI **Authorize** dialog. The response will also contain a `basicAuthenticationCredentials` field containing a base64 encoding of the requester's username and API token delimited by a colon. This string can be injected directly into request `Authorization` headers in the following format:  ```Authorization: Basic YXBpOlQ0OExOT3VIRGhDcnVBNEo1bGFES3JuS3hTZC9QK3pjczZXTzBJMDY=```  For full details on API format and authentication methods, refer to the Address Manager RESTful v2 API Guide on the BlueCat Documentation Portal.

API version: 9.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gobam2

import (
	"encoding/json"
)

// checks if the GatewayContainerBean type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GatewayContainerBean{}

// GatewayContainerBean The Gateway container deployed to the DNS/DHCP Server.
type GatewayContainerBean struct {
	// The name of the Gateway instance deployed to the DNS/DHCP Server.
	Name *string `json:"name,omitempty"`
	// The Gateway image deployed on the DNS/DHCP Server.
	Image *string `json:"image,omitempty" validate:"regexp=^.*\\\\S+.*$"`
	// The environment variables to set for the container during startup.
	EnvironmentVariables []NameValuePairBean `json:"environmentVariables,omitempty"`
	// The list of ports to map between the DNS/DHCP Server service host and the Gateway container.
	PortMappings []ContainerPortMappingBean `json:"portMappings,omitempty"`
	// The directories to bind mount to the Gateway container.
	MountPoints []ContainerMountPointBean `json:"mountPoints,omitempty"`
}

// NewGatewayContainerBean instantiates a new GatewayContainerBean object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGatewayContainerBean() *GatewayContainerBean {
	this := GatewayContainerBean{}
	return &this
}

// NewGatewayContainerBeanWithDefaults instantiates a new GatewayContainerBean object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGatewayContainerBeanWithDefaults() *GatewayContainerBean {
	this := GatewayContainerBean{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GatewayContainerBean) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatewayContainerBean) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GatewayContainerBean) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GatewayContainerBean) SetName(v string) {
	o.Name = &v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *GatewayContainerBean) GetImage() string {
	if o == nil || IsNil(o.Image) {
		var ret string
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatewayContainerBean) GetImageOk() (*string, bool) {
	if o == nil || IsNil(o.Image) {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *GatewayContainerBean) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given string and assigns it to the Image field.
func (o *GatewayContainerBean) SetImage(v string) {
	o.Image = &v
}

// GetEnvironmentVariables returns the EnvironmentVariables field value if set, zero value otherwise.
func (o *GatewayContainerBean) GetEnvironmentVariables() []NameValuePairBean {
	if o == nil || IsNil(o.EnvironmentVariables) {
		var ret []NameValuePairBean
		return ret
	}
	return o.EnvironmentVariables
}

// GetEnvironmentVariablesOk returns a tuple with the EnvironmentVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatewayContainerBean) GetEnvironmentVariablesOk() ([]NameValuePairBean, bool) {
	if o == nil || IsNil(o.EnvironmentVariables) {
		return nil, false
	}
	return o.EnvironmentVariables, true
}

// HasEnvironmentVariables returns a boolean if a field has been set.
func (o *GatewayContainerBean) HasEnvironmentVariables() bool {
	if o != nil && !IsNil(o.EnvironmentVariables) {
		return true
	}

	return false
}

// SetEnvironmentVariables gets a reference to the given []NameValuePairBean and assigns it to the EnvironmentVariables field.
func (o *GatewayContainerBean) SetEnvironmentVariables(v []NameValuePairBean) {
	o.EnvironmentVariables = v
}

// GetPortMappings returns the PortMappings field value if set, zero value otherwise.
func (o *GatewayContainerBean) GetPortMappings() []ContainerPortMappingBean {
	if o == nil || IsNil(o.PortMappings) {
		var ret []ContainerPortMappingBean
		return ret
	}
	return o.PortMappings
}

// GetPortMappingsOk returns a tuple with the PortMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatewayContainerBean) GetPortMappingsOk() ([]ContainerPortMappingBean, bool) {
	if o == nil || IsNil(o.PortMappings) {
		return nil, false
	}
	return o.PortMappings, true
}

// HasPortMappings returns a boolean if a field has been set.
func (o *GatewayContainerBean) HasPortMappings() bool {
	if o != nil && !IsNil(o.PortMappings) {
		return true
	}

	return false
}

// SetPortMappings gets a reference to the given []ContainerPortMappingBean and assigns it to the PortMappings field.
func (o *GatewayContainerBean) SetPortMappings(v []ContainerPortMappingBean) {
	o.PortMappings = v
}

// GetMountPoints returns the MountPoints field value if set, zero value otherwise.
func (o *GatewayContainerBean) GetMountPoints() []ContainerMountPointBean {
	if o == nil || IsNil(o.MountPoints) {
		var ret []ContainerMountPointBean
		return ret
	}
	return o.MountPoints
}

// GetMountPointsOk returns a tuple with the MountPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatewayContainerBean) GetMountPointsOk() ([]ContainerMountPointBean, bool) {
	if o == nil || IsNil(o.MountPoints) {
		return nil, false
	}
	return o.MountPoints, true
}

// HasMountPoints returns a boolean if a field has been set.
func (o *GatewayContainerBean) HasMountPoints() bool {
	if o != nil && !IsNil(o.MountPoints) {
		return true
	}

	return false
}

// SetMountPoints gets a reference to the given []ContainerMountPointBean and assigns it to the MountPoints field.
func (o *GatewayContainerBean) SetMountPoints(v []ContainerMountPointBean) {
	o.MountPoints = v
}

func (o GatewayContainerBean) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GatewayContainerBean) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Image) {
		toSerialize["image"] = o.Image
	}
	if !IsNil(o.EnvironmentVariables) {
		toSerialize["environmentVariables"] = o.EnvironmentVariables
	}
	if !IsNil(o.PortMappings) {
		toSerialize["portMappings"] = o.PortMappings
	}
	if !IsNil(o.MountPoints) {
		toSerialize["mountPoints"] = o.MountPoints
	}
	return toSerialize, nil
}

type NullableGatewayContainerBean struct {
	value *GatewayContainerBean
	isSet bool
}

func (v NullableGatewayContainerBean) Get() *GatewayContainerBean {
	return v.value
}

func (v *NullableGatewayContainerBean) Set(val *GatewayContainerBean) {
	v.value = val
	v.isSet = true
}

func (v NullableGatewayContainerBean) IsSet() bool {
	return v.isSet
}

func (v *NullableGatewayContainerBean) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGatewayContainerBean(val *GatewayContainerBean) *NullableGatewayContainerBean {
	return &NullableGatewayContainerBean{value: val, isSet: true}
}

func (v NullableGatewayContainerBean) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGatewayContainerBean) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



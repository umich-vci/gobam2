/*
BlueCat Address Manager 9.5 RESTful v2 API

The **BlueCat Address Manager 9.5 RESTful v2 API** is a new RESTful API for Address Manager that presents Address Manager objects as resources. Each resource has a unique endpoint, and related resources are grouped in collections. To fetch an individual resource, a `GET` request is sent to the resource's endpoint. To fetch all resources in a collection, a `GET` request is sent to the collection's endpoint.  The RESTful v2 API is [hypermedia driven](https://en.wikipedia.org/wiki/HATEOAS) and uses the [HAL](https://en.wikipedia.org/wiki/Hypertext_Application_Language) format for representing links. When navigating through the API, you can use those links to navigate to related resources or child resources of the requested endpoint. The API supports the following media types for most endpoints:  `application/hal+json`, `application/json`, and `text/csv`.  For authentication, the API supports both `Basic` and `Bearer` HTTP authentication schemes.  To get started, create a session and receive credentials for `Basic` authentication by sending a `POST` request to the [/sessions](#/Admin%20Resources/postSession) endpoint, with a message body containing the user's credentials:  ```{\"username\":\"apiuser\", \"password\":\"apipass\"}```  The response will contain an `apiToken` field that can be entered with the username in the Swagger UI **Authorize** dialog. The response will also contain a `basicAuthenticationCredentials` field containing a base64 encoding of the requester's username and API token delimited by a colon. This string can be injected directly into request `Authorization` headers in the following format:  ```Authorization: Basic YXBpOlQ0OExOT3VIRGhDcnVBNEo1bGFES3JuS3hTZC9QK3pjczZXTzBJMDY=```  For full details on API format and authentication methods, refer to the Address Manager RESTful v2 API Guide on the BlueCat Documentation Portal.

API version: 9.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gobam2

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// GetServerServices200Response1DataInner - struct for GetServerServices200Response1DataInner
type GetServerServices200Response1DataInner struct {
	AnycastService *AnycastService
	DHCPActivityService *DHCPActivityService
	DHCPStatisticsService *DHCPStatisticsService
	DNSActivityService *DNSActivityService
	DNSResolverService *DNSResolverService
	DNSStatisticsService *DNSStatisticsService
	FirewallService *FirewallService
	GatewayService *GatewayService
	InterfacesService *InterfacesService
	LicenseService *LicenseService
	NTPService *NTPService
	SNMPService *SNMPService
	SSHService *SSHService
	SyslogService *SyslogService
}

// AnycastServiceAsGetServerServices200Response1DataInner is a convenience function that returns AnycastService wrapped in GetServerServices200Response1DataInner
func AnycastServiceAsGetServerServices200Response1DataInner(v *AnycastService) GetServerServices200Response1DataInner {
	return GetServerServices200Response1DataInner{
		AnycastService: v,
	}
}

// DHCPActivityServiceAsGetServerServices200Response1DataInner is a convenience function that returns DHCPActivityService wrapped in GetServerServices200Response1DataInner
func DHCPActivityServiceAsGetServerServices200Response1DataInner(v *DHCPActivityService) GetServerServices200Response1DataInner {
	return GetServerServices200Response1DataInner{
		DHCPActivityService: v,
	}
}

// DHCPStatisticsServiceAsGetServerServices200Response1DataInner is a convenience function that returns DHCPStatisticsService wrapped in GetServerServices200Response1DataInner
func DHCPStatisticsServiceAsGetServerServices200Response1DataInner(v *DHCPStatisticsService) GetServerServices200Response1DataInner {
	return GetServerServices200Response1DataInner{
		DHCPStatisticsService: v,
	}
}

// DNSActivityServiceAsGetServerServices200Response1DataInner is a convenience function that returns DNSActivityService wrapped in GetServerServices200Response1DataInner
func DNSActivityServiceAsGetServerServices200Response1DataInner(v *DNSActivityService) GetServerServices200Response1DataInner {
	return GetServerServices200Response1DataInner{
		DNSActivityService: v,
	}
}

// DNSResolverServiceAsGetServerServices200Response1DataInner is a convenience function that returns DNSResolverService wrapped in GetServerServices200Response1DataInner
func DNSResolverServiceAsGetServerServices200Response1DataInner(v *DNSResolverService) GetServerServices200Response1DataInner {
	return GetServerServices200Response1DataInner{
		DNSResolverService: v,
	}
}

// DNSStatisticsServiceAsGetServerServices200Response1DataInner is a convenience function that returns DNSStatisticsService wrapped in GetServerServices200Response1DataInner
func DNSStatisticsServiceAsGetServerServices200Response1DataInner(v *DNSStatisticsService) GetServerServices200Response1DataInner {
	return GetServerServices200Response1DataInner{
		DNSStatisticsService: v,
	}
}

// FirewallServiceAsGetServerServices200Response1DataInner is a convenience function that returns FirewallService wrapped in GetServerServices200Response1DataInner
func FirewallServiceAsGetServerServices200Response1DataInner(v *FirewallService) GetServerServices200Response1DataInner {
	return GetServerServices200Response1DataInner{
		FirewallService: v,
	}
}

// GatewayServiceAsGetServerServices200Response1DataInner is a convenience function that returns GatewayService wrapped in GetServerServices200Response1DataInner
func GatewayServiceAsGetServerServices200Response1DataInner(v *GatewayService) GetServerServices200Response1DataInner {
	return GetServerServices200Response1DataInner{
		GatewayService: v,
	}
}

// InterfacesServiceAsGetServerServices200Response1DataInner is a convenience function that returns InterfacesService wrapped in GetServerServices200Response1DataInner
func InterfacesServiceAsGetServerServices200Response1DataInner(v *InterfacesService) GetServerServices200Response1DataInner {
	return GetServerServices200Response1DataInner{
		InterfacesService: v,
	}
}

// LicenseServiceAsGetServerServices200Response1DataInner is a convenience function that returns LicenseService wrapped in GetServerServices200Response1DataInner
func LicenseServiceAsGetServerServices200Response1DataInner(v *LicenseService) GetServerServices200Response1DataInner {
	return GetServerServices200Response1DataInner{
		LicenseService: v,
	}
}

// NTPServiceAsGetServerServices200Response1DataInner is a convenience function that returns NTPService wrapped in GetServerServices200Response1DataInner
func NTPServiceAsGetServerServices200Response1DataInner(v *NTPService) GetServerServices200Response1DataInner {
	return GetServerServices200Response1DataInner{
		NTPService: v,
	}
}

// SNMPServiceAsGetServerServices200Response1DataInner is a convenience function that returns SNMPService wrapped in GetServerServices200Response1DataInner
func SNMPServiceAsGetServerServices200Response1DataInner(v *SNMPService) GetServerServices200Response1DataInner {
	return GetServerServices200Response1DataInner{
		SNMPService: v,
	}
}

// SSHServiceAsGetServerServices200Response1DataInner is a convenience function that returns SSHService wrapped in GetServerServices200Response1DataInner
func SSHServiceAsGetServerServices200Response1DataInner(v *SSHService) GetServerServices200Response1DataInner {
	return GetServerServices200Response1DataInner{
		SSHService: v,
	}
}

// SyslogServiceAsGetServerServices200Response1DataInner is a convenience function that returns SyslogService wrapped in GetServerServices200Response1DataInner
func SyslogServiceAsGetServerServices200Response1DataInner(v *SyslogService) GetServerServices200Response1DataInner {
	return GetServerServices200Response1DataInner{
		SyslogService: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetServerServices200Response1DataInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AnycastService
	err = newStrictDecoder(data).Decode(&dst.AnycastService)
	if err == nil {
		jsonAnycastService, _ := json.Marshal(dst.AnycastService)
		if string(jsonAnycastService) == "{}" { // empty struct
			dst.AnycastService = nil
		} else {
			if err = validator.Validate(dst.AnycastService); err != nil {
				dst.AnycastService = nil
			} else {
				match++
			}
		}
	} else {
		dst.AnycastService = nil
	}

	// try to unmarshal data into DHCPActivityService
	err = newStrictDecoder(data).Decode(&dst.DHCPActivityService)
	if err == nil {
		jsonDHCPActivityService, _ := json.Marshal(dst.DHCPActivityService)
		if string(jsonDHCPActivityService) == "{}" { // empty struct
			dst.DHCPActivityService = nil
		} else {
			if err = validator.Validate(dst.DHCPActivityService); err != nil {
				dst.DHCPActivityService = nil
			} else {
				match++
			}
		}
	} else {
		dst.DHCPActivityService = nil
	}

	// try to unmarshal data into DHCPStatisticsService
	err = newStrictDecoder(data).Decode(&dst.DHCPStatisticsService)
	if err == nil {
		jsonDHCPStatisticsService, _ := json.Marshal(dst.DHCPStatisticsService)
		if string(jsonDHCPStatisticsService) == "{}" { // empty struct
			dst.DHCPStatisticsService = nil
		} else {
			if err = validator.Validate(dst.DHCPStatisticsService); err != nil {
				dst.DHCPStatisticsService = nil
			} else {
				match++
			}
		}
	} else {
		dst.DHCPStatisticsService = nil
	}

	// try to unmarshal data into DNSActivityService
	err = newStrictDecoder(data).Decode(&dst.DNSActivityService)
	if err == nil {
		jsonDNSActivityService, _ := json.Marshal(dst.DNSActivityService)
		if string(jsonDNSActivityService) == "{}" { // empty struct
			dst.DNSActivityService = nil
		} else {
			if err = validator.Validate(dst.DNSActivityService); err != nil {
				dst.DNSActivityService = nil
			} else {
				match++
			}
		}
	} else {
		dst.DNSActivityService = nil
	}

	// try to unmarshal data into DNSResolverService
	err = newStrictDecoder(data).Decode(&dst.DNSResolverService)
	if err == nil {
		jsonDNSResolverService, _ := json.Marshal(dst.DNSResolverService)
		if string(jsonDNSResolverService) == "{}" { // empty struct
			dst.DNSResolverService = nil
		} else {
			if err = validator.Validate(dst.DNSResolverService); err != nil {
				dst.DNSResolverService = nil
			} else {
				match++
			}
		}
	} else {
		dst.DNSResolverService = nil
	}

	// try to unmarshal data into DNSStatisticsService
	err = newStrictDecoder(data).Decode(&dst.DNSStatisticsService)
	if err == nil {
		jsonDNSStatisticsService, _ := json.Marshal(dst.DNSStatisticsService)
		if string(jsonDNSStatisticsService) == "{}" { // empty struct
			dst.DNSStatisticsService = nil
		} else {
			if err = validator.Validate(dst.DNSStatisticsService); err != nil {
				dst.DNSStatisticsService = nil
			} else {
				match++
			}
		}
	} else {
		dst.DNSStatisticsService = nil
	}

	// try to unmarshal data into FirewallService
	err = newStrictDecoder(data).Decode(&dst.FirewallService)
	if err == nil {
		jsonFirewallService, _ := json.Marshal(dst.FirewallService)
		if string(jsonFirewallService) == "{}" { // empty struct
			dst.FirewallService = nil
		} else {
			if err = validator.Validate(dst.FirewallService); err != nil {
				dst.FirewallService = nil
			} else {
				match++
			}
		}
	} else {
		dst.FirewallService = nil
	}

	// try to unmarshal data into GatewayService
	err = newStrictDecoder(data).Decode(&dst.GatewayService)
	if err == nil {
		jsonGatewayService, _ := json.Marshal(dst.GatewayService)
		if string(jsonGatewayService) == "{}" { // empty struct
			dst.GatewayService = nil
		} else {
			if err = validator.Validate(dst.GatewayService); err != nil {
				dst.GatewayService = nil
			} else {
				match++
			}
		}
	} else {
		dst.GatewayService = nil
	}

	// try to unmarshal data into InterfacesService
	err = newStrictDecoder(data).Decode(&dst.InterfacesService)
	if err == nil {
		jsonInterfacesService, _ := json.Marshal(dst.InterfacesService)
		if string(jsonInterfacesService) == "{}" { // empty struct
			dst.InterfacesService = nil
		} else {
			if err = validator.Validate(dst.InterfacesService); err != nil {
				dst.InterfacesService = nil
			} else {
				match++
			}
		}
	} else {
		dst.InterfacesService = nil
	}

	// try to unmarshal data into LicenseService
	err = newStrictDecoder(data).Decode(&dst.LicenseService)
	if err == nil {
		jsonLicenseService, _ := json.Marshal(dst.LicenseService)
		if string(jsonLicenseService) == "{}" { // empty struct
			dst.LicenseService = nil
		} else {
			if err = validator.Validate(dst.LicenseService); err != nil {
				dst.LicenseService = nil
			} else {
				match++
			}
		}
	} else {
		dst.LicenseService = nil
	}

	// try to unmarshal data into NTPService
	err = newStrictDecoder(data).Decode(&dst.NTPService)
	if err == nil {
		jsonNTPService, _ := json.Marshal(dst.NTPService)
		if string(jsonNTPService) == "{}" { // empty struct
			dst.NTPService = nil
		} else {
			if err = validator.Validate(dst.NTPService); err != nil {
				dst.NTPService = nil
			} else {
				match++
			}
		}
	} else {
		dst.NTPService = nil
	}

	// try to unmarshal data into SNMPService
	err = newStrictDecoder(data).Decode(&dst.SNMPService)
	if err == nil {
		jsonSNMPService, _ := json.Marshal(dst.SNMPService)
		if string(jsonSNMPService) == "{}" { // empty struct
			dst.SNMPService = nil
		} else {
			if err = validator.Validate(dst.SNMPService); err != nil {
				dst.SNMPService = nil
			} else {
				match++
			}
		}
	} else {
		dst.SNMPService = nil
	}

	// try to unmarshal data into SSHService
	err = newStrictDecoder(data).Decode(&dst.SSHService)
	if err == nil {
		jsonSSHService, _ := json.Marshal(dst.SSHService)
		if string(jsonSSHService) == "{}" { // empty struct
			dst.SSHService = nil
		} else {
			if err = validator.Validate(dst.SSHService); err != nil {
				dst.SSHService = nil
			} else {
				match++
			}
		}
	} else {
		dst.SSHService = nil
	}

	// try to unmarshal data into SyslogService
	err = newStrictDecoder(data).Decode(&dst.SyslogService)
	if err == nil {
		jsonSyslogService, _ := json.Marshal(dst.SyslogService)
		if string(jsonSyslogService) == "{}" { // empty struct
			dst.SyslogService = nil
		} else {
			if err = validator.Validate(dst.SyslogService); err != nil {
				dst.SyslogService = nil
			} else {
				match++
			}
		}
	} else {
		dst.SyslogService = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AnycastService = nil
		dst.DHCPActivityService = nil
		dst.DHCPStatisticsService = nil
		dst.DNSActivityService = nil
		dst.DNSResolverService = nil
		dst.DNSStatisticsService = nil
		dst.FirewallService = nil
		dst.GatewayService = nil
		dst.InterfacesService = nil
		dst.LicenseService = nil
		dst.NTPService = nil
		dst.SNMPService = nil
		dst.SSHService = nil
		dst.SyslogService = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetServerServices200Response1DataInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetServerServices200Response1DataInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetServerServices200Response1DataInner) MarshalJSON() ([]byte, error) {
	if src.AnycastService != nil {
		return json.Marshal(&src.AnycastService)
	}

	if src.DHCPActivityService != nil {
		return json.Marshal(&src.DHCPActivityService)
	}

	if src.DHCPStatisticsService != nil {
		return json.Marshal(&src.DHCPStatisticsService)
	}

	if src.DNSActivityService != nil {
		return json.Marshal(&src.DNSActivityService)
	}

	if src.DNSResolverService != nil {
		return json.Marshal(&src.DNSResolverService)
	}

	if src.DNSStatisticsService != nil {
		return json.Marshal(&src.DNSStatisticsService)
	}

	if src.FirewallService != nil {
		return json.Marshal(&src.FirewallService)
	}

	if src.GatewayService != nil {
		return json.Marshal(&src.GatewayService)
	}

	if src.InterfacesService != nil {
		return json.Marshal(&src.InterfacesService)
	}

	if src.LicenseService != nil {
		return json.Marshal(&src.LicenseService)
	}

	if src.NTPService != nil {
		return json.Marshal(&src.NTPService)
	}

	if src.SNMPService != nil {
		return json.Marshal(&src.SNMPService)
	}

	if src.SSHService != nil {
		return json.Marshal(&src.SSHService)
	}

	if src.SyslogService != nil {
		return json.Marshal(&src.SyslogService)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetServerServices200Response1DataInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AnycastService != nil {
		return obj.AnycastService
	}

	if obj.DHCPActivityService != nil {
		return obj.DHCPActivityService
	}

	if obj.DHCPStatisticsService != nil {
		return obj.DHCPStatisticsService
	}

	if obj.DNSActivityService != nil {
		return obj.DNSActivityService
	}

	if obj.DNSResolverService != nil {
		return obj.DNSResolverService
	}

	if obj.DNSStatisticsService != nil {
		return obj.DNSStatisticsService
	}

	if obj.FirewallService != nil {
		return obj.FirewallService
	}

	if obj.GatewayService != nil {
		return obj.GatewayService
	}

	if obj.InterfacesService != nil {
		return obj.InterfacesService
	}

	if obj.LicenseService != nil {
		return obj.LicenseService
	}

	if obj.NTPService != nil {
		return obj.NTPService
	}

	if obj.SNMPService != nil {
		return obj.SNMPService
	}

	if obj.SSHService != nil {
		return obj.SSHService
	}

	if obj.SyslogService != nil {
		return obj.SyslogService
	}

	// all schemas are nil
	return nil
}

type NullableGetServerServices200Response1DataInner struct {
	value *GetServerServices200Response1DataInner
	isSet bool
}

func (v NullableGetServerServices200Response1DataInner) Get() *GetServerServices200Response1DataInner {
	return v.value
}

func (v *NullableGetServerServices200Response1DataInner) Set(val *GetServerServices200Response1DataInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGetServerServices200Response1DataInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGetServerServices200Response1DataInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetServerServices200Response1DataInner(val *GetServerServices200Response1DataInner) *NullableGetServerServices200Response1DataInner {
	return &NullableGetServerServices200Response1DataInner{value: val, isSet: true}
}

func (v NullableGetServerServices200Response1DataInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetServerServices200Response1DataInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



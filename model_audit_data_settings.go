/*
BlueCat Address Manager 9.5 RESTful v2 API

The **BlueCat Address Manager 9.5 RESTful v2 API** is a new RESTful API for Address Manager that presents Address Manager objects as resources. Each resource has a unique endpoint, and related resources are grouped in collections. To fetch an individual resource, a `GET` request is sent to the resource's endpoint. To fetch all resources in a collection, a `GET` request is sent to the collection's endpoint.  The RESTful v2 API is [hypermedia driven](https://en.wikipedia.org/wiki/HATEOAS) and uses the [HAL](https://en.wikipedia.org/wiki/Hypertext_Application_Language) format for representing links. When navigating through the API, you can use those links to navigate to related resources or child resources of the requested endpoint. The API supports the following media types for most endpoints:  `application/hal+json`, `application/json`, and `text/csv`.  For authentication, the API supports both `Basic` and `Bearer` HTTP authentication schemes.  To get started, create a session and receive credentials for `Basic` authentication by sending a `POST` request to the [/sessions](#/Admin%20Resources/postSession) endpoint, with a message body containing the user's credentials:  ```{\"username\":\"apiuser\", \"password\":\"apipass\"}```  The response will contain an `apiToken` field that can be entered with the username in the Swagger UI **Authorize** dialog. The response will also contain a `basicAuthenticationCredentials` field containing a base64 encoding of the requester's username and API token delimited by a colon. This string can be injected directly into request `Authorization` headers in the following format:  ```Authorization: Basic YXBpOlQ0OExOT3VIRGhDcnVBNEo1bGFES3JuS3hTZC9QK3pjczZXTzBJMDY=```  For full details on API format and authentication methods, refer to the Address Manager RESTful v2 API Guide on the BlueCat Documentation Portal.

API version: 9.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gobam2

import (
	"encoding/json"
)

// checks if the AuditDataSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditDataSettings{}

// AuditDataSettings struct for AuditDataSettings
type AuditDataSettings struct {
	Settings
	// The resource type.
	Type *string `json:"type,omitempty"`
	// The number of days to retain the administrative history records. A null retention period indicates that the data will be retained indefinitely.
	AdministrativeHistoryRetentionPeriod *string `json:"administrativeHistoryRetentionPeriod,omitempty"`
	// The number of days to retain the session and event history records. A null retention period indicates that the data will be retained indefinitely.
	SessionAndEventsRetentionPeriod *string `json:"sessionAndEventsRetentionPeriod,omitempty"`
	// The number of days to retain the DHCP transaction history records. A null retention period indicates that the data will be retained indefinitely. A retention period of 0 seconds indicates that the data wil not be retained.
	DhcpTransactionRetentionPeriod *string `json:"dhcpTransactionRetentionPeriod,omitempty"`
	// The number of days to retain the DDNS transaction history records. A null retention period indicates that the data will be retained indefinitely. A retention period of 0 seconds indicates that the data wil not be retained.
	DdnsTransactionRetentionPeriod *string `json:"ddnsTransactionRetentionPeriod,omitempty"`
	// Indicates if the audit data export service is enabled.
	ExportEnabled *bool `json:"exportEnabled,omitempty"`
	Destination *SinkBean `json:"destination,omitempty"`
}

// NewAuditDataSettings instantiates a new AuditDataSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditDataSettings() *AuditDataSettings {
	this := AuditDataSettings{}
	return &this
}

// NewAuditDataSettingsWithDefaults instantiates a new AuditDataSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditDataSettingsWithDefaults() *AuditDataSettings {
	this := AuditDataSettings{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AuditDataSettings) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditDataSettings) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AuditDataSettings) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AuditDataSettings) SetType(v string) {
	o.Type = &v
}

// GetAdministrativeHistoryRetentionPeriod returns the AdministrativeHistoryRetentionPeriod field value if set, zero value otherwise.
func (o *AuditDataSettings) GetAdministrativeHistoryRetentionPeriod() string {
	if o == nil || IsNil(o.AdministrativeHistoryRetentionPeriod) {
		var ret string
		return ret
	}
	return *o.AdministrativeHistoryRetentionPeriod
}

// GetAdministrativeHistoryRetentionPeriodOk returns a tuple with the AdministrativeHistoryRetentionPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditDataSettings) GetAdministrativeHistoryRetentionPeriodOk() (*string, bool) {
	if o == nil || IsNil(o.AdministrativeHistoryRetentionPeriod) {
		return nil, false
	}
	return o.AdministrativeHistoryRetentionPeriod, true
}

// HasAdministrativeHistoryRetentionPeriod returns a boolean if a field has been set.
func (o *AuditDataSettings) HasAdministrativeHistoryRetentionPeriod() bool {
	if o != nil && !IsNil(o.AdministrativeHistoryRetentionPeriod) {
		return true
	}

	return false
}

// SetAdministrativeHistoryRetentionPeriod gets a reference to the given string and assigns it to the AdministrativeHistoryRetentionPeriod field.
func (o *AuditDataSettings) SetAdministrativeHistoryRetentionPeriod(v string) {
	o.AdministrativeHistoryRetentionPeriod = &v
}

// GetSessionAndEventsRetentionPeriod returns the SessionAndEventsRetentionPeriod field value if set, zero value otherwise.
func (o *AuditDataSettings) GetSessionAndEventsRetentionPeriod() string {
	if o == nil || IsNil(o.SessionAndEventsRetentionPeriod) {
		var ret string
		return ret
	}
	return *o.SessionAndEventsRetentionPeriod
}

// GetSessionAndEventsRetentionPeriodOk returns a tuple with the SessionAndEventsRetentionPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditDataSettings) GetSessionAndEventsRetentionPeriodOk() (*string, bool) {
	if o == nil || IsNil(o.SessionAndEventsRetentionPeriod) {
		return nil, false
	}
	return o.SessionAndEventsRetentionPeriod, true
}

// HasSessionAndEventsRetentionPeriod returns a boolean if a field has been set.
func (o *AuditDataSettings) HasSessionAndEventsRetentionPeriod() bool {
	if o != nil && !IsNil(o.SessionAndEventsRetentionPeriod) {
		return true
	}

	return false
}

// SetSessionAndEventsRetentionPeriod gets a reference to the given string and assigns it to the SessionAndEventsRetentionPeriod field.
func (o *AuditDataSettings) SetSessionAndEventsRetentionPeriod(v string) {
	o.SessionAndEventsRetentionPeriod = &v
}

// GetDhcpTransactionRetentionPeriod returns the DhcpTransactionRetentionPeriod field value if set, zero value otherwise.
func (o *AuditDataSettings) GetDhcpTransactionRetentionPeriod() string {
	if o == nil || IsNil(o.DhcpTransactionRetentionPeriod) {
		var ret string
		return ret
	}
	return *o.DhcpTransactionRetentionPeriod
}

// GetDhcpTransactionRetentionPeriodOk returns a tuple with the DhcpTransactionRetentionPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditDataSettings) GetDhcpTransactionRetentionPeriodOk() (*string, bool) {
	if o == nil || IsNil(o.DhcpTransactionRetentionPeriod) {
		return nil, false
	}
	return o.DhcpTransactionRetentionPeriod, true
}

// HasDhcpTransactionRetentionPeriod returns a boolean if a field has been set.
func (o *AuditDataSettings) HasDhcpTransactionRetentionPeriod() bool {
	if o != nil && !IsNil(o.DhcpTransactionRetentionPeriod) {
		return true
	}

	return false
}

// SetDhcpTransactionRetentionPeriod gets a reference to the given string and assigns it to the DhcpTransactionRetentionPeriod field.
func (o *AuditDataSettings) SetDhcpTransactionRetentionPeriod(v string) {
	o.DhcpTransactionRetentionPeriod = &v
}

// GetDdnsTransactionRetentionPeriod returns the DdnsTransactionRetentionPeriod field value if set, zero value otherwise.
func (o *AuditDataSettings) GetDdnsTransactionRetentionPeriod() string {
	if o == nil || IsNil(o.DdnsTransactionRetentionPeriod) {
		var ret string
		return ret
	}
	return *o.DdnsTransactionRetentionPeriod
}

// GetDdnsTransactionRetentionPeriodOk returns a tuple with the DdnsTransactionRetentionPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditDataSettings) GetDdnsTransactionRetentionPeriodOk() (*string, bool) {
	if o == nil || IsNil(o.DdnsTransactionRetentionPeriod) {
		return nil, false
	}
	return o.DdnsTransactionRetentionPeriod, true
}

// HasDdnsTransactionRetentionPeriod returns a boolean if a field has been set.
func (o *AuditDataSettings) HasDdnsTransactionRetentionPeriod() bool {
	if o != nil && !IsNil(o.DdnsTransactionRetentionPeriod) {
		return true
	}

	return false
}

// SetDdnsTransactionRetentionPeriod gets a reference to the given string and assigns it to the DdnsTransactionRetentionPeriod field.
func (o *AuditDataSettings) SetDdnsTransactionRetentionPeriod(v string) {
	o.DdnsTransactionRetentionPeriod = &v
}

// GetExportEnabled returns the ExportEnabled field value if set, zero value otherwise.
func (o *AuditDataSettings) GetExportEnabled() bool {
	if o == nil || IsNil(o.ExportEnabled) {
		var ret bool
		return ret
	}
	return *o.ExportEnabled
}

// GetExportEnabledOk returns a tuple with the ExportEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditDataSettings) GetExportEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ExportEnabled) {
		return nil, false
	}
	return o.ExportEnabled, true
}

// HasExportEnabled returns a boolean if a field has been set.
func (o *AuditDataSettings) HasExportEnabled() bool {
	if o != nil && !IsNil(o.ExportEnabled) {
		return true
	}

	return false
}

// SetExportEnabled gets a reference to the given bool and assigns it to the ExportEnabled field.
func (o *AuditDataSettings) SetExportEnabled(v bool) {
	o.ExportEnabled = &v
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *AuditDataSettings) GetDestination() SinkBean {
	if o == nil || IsNil(o.Destination) {
		var ret SinkBean
		return ret
	}
	return *o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditDataSettings) GetDestinationOk() (*SinkBean, bool) {
	if o == nil || IsNil(o.Destination) {
		return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *AuditDataSettings) HasDestination() bool {
	if o != nil && !IsNil(o.Destination) {
		return true
	}

	return false
}

// SetDestination gets a reference to the given SinkBean and assigns it to the Destination field.
func (o *AuditDataSettings) SetDestination(v SinkBean) {
	o.Destination = &v
}

func (o AuditDataSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditDataSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.AdministrativeHistoryRetentionPeriod) {
		toSerialize["administrativeHistoryRetentionPeriod"] = o.AdministrativeHistoryRetentionPeriod
	}
	if !IsNil(o.SessionAndEventsRetentionPeriod) {
		toSerialize["sessionAndEventsRetentionPeriod"] = o.SessionAndEventsRetentionPeriod
	}
	if !IsNil(o.DhcpTransactionRetentionPeriod) {
		toSerialize["dhcpTransactionRetentionPeriod"] = o.DhcpTransactionRetentionPeriod
	}
	if !IsNil(o.DdnsTransactionRetentionPeriod) {
		toSerialize["ddnsTransactionRetentionPeriod"] = o.DdnsTransactionRetentionPeriod
	}
	if !IsNil(o.ExportEnabled) {
		toSerialize["exportEnabled"] = o.ExportEnabled
	}
	if !IsNil(o.Destination) {
		toSerialize["destination"] = o.Destination
	}
	return toSerialize, nil
}

type NullableAuditDataSettings struct {
	value *AuditDataSettings
	isSet bool
}

func (v NullableAuditDataSettings) Get() *AuditDataSettings {
	return v.value
}

func (v *NullableAuditDataSettings) Set(val *AuditDataSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditDataSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditDataSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditDataSettings(val *AuditDataSettings) *NullableAuditDataSettings {
	return &NullableAuditDataSettings{value: val, isSet: true}
}

func (v NullableAuditDataSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditDataSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
BlueCat Address Manager 9.5 RESTful v2 API

The **BlueCat Address Manager 9.5 RESTful v2 API** is a new RESTful API for Address Manager that presents Address Manager objects as resources. Each resource has a unique endpoint, and related resources are grouped in collections. To fetch an individual resource, a `GET` request is sent to the resource's endpoint. To fetch all resources in a collection, a `GET` request is sent to the collection's endpoint.  The RESTful v2 API is [hypermedia driven](https://en.wikipedia.org/wiki/HATEOAS) and uses the [HAL](https://en.wikipedia.org/wiki/Hypertext_Application_Language) format for representing links. When navigating through the API, you can use those links to navigate to related resources or child resources of the requested endpoint. The API supports the following media types for most endpoints:  `application/hal+json`, `application/json`, and `text/csv`.  For authentication, the API supports both `Basic` and `Bearer` HTTP authentication schemes.  To get started, create a session and receive credentials for `Basic` authentication by sending a `POST` request to the [/sessions](#/Admin%20Resources/postSession) endpoint, with a message body containing the user's credentials:  ```{\"username\":\"apiuser\", \"password\":\"apipass\"}```  The response will contain an `apiToken` field that can be entered with the username in the Swagger UI **Authorize** dialog. The response will also contain a `basicAuthenticationCredentials` field containing a base64 encoding of the requester's username and API token delimited by a colon. This string can be injected directly into request `Authorization` headers in the following format:  ```Authorization: Basic YXBpOlQ0OExOT3VIRGhDcnVBNEo1bGFES3JuS3hTZC9QK3pjczZXTzBJMDY=```  For full details on API format and authentication methods, refer to the Address Manager RESTful v2 API Guide on the BlueCat Documentation Portal.

API version: 9.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gobam2

import (
	"encoding/json"
)

// checks if the DiscoveredInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiscoveredInterface{}

// DiscoveredInterface struct for DiscoveredInterface
type DiscoveredInterface struct {
	DiscoveredDevice
	// The resource type.
	Type *string `json:"type,omitempty"`
	Device *DiscoveredDevice `json:"device,omitempty"`
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	InterfaceIndex *int32 `json:"interfaceIndex,omitempty"`
	MacAddress *string `json:"macAddress,omitempty"`
	Speed *int32 `json:"speed,omitempty"`
	Connector *string `json:"connector,omitempty"`
	Alias *string `json:"alias,omitempty"`
}

// NewDiscoveredInterface instantiates a new DiscoveredInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiscoveredInterface() *DiscoveredInterface {
	this := DiscoveredInterface{}
	return &this
}

// NewDiscoveredInterfaceWithDefaults instantiates a new DiscoveredInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiscoveredInterfaceWithDefaults() *DiscoveredInterface {
	this := DiscoveredInterface{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DiscoveredInterface) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveredInterface) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DiscoveredInterface) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DiscoveredInterface) SetType(v string) {
	o.Type = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *DiscoveredInterface) GetDevice() DiscoveredDevice {
	if o == nil || IsNil(o.Device) {
		var ret DiscoveredDevice
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveredInterface) GetDeviceOk() (*DiscoveredDevice, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *DiscoveredInterface) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given DiscoveredDevice and assigns it to the Device field.
func (o *DiscoveredInterface) SetDevice(v DiscoveredDevice) {
	o.Device = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DiscoveredInterface) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveredInterface) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DiscoveredInterface) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DiscoveredInterface) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DiscoveredInterface) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveredInterface) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DiscoveredInterface) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DiscoveredInterface) SetDescription(v string) {
	o.Description = &v
}

// GetInterfaceIndex returns the InterfaceIndex field value if set, zero value otherwise.
func (o *DiscoveredInterface) GetInterfaceIndex() int32 {
	if o == nil || IsNil(o.InterfaceIndex) {
		var ret int32
		return ret
	}
	return *o.InterfaceIndex
}

// GetInterfaceIndexOk returns a tuple with the InterfaceIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveredInterface) GetInterfaceIndexOk() (*int32, bool) {
	if o == nil || IsNil(o.InterfaceIndex) {
		return nil, false
	}
	return o.InterfaceIndex, true
}

// HasInterfaceIndex returns a boolean if a field has been set.
func (o *DiscoveredInterface) HasInterfaceIndex() bool {
	if o != nil && !IsNil(o.InterfaceIndex) {
		return true
	}

	return false
}

// SetInterfaceIndex gets a reference to the given int32 and assigns it to the InterfaceIndex field.
func (o *DiscoveredInterface) SetInterfaceIndex(v int32) {
	o.InterfaceIndex = &v
}

// GetMacAddress returns the MacAddress field value if set, zero value otherwise.
func (o *DiscoveredInterface) GetMacAddress() string {
	if o == nil || IsNil(o.MacAddress) {
		var ret string
		return ret
	}
	return *o.MacAddress
}

// GetMacAddressOk returns a tuple with the MacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveredInterface) GetMacAddressOk() (*string, bool) {
	if o == nil || IsNil(o.MacAddress) {
		return nil, false
	}
	return o.MacAddress, true
}

// HasMacAddress returns a boolean if a field has been set.
func (o *DiscoveredInterface) HasMacAddress() bool {
	if o != nil && !IsNil(o.MacAddress) {
		return true
	}

	return false
}

// SetMacAddress gets a reference to the given string and assigns it to the MacAddress field.
func (o *DiscoveredInterface) SetMacAddress(v string) {
	o.MacAddress = &v
}

// GetSpeed returns the Speed field value if set, zero value otherwise.
func (o *DiscoveredInterface) GetSpeed() int32 {
	if o == nil || IsNil(o.Speed) {
		var ret int32
		return ret
	}
	return *o.Speed
}

// GetSpeedOk returns a tuple with the Speed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveredInterface) GetSpeedOk() (*int32, bool) {
	if o == nil || IsNil(o.Speed) {
		return nil, false
	}
	return o.Speed, true
}

// HasSpeed returns a boolean if a field has been set.
func (o *DiscoveredInterface) HasSpeed() bool {
	if o != nil && !IsNil(o.Speed) {
		return true
	}

	return false
}

// SetSpeed gets a reference to the given int32 and assigns it to the Speed field.
func (o *DiscoveredInterface) SetSpeed(v int32) {
	o.Speed = &v
}

// GetConnector returns the Connector field value if set, zero value otherwise.
func (o *DiscoveredInterface) GetConnector() string {
	if o == nil || IsNil(o.Connector) {
		var ret string
		return ret
	}
	return *o.Connector
}

// GetConnectorOk returns a tuple with the Connector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveredInterface) GetConnectorOk() (*string, bool) {
	if o == nil || IsNil(o.Connector) {
		return nil, false
	}
	return o.Connector, true
}

// HasConnector returns a boolean if a field has been set.
func (o *DiscoveredInterface) HasConnector() bool {
	if o != nil && !IsNil(o.Connector) {
		return true
	}

	return false
}

// SetConnector gets a reference to the given string and assigns it to the Connector field.
func (o *DiscoveredInterface) SetConnector(v string) {
	o.Connector = &v
}

// GetAlias returns the Alias field value if set, zero value otherwise.
func (o *DiscoveredInterface) GetAlias() string {
	if o == nil || IsNil(o.Alias) {
		var ret string
		return ret
	}
	return *o.Alias
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveredInterface) GetAliasOk() (*string, bool) {
	if o == nil || IsNil(o.Alias) {
		return nil, false
	}
	return o.Alias, true
}

// HasAlias returns a boolean if a field has been set.
func (o *DiscoveredInterface) HasAlias() bool {
	if o != nil && !IsNil(o.Alias) {
		return true
	}

	return false
}

// SetAlias gets a reference to the given string and assigns it to the Alias field.
func (o *DiscoveredInterface) SetAlias(v string) {
	o.Alias = &v
}

func (o DiscoveredInterface) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiscoveredInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.InterfaceIndex) {
		toSerialize["interfaceIndex"] = o.InterfaceIndex
	}
	if !IsNil(o.MacAddress) {
		toSerialize["macAddress"] = o.MacAddress
	}
	if !IsNil(o.Speed) {
		toSerialize["speed"] = o.Speed
	}
	if !IsNil(o.Connector) {
		toSerialize["connector"] = o.Connector
	}
	if !IsNil(o.Alias) {
		toSerialize["alias"] = o.Alias
	}
	return toSerialize, nil
}

type NullableDiscoveredInterface struct {
	value *DiscoveredInterface
	isSet bool
}

func (v NullableDiscoveredInterface) Get() *DiscoveredInterface {
	return v.value
}

func (v *NullableDiscoveredInterface) Set(val *DiscoveredInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableDiscoveredInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableDiscoveredInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiscoveredInterface(val *DiscoveredInterface) *NullableDiscoveredInterface {
	return &NullableDiscoveredInterface{value: val, isSet: true}
}

func (v NullableDiscoveredInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiscoveredInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
BlueCat Address Manager 9.5 RESTful v2 API

The **BlueCat Address Manager 9.5 RESTful v2 API** is a new RESTful API for Address Manager that presents Address Manager objects as resources. Each resource has a unique endpoint, and related resources are grouped in collections. To fetch an individual resource, a `GET` request is sent to the resource's endpoint. To fetch all resources in a collection, a `GET` request is sent to the collection's endpoint.  The RESTful v2 API is [hypermedia driven](https://en.wikipedia.org/wiki/HATEOAS) and uses the [HAL](https://en.wikipedia.org/wiki/Hypertext_Application_Language) format for representing links. When navigating through the API, you can use those links to navigate to related resources or child resources of the requested endpoint. The API supports the following media types for most endpoints:  `application/hal+json`, `application/json`, and `text/csv`.  For authentication, the API supports both `Basic` and `Bearer` HTTP authentication schemes.  To get started, create a session and receive credentials for `Basic` authentication by sending a `POST` request to the [/sessions](#/Admin%20Resources/postSession) endpoint, with a message body containing the user's credentials:  ```{\"username\":\"apiuser\", \"password\":\"apipass\"}```  The response will contain an `apiToken` field that can be entered with the username in the Swagger UI **Authorize** dialog. The response will also contain a `basicAuthenticationCredentials` field containing a base64 encoding of the requester's username and API token delimited by a colon. This string can be injected directly into request `Authorization` headers in the following format:  ```Authorization: Basic YXBpOlQ0OExOT3VIRGhDcnVBNEo1bGFES3JuS3hTZC9QK3pjczZXTzBJMDY=```  For full details on API format and authentication methods, refer to the Address Manager RESTful v2 API Guide on the BlueCat Documentation Portal.

API version: 9.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gobam2

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// GetCollectionDeploymentOptionDefinitions200Response1DataInner - struct for GetCollectionDeploymentOptionDefinitions200Response1DataInner
type GetCollectionDeploymentOptionDefinitions200Response1DataInner struct {
	DHCPVendorOptionDefinition *DHCPVendorOptionDefinition
	DHCPv4ClientOptionDefinition *DHCPv4ClientOptionDefinition
	DHCPv4CustomClientOptionDefinition *DHCPv4CustomClientOptionDefinition
	DHCPv4ServiceOptionDefinition *DHCPv4ServiceOptionDefinition
	DHCPv6ClientOptionDefinition *DHCPv6ClientOptionDefinition
	DHCPv6ServiceOptionDefinition *DHCPv6ServiceOptionDefinition
	DNSOptionDefinition *DNSOptionDefinition
	StartOfAuthorityDefinition *StartOfAuthorityDefinition
}

// DHCPVendorOptionDefinitionAsGetCollectionDeploymentOptionDefinitions200Response1DataInner is a convenience function that returns DHCPVendorOptionDefinition wrapped in GetCollectionDeploymentOptionDefinitions200Response1DataInner
func DHCPVendorOptionDefinitionAsGetCollectionDeploymentOptionDefinitions200Response1DataInner(v *DHCPVendorOptionDefinition) GetCollectionDeploymentOptionDefinitions200Response1DataInner {
	return GetCollectionDeploymentOptionDefinitions200Response1DataInner{
		DHCPVendorOptionDefinition: v,
	}
}

// DHCPv4ClientOptionDefinitionAsGetCollectionDeploymentOptionDefinitions200Response1DataInner is a convenience function that returns DHCPv4ClientOptionDefinition wrapped in GetCollectionDeploymentOptionDefinitions200Response1DataInner
func DHCPv4ClientOptionDefinitionAsGetCollectionDeploymentOptionDefinitions200Response1DataInner(v *DHCPv4ClientOptionDefinition) GetCollectionDeploymentOptionDefinitions200Response1DataInner {
	return GetCollectionDeploymentOptionDefinitions200Response1DataInner{
		DHCPv4ClientOptionDefinition: v,
	}
}

// DHCPv4CustomClientOptionDefinitionAsGetCollectionDeploymentOptionDefinitions200Response1DataInner is a convenience function that returns DHCPv4CustomClientOptionDefinition wrapped in GetCollectionDeploymentOptionDefinitions200Response1DataInner
func DHCPv4CustomClientOptionDefinitionAsGetCollectionDeploymentOptionDefinitions200Response1DataInner(v *DHCPv4CustomClientOptionDefinition) GetCollectionDeploymentOptionDefinitions200Response1DataInner {
	return GetCollectionDeploymentOptionDefinitions200Response1DataInner{
		DHCPv4CustomClientOptionDefinition: v,
	}
}

// DHCPv4ServiceOptionDefinitionAsGetCollectionDeploymentOptionDefinitions200Response1DataInner is a convenience function that returns DHCPv4ServiceOptionDefinition wrapped in GetCollectionDeploymentOptionDefinitions200Response1DataInner
func DHCPv4ServiceOptionDefinitionAsGetCollectionDeploymentOptionDefinitions200Response1DataInner(v *DHCPv4ServiceOptionDefinition) GetCollectionDeploymentOptionDefinitions200Response1DataInner {
	return GetCollectionDeploymentOptionDefinitions200Response1DataInner{
		DHCPv4ServiceOptionDefinition: v,
	}
}

// DHCPv6ClientOptionDefinitionAsGetCollectionDeploymentOptionDefinitions200Response1DataInner is a convenience function that returns DHCPv6ClientOptionDefinition wrapped in GetCollectionDeploymentOptionDefinitions200Response1DataInner
func DHCPv6ClientOptionDefinitionAsGetCollectionDeploymentOptionDefinitions200Response1DataInner(v *DHCPv6ClientOptionDefinition) GetCollectionDeploymentOptionDefinitions200Response1DataInner {
	return GetCollectionDeploymentOptionDefinitions200Response1DataInner{
		DHCPv6ClientOptionDefinition: v,
	}
}

// DHCPv6ServiceOptionDefinitionAsGetCollectionDeploymentOptionDefinitions200Response1DataInner is a convenience function that returns DHCPv6ServiceOptionDefinition wrapped in GetCollectionDeploymentOptionDefinitions200Response1DataInner
func DHCPv6ServiceOptionDefinitionAsGetCollectionDeploymentOptionDefinitions200Response1DataInner(v *DHCPv6ServiceOptionDefinition) GetCollectionDeploymentOptionDefinitions200Response1DataInner {
	return GetCollectionDeploymentOptionDefinitions200Response1DataInner{
		DHCPv6ServiceOptionDefinition: v,
	}
}

// DNSOptionDefinitionAsGetCollectionDeploymentOptionDefinitions200Response1DataInner is a convenience function that returns DNSOptionDefinition wrapped in GetCollectionDeploymentOptionDefinitions200Response1DataInner
func DNSOptionDefinitionAsGetCollectionDeploymentOptionDefinitions200Response1DataInner(v *DNSOptionDefinition) GetCollectionDeploymentOptionDefinitions200Response1DataInner {
	return GetCollectionDeploymentOptionDefinitions200Response1DataInner{
		DNSOptionDefinition: v,
	}
}

// StartOfAuthorityDefinitionAsGetCollectionDeploymentOptionDefinitions200Response1DataInner is a convenience function that returns StartOfAuthorityDefinition wrapped in GetCollectionDeploymentOptionDefinitions200Response1DataInner
func StartOfAuthorityDefinitionAsGetCollectionDeploymentOptionDefinitions200Response1DataInner(v *StartOfAuthorityDefinition) GetCollectionDeploymentOptionDefinitions200Response1DataInner {
	return GetCollectionDeploymentOptionDefinitions200Response1DataInner{
		StartOfAuthorityDefinition: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetCollectionDeploymentOptionDefinitions200Response1DataInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DHCPVendorOptionDefinition
	err = newStrictDecoder(data).Decode(&dst.DHCPVendorOptionDefinition)
	if err == nil {
		jsonDHCPVendorOptionDefinition, _ := json.Marshal(dst.DHCPVendorOptionDefinition)
		if string(jsonDHCPVendorOptionDefinition) == "{}" { // empty struct
			dst.DHCPVendorOptionDefinition = nil
		} else {
			if err = validator.Validate(dst.DHCPVendorOptionDefinition); err != nil {
				dst.DHCPVendorOptionDefinition = nil
			} else {
				match++
			}
		}
	} else {
		dst.DHCPVendorOptionDefinition = nil
	}

	// try to unmarshal data into DHCPv4ClientOptionDefinition
	err = newStrictDecoder(data).Decode(&dst.DHCPv4ClientOptionDefinition)
	if err == nil {
		jsonDHCPv4ClientOptionDefinition, _ := json.Marshal(dst.DHCPv4ClientOptionDefinition)
		if string(jsonDHCPv4ClientOptionDefinition) == "{}" { // empty struct
			dst.DHCPv4ClientOptionDefinition = nil
		} else {
			if err = validator.Validate(dst.DHCPv4ClientOptionDefinition); err != nil {
				dst.DHCPv4ClientOptionDefinition = nil
			} else {
				match++
			}
		}
	} else {
		dst.DHCPv4ClientOptionDefinition = nil
	}

	// try to unmarshal data into DHCPv4CustomClientOptionDefinition
	err = newStrictDecoder(data).Decode(&dst.DHCPv4CustomClientOptionDefinition)
	if err == nil {
		jsonDHCPv4CustomClientOptionDefinition, _ := json.Marshal(dst.DHCPv4CustomClientOptionDefinition)
		if string(jsonDHCPv4CustomClientOptionDefinition) == "{}" { // empty struct
			dst.DHCPv4CustomClientOptionDefinition = nil
		} else {
			if err = validator.Validate(dst.DHCPv4CustomClientOptionDefinition); err != nil {
				dst.DHCPv4CustomClientOptionDefinition = nil
			} else {
				match++
			}
		}
	} else {
		dst.DHCPv4CustomClientOptionDefinition = nil
	}

	// try to unmarshal data into DHCPv4ServiceOptionDefinition
	err = newStrictDecoder(data).Decode(&dst.DHCPv4ServiceOptionDefinition)
	if err == nil {
		jsonDHCPv4ServiceOptionDefinition, _ := json.Marshal(dst.DHCPv4ServiceOptionDefinition)
		if string(jsonDHCPv4ServiceOptionDefinition) == "{}" { // empty struct
			dst.DHCPv4ServiceOptionDefinition = nil
		} else {
			if err = validator.Validate(dst.DHCPv4ServiceOptionDefinition); err != nil {
				dst.DHCPv4ServiceOptionDefinition = nil
			} else {
				match++
			}
		}
	} else {
		dst.DHCPv4ServiceOptionDefinition = nil
	}

	// try to unmarshal data into DHCPv6ClientOptionDefinition
	err = newStrictDecoder(data).Decode(&dst.DHCPv6ClientOptionDefinition)
	if err == nil {
		jsonDHCPv6ClientOptionDefinition, _ := json.Marshal(dst.DHCPv6ClientOptionDefinition)
		if string(jsonDHCPv6ClientOptionDefinition) == "{}" { // empty struct
			dst.DHCPv6ClientOptionDefinition = nil
		} else {
			if err = validator.Validate(dst.DHCPv6ClientOptionDefinition); err != nil {
				dst.DHCPv6ClientOptionDefinition = nil
			} else {
				match++
			}
		}
	} else {
		dst.DHCPv6ClientOptionDefinition = nil
	}

	// try to unmarshal data into DHCPv6ServiceOptionDefinition
	err = newStrictDecoder(data).Decode(&dst.DHCPv6ServiceOptionDefinition)
	if err == nil {
		jsonDHCPv6ServiceOptionDefinition, _ := json.Marshal(dst.DHCPv6ServiceOptionDefinition)
		if string(jsonDHCPv6ServiceOptionDefinition) == "{}" { // empty struct
			dst.DHCPv6ServiceOptionDefinition = nil
		} else {
			if err = validator.Validate(dst.DHCPv6ServiceOptionDefinition); err != nil {
				dst.DHCPv6ServiceOptionDefinition = nil
			} else {
				match++
			}
		}
	} else {
		dst.DHCPv6ServiceOptionDefinition = nil
	}

	// try to unmarshal data into DNSOptionDefinition
	err = newStrictDecoder(data).Decode(&dst.DNSOptionDefinition)
	if err == nil {
		jsonDNSOptionDefinition, _ := json.Marshal(dst.DNSOptionDefinition)
		if string(jsonDNSOptionDefinition) == "{}" { // empty struct
			dst.DNSOptionDefinition = nil
		} else {
			if err = validator.Validate(dst.DNSOptionDefinition); err != nil {
				dst.DNSOptionDefinition = nil
			} else {
				match++
			}
		}
	} else {
		dst.DNSOptionDefinition = nil
	}

	// try to unmarshal data into StartOfAuthorityDefinition
	err = newStrictDecoder(data).Decode(&dst.StartOfAuthorityDefinition)
	if err == nil {
		jsonStartOfAuthorityDefinition, _ := json.Marshal(dst.StartOfAuthorityDefinition)
		if string(jsonStartOfAuthorityDefinition) == "{}" { // empty struct
			dst.StartOfAuthorityDefinition = nil
		} else {
			if err = validator.Validate(dst.StartOfAuthorityDefinition); err != nil {
				dst.StartOfAuthorityDefinition = nil
			} else {
				match++
			}
		}
	} else {
		dst.StartOfAuthorityDefinition = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DHCPVendorOptionDefinition = nil
		dst.DHCPv4ClientOptionDefinition = nil
		dst.DHCPv4CustomClientOptionDefinition = nil
		dst.DHCPv4ServiceOptionDefinition = nil
		dst.DHCPv6ClientOptionDefinition = nil
		dst.DHCPv6ServiceOptionDefinition = nil
		dst.DNSOptionDefinition = nil
		dst.StartOfAuthorityDefinition = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetCollectionDeploymentOptionDefinitions200Response1DataInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetCollectionDeploymentOptionDefinitions200Response1DataInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetCollectionDeploymentOptionDefinitions200Response1DataInner) MarshalJSON() ([]byte, error) {
	if src.DHCPVendorOptionDefinition != nil {
		return json.Marshal(&src.DHCPVendorOptionDefinition)
	}

	if src.DHCPv4ClientOptionDefinition != nil {
		return json.Marshal(&src.DHCPv4ClientOptionDefinition)
	}

	if src.DHCPv4CustomClientOptionDefinition != nil {
		return json.Marshal(&src.DHCPv4CustomClientOptionDefinition)
	}

	if src.DHCPv4ServiceOptionDefinition != nil {
		return json.Marshal(&src.DHCPv4ServiceOptionDefinition)
	}

	if src.DHCPv6ClientOptionDefinition != nil {
		return json.Marshal(&src.DHCPv6ClientOptionDefinition)
	}

	if src.DHCPv6ServiceOptionDefinition != nil {
		return json.Marshal(&src.DHCPv6ServiceOptionDefinition)
	}

	if src.DNSOptionDefinition != nil {
		return json.Marshal(&src.DNSOptionDefinition)
	}

	if src.StartOfAuthorityDefinition != nil {
		return json.Marshal(&src.StartOfAuthorityDefinition)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetCollectionDeploymentOptionDefinitions200Response1DataInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DHCPVendorOptionDefinition != nil {
		return obj.DHCPVendorOptionDefinition
	}

	if obj.DHCPv4ClientOptionDefinition != nil {
		return obj.DHCPv4ClientOptionDefinition
	}

	if obj.DHCPv4CustomClientOptionDefinition != nil {
		return obj.DHCPv4CustomClientOptionDefinition
	}

	if obj.DHCPv4ServiceOptionDefinition != nil {
		return obj.DHCPv4ServiceOptionDefinition
	}

	if obj.DHCPv6ClientOptionDefinition != nil {
		return obj.DHCPv6ClientOptionDefinition
	}

	if obj.DHCPv6ServiceOptionDefinition != nil {
		return obj.DHCPv6ServiceOptionDefinition
	}

	if obj.DNSOptionDefinition != nil {
		return obj.DNSOptionDefinition
	}

	if obj.StartOfAuthorityDefinition != nil {
		return obj.StartOfAuthorityDefinition
	}

	// all schemas are nil
	return nil
}

type NullableGetCollectionDeploymentOptionDefinitions200Response1DataInner struct {
	value *GetCollectionDeploymentOptionDefinitions200Response1DataInner
	isSet bool
}

func (v NullableGetCollectionDeploymentOptionDefinitions200Response1DataInner) Get() *GetCollectionDeploymentOptionDefinitions200Response1DataInner {
	return v.value
}

func (v *NullableGetCollectionDeploymentOptionDefinitions200Response1DataInner) Set(val *GetCollectionDeploymentOptionDefinitions200Response1DataInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGetCollectionDeploymentOptionDefinitions200Response1DataInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGetCollectionDeploymentOptionDefinitions200Response1DataInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetCollectionDeploymentOptionDefinitions200Response1DataInner(val *GetCollectionDeploymentOptionDefinitions200Response1DataInner) *NullableGetCollectionDeploymentOptionDefinitions200Response1DataInner {
	return &NullableGetCollectionDeploymentOptionDefinitions200Response1DataInner{value: val, isSet: true}
}

func (v NullableGetCollectionDeploymentOptionDefinitions200Response1DataInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetCollectionDeploymentOptionDefinitions200Response1DataInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
BlueCat Address Manager 9.5 RESTful v2 API

The **BlueCat Address Manager 9.5 RESTful v2 API** is a new RESTful API for Address Manager that presents Address Manager objects as resources. Each resource has a unique endpoint, and related resources are grouped in collections. To fetch an individual resource, a `GET` request is sent to the resource's endpoint. To fetch all resources in a collection, a `GET` request is sent to the collection's endpoint.  The RESTful v2 API is [hypermedia driven](https://en.wikipedia.org/wiki/HATEOAS) and uses the [HAL](https://en.wikipedia.org/wiki/Hypertext_Application_Language) format for representing links. When navigating through the API, you can use those links to navigate to related resources or child resources of the requested endpoint. The API supports the following media types for most endpoints:  `application/hal+json`, `application/json`, and `text/csv`.  For authentication, the API supports both `Basic` and `Bearer` HTTP authentication schemes.  To get started, create a session and receive credentials for `Basic` authentication by sending a `POST` request to the [/sessions](#/Admin%20Resources/postSession) endpoint, with a message body containing the user's credentials:  ```{\"username\":\"apiuser\", \"password\":\"apipass\"}```  The response will contain an `apiToken` field that can be entered with the username in the Swagger UI **Authorize** dialog. The response will also contain a `basicAuthenticationCredentials` field containing a base64 encoding of the requester's username and API token delimited by a colon. This string can be injected directly into request `Authorization` headers in the following format:  ```Authorization: Basic YXBpOlQ0OExOT3VIRGhDcnVBNEo1bGFES3JuS3hTZC9QK3pjczZXTzBJMDY=```  For full details on API format and authentication methods, refer to the Address Manager RESTful v2 API Guide on the BlueCat Documentation Portal.

API version: 9.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gobam2

import (
	"encoding/json"
)

// checks if the NAPTRRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NAPTRRecord{}

// NAPTRRecord struct for NAPTRRecord
type NAPTRRecord struct {
	ResourceRecord
	// The resource type.
	Type *string `json:"type,omitempty"`
	// The order in which NAPTR records are to be processed.
	Order *int32 `json:"order,omitempty"`
	// The preference assigned to the NAPTR record. The preference is referenced when NAPTR records have the same order.
	Preference *int32 `json:"preference,omitempty"`
	// The service or protocol to which the NAPTR record resolves.
	Service *string `json:"service,omitempty"`
	// The regular expression used to transform client data.
	RegularExpression *string `json:"regularExpression,omitempty" validate:"regexp=^.*\\\\S+.*$"`
	// The replacement string used to replace client data.
	Replacement *string `json:"replacement,omitempty"`
	// The control flags in the NAPTR record. Control flags influence how the replacement functions are performed when processing the record.
	Flags *string `json:"flags,omitempty"`
}

// NewNAPTRRecord instantiates a new NAPTRRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNAPTRRecord() *NAPTRRecord {
	this := NAPTRRecord{}
	return &this
}

// NewNAPTRRecordWithDefaults instantiates a new NAPTRRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNAPTRRecordWithDefaults() *NAPTRRecord {
	this := NAPTRRecord{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *NAPTRRecord) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NAPTRRecord) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *NAPTRRecord) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *NAPTRRecord) SetType(v string) {
	o.Type = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *NAPTRRecord) GetOrder() int32 {
	if o == nil || IsNil(o.Order) {
		var ret int32
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NAPTRRecord) GetOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *NAPTRRecord) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given int32 and assigns it to the Order field.
func (o *NAPTRRecord) SetOrder(v int32) {
	o.Order = &v
}

// GetPreference returns the Preference field value if set, zero value otherwise.
func (o *NAPTRRecord) GetPreference() int32 {
	if o == nil || IsNil(o.Preference) {
		var ret int32
		return ret
	}
	return *o.Preference
}

// GetPreferenceOk returns a tuple with the Preference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NAPTRRecord) GetPreferenceOk() (*int32, bool) {
	if o == nil || IsNil(o.Preference) {
		return nil, false
	}
	return o.Preference, true
}

// HasPreference returns a boolean if a field has been set.
func (o *NAPTRRecord) HasPreference() bool {
	if o != nil && !IsNil(o.Preference) {
		return true
	}

	return false
}

// SetPreference gets a reference to the given int32 and assigns it to the Preference field.
func (o *NAPTRRecord) SetPreference(v int32) {
	o.Preference = &v
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *NAPTRRecord) GetService() string {
	if o == nil || IsNil(o.Service) {
		var ret string
		return ret
	}
	return *o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NAPTRRecord) GetServiceOk() (*string, bool) {
	if o == nil || IsNil(o.Service) {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *NAPTRRecord) HasService() bool {
	if o != nil && !IsNil(o.Service) {
		return true
	}

	return false
}

// SetService gets a reference to the given string and assigns it to the Service field.
func (o *NAPTRRecord) SetService(v string) {
	o.Service = &v
}

// GetRegularExpression returns the RegularExpression field value if set, zero value otherwise.
func (o *NAPTRRecord) GetRegularExpression() string {
	if o == nil || IsNil(o.RegularExpression) {
		var ret string
		return ret
	}
	return *o.RegularExpression
}

// GetRegularExpressionOk returns a tuple with the RegularExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NAPTRRecord) GetRegularExpressionOk() (*string, bool) {
	if o == nil || IsNil(o.RegularExpression) {
		return nil, false
	}
	return o.RegularExpression, true
}

// HasRegularExpression returns a boolean if a field has been set.
func (o *NAPTRRecord) HasRegularExpression() bool {
	if o != nil && !IsNil(o.RegularExpression) {
		return true
	}

	return false
}

// SetRegularExpression gets a reference to the given string and assigns it to the RegularExpression field.
func (o *NAPTRRecord) SetRegularExpression(v string) {
	o.RegularExpression = &v
}

// GetReplacement returns the Replacement field value if set, zero value otherwise.
func (o *NAPTRRecord) GetReplacement() string {
	if o == nil || IsNil(o.Replacement) {
		var ret string
		return ret
	}
	return *o.Replacement
}

// GetReplacementOk returns a tuple with the Replacement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NAPTRRecord) GetReplacementOk() (*string, bool) {
	if o == nil || IsNil(o.Replacement) {
		return nil, false
	}
	return o.Replacement, true
}

// HasReplacement returns a boolean if a field has been set.
func (o *NAPTRRecord) HasReplacement() bool {
	if o != nil && !IsNil(o.Replacement) {
		return true
	}

	return false
}

// SetReplacement gets a reference to the given string and assigns it to the Replacement field.
func (o *NAPTRRecord) SetReplacement(v string) {
	o.Replacement = &v
}

// GetFlags returns the Flags field value if set, zero value otherwise.
func (o *NAPTRRecord) GetFlags() string {
	if o == nil || IsNil(o.Flags) {
		var ret string
		return ret
	}
	return *o.Flags
}

// GetFlagsOk returns a tuple with the Flags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NAPTRRecord) GetFlagsOk() (*string, bool) {
	if o == nil || IsNil(o.Flags) {
		return nil, false
	}
	return o.Flags, true
}

// HasFlags returns a boolean if a field has been set.
func (o *NAPTRRecord) HasFlags() bool {
	if o != nil && !IsNil(o.Flags) {
		return true
	}

	return false
}

// SetFlags gets a reference to the given string and assigns it to the Flags field.
func (o *NAPTRRecord) SetFlags(v string) {
	o.Flags = &v
}

func (o NAPTRRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NAPTRRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	if !IsNil(o.Preference) {
		toSerialize["preference"] = o.Preference
	}
	if !IsNil(o.Service) {
		toSerialize["service"] = o.Service
	}
	if !IsNil(o.RegularExpression) {
		toSerialize["regularExpression"] = o.RegularExpression
	}
	if !IsNil(o.Replacement) {
		toSerialize["replacement"] = o.Replacement
	}
	if !IsNil(o.Flags) {
		toSerialize["flags"] = o.Flags
	}
	return toSerialize, nil
}

type NullableNAPTRRecord struct {
	value *NAPTRRecord
	isSet bool
}

func (v NullableNAPTRRecord) Get() *NAPTRRecord {
	return v.value
}

func (v *NullableNAPTRRecord) Set(val *NAPTRRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableNAPTRRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableNAPTRRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNAPTRRecord(val *NAPTRRecord) *NullableNAPTRRecord {
	return &NullableNAPTRRecord{value: val, isSet: true}
}

func (v NullableNAPTRRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNAPTRRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



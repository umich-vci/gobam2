/*
BlueCat Address Manager 9.5 RESTful v2 API

The **BlueCat Address Manager 9.5 RESTful v2 API** is a new RESTful API for Address Manager that presents Address Manager objects as resources. Each resource has a unique endpoint, and related resources are grouped in collections. To fetch an individual resource, a `GET` request is sent to the resource's endpoint. To fetch all resources in a collection, a `GET` request is sent to the collection's endpoint.  The RESTful v2 API is [hypermedia driven](https://en.wikipedia.org/wiki/HATEOAS) and uses the [HAL](https://en.wikipedia.org/wiki/Hypertext_Application_Language) format for representing links. When navigating through the API, you can use those links to navigate to related resources or child resources of the requested endpoint. The API supports the following media types for most endpoints:  `application/hal+json`, `application/json`, and `text/csv`.  For authentication, the API supports both `Basic` and `Bearer` HTTP authentication schemes.  To get started, create a session and receive credentials for `Basic` authentication by sending a `POST` request to the [/sessions](#/Admin%20Resources/postSession) endpoint, with a message body containing the user's credentials:  ```{\"username\":\"apiuser\", \"password\":\"apipass\"}```  The response will contain an `apiToken` field that can be entered with the username in the Swagger UI **Authorize** dialog. The response will also contain a `basicAuthenticationCredentials` field containing a base64 encoding of the requester's username and API token delimited by a colon. This string can be injected directly into request `Authorization` headers in the following format:  ```Authorization: Basic YXBpOlQ0OExOT3VIRGhDcnVBNEo1bGFES3JuS3hTZC9QK3pjczZXTzBJMDY=```  For full details on API format and authentication methods, refer to the Address Manager RESTful v2 API Guide on the BlueCat Documentation Portal.

API version: 9.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gobam2

import (
	"encoding/json"
)

// checks if the GlobalSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GlobalSettings{}

// GlobalSettings struct for GlobalSettings
type GlobalSettings struct {
	Settings
	// The resource type.
	Type *string `json:"type,omitempty"`
	// Indicates whether users must provide a change control comment when creating, editing, or deleting resources.
	MandatoryCommentsEnabled *bool `json:"mandatoryCommentsEnabled,omitempty"`
	// Indicates whether the Address Manager UI Quick Actions widget will automatically provide the subsequent IPv4 address when adding host records.
	RememberLastAddressEnabled *bool `json:"rememberLastAddressEnabled,omitempty"`
	// The maximum time period of user inactivity before a session is terminated.
	SessionTimeout *string `json:"sessionTimeout,omitempty"`
	// Indicates whether a disclaimer will display on the Address Manager UI login page with the contents of disclaimerText.
	DisclaimerEnabled *bool `json:"disclaimerEnabled,omitempty"`
	// The disclaimer text or HTML for display on the Address Manager UI login page. If adding or editing disclaimer HTML through JSON, ensure that reserved characters are escaped.
	DisclaimerText *string `json:"disclaimerText,omitempty" validate:"regexp=^.*\\\\S+.*$"`
	// Indicates whether users can set a custom reverse zone name format in DNS deployment options.
	CustomReverseZoneFormatsAllowed *bool `json:"customReverseZoneFormatsAllowed,omitempty"`
}

// NewGlobalSettings instantiates a new GlobalSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGlobalSettings() *GlobalSettings {
	this := GlobalSettings{}
	return &this
}

// NewGlobalSettingsWithDefaults instantiates a new GlobalSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGlobalSettingsWithDefaults() *GlobalSettings {
	this := GlobalSettings{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GlobalSettings) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalSettings) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GlobalSettings) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GlobalSettings) SetType(v string) {
	o.Type = &v
}

// GetMandatoryCommentsEnabled returns the MandatoryCommentsEnabled field value if set, zero value otherwise.
func (o *GlobalSettings) GetMandatoryCommentsEnabled() bool {
	if o == nil || IsNil(o.MandatoryCommentsEnabled) {
		var ret bool
		return ret
	}
	return *o.MandatoryCommentsEnabled
}

// GetMandatoryCommentsEnabledOk returns a tuple with the MandatoryCommentsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalSettings) GetMandatoryCommentsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.MandatoryCommentsEnabled) {
		return nil, false
	}
	return o.MandatoryCommentsEnabled, true
}

// HasMandatoryCommentsEnabled returns a boolean if a field has been set.
func (o *GlobalSettings) HasMandatoryCommentsEnabled() bool {
	if o != nil && !IsNil(o.MandatoryCommentsEnabled) {
		return true
	}

	return false
}

// SetMandatoryCommentsEnabled gets a reference to the given bool and assigns it to the MandatoryCommentsEnabled field.
func (o *GlobalSettings) SetMandatoryCommentsEnabled(v bool) {
	o.MandatoryCommentsEnabled = &v
}

// GetRememberLastAddressEnabled returns the RememberLastAddressEnabled field value if set, zero value otherwise.
func (o *GlobalSettings) GetRememberLastAddressEnabled() bool {
	if o == nil || IsNil(o.RememberLastAddressEnabled) {
		var ret bool
		return ret
	}
	return *o.RememberLastAddressEnabled
}

// GetRememberLastAddressEnabledOk returns a tuple with the RememberLastAddressEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalSettings) GetRememberLastAddressEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.RememberLastAddressEnabled) {
		return nil, false
	}
	return o.RememberLastAddressEnabled, true
}

// HasRememberLastAddressEnabled returns a boolean if a field has been set.
func (o *GlobalSettings) HasRememberLastAddressEnabled() bool {
	if o != nil && !IsNil(o.RememberLastAddressEnabled) {
		return true
	}

	return false
}

// SetRememberLastAddressEnabled gets a reference to the given bool and assigns it to the RememberLastAddressEnabled field.
func (o *GlobalSettings) SetRememberLastAddressEnabled(v bool) {
	o.RememberLastAddressEnabled = &v
}

// GetSessionTimeout returns the SessionTimeout field value if set, zero value otherwise.
func (o *GlobalSettings) GetSessionTimeout() string {
	if o == nil || IsNil(o.SessionTimeout) {
		var ret string
		return ret
	}
	return *o.SessionTimeout
}

// GetSessionTimeoutOk returns a tuple with the SessionTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalSettings) GetSessionTimeoutOk() (*string, bool) {
	if o == nil || IsNil(o.SessionTimeout) {
		return nil, false
	}
	return o.SessionTimeout, true
}

// HasSessionTimeout returns a boolean if a field has been set.
func (o *GlobalSettings) HasSessionTimeout() bool {
	if o != nil && !IsNil(o.SessionTimeout) {
		return true
	}

	return false
}

// SetSessionTimeout gets a reference to the given string and assigns it to the SessionTimeout field.
func (o *GlobalSettings) SetSessionTimeout(v string) {
	o.SessionTimeout = &v
}

// GetDisclaimerEnabled returns the DisclaimerEnabled field value if set, zero value otherwise.
func (o *GlobalSettings) GetDisclaimerEnabled() bool {
	if o == nil || IsNil(o.DisclaimerEnabled) {
		var ret bool
		return ret
	}
	return *o.DisclaimerEnabled
}

// GetDisclaimerEnabledOk returns a tuple with the DisclaimerEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalSettings) GetDisclaimerEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DisclaimerEnabled) {
		return nil, false
	}
	return o.DisclaimerEnabled, true
}

// HasDisclaimerEnabled returns a boolean if a field has been set.
func (o *GlobalSettings) HasDisclaimerEnabled() bool {
	if o != nil && !IsNil(o.DisclaimerEnabled) {
		return true
	}

	return false
}

// SetDisclaimerEnabled gets a reference to the given bool and assigns it to the DisclaimerEnabled field.
func (o *GlobalSettings) SetDisclaimerEnabled(v bool) {
	o.DisclaimerEnabled = &v
}

// GetDisclaimerText returns the DisclaimerText field value if set, zero value otherwise.
func (o *GlobalSettings) GetDisclaimerText() string {
	if o == nil || IsNil(o.DisclaimerText) {
		var ret string
		return ret
	}
	return *o.DisclaimerText
}

// GetDisclaimerTextOk returns a tuple with the DisclaimerText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalSettings) GetDisclaimerTextOk() (*string, bool) {
	if o == nil || IsNil(o.DisclaimerText) {
		return nil, false
	}
	return o.DisclaimerText, true
}

// HasDisclaimerText returns a boolean if a field has been set.
func (o *GlobalSettings) HasDisclaimerText() bool {
	if o != nil && !IsNil(o.DisclaimerText) {
		return true
	}

	return false
}

// SetDisclaimerText gets a reference to the given string and assigns it to the DisclaimerText field.
func (o *GlobalSettings) SetDisclaimerText(v string) {
	o.DisclaimerText = &v
}

// GetCustomReverseZoneFormatsAllowed returns the CustomReverseZoneFormatsAllowed field value if set, zero value otherwise.
func (o *GlobalSettings) GetCustomReverseZoneFormatsAllowed() bool {
	if o == nil || IsNil(o.CustomReverseZoneFormatsAllowed) {
		var ret bool
		return ret
	}
	return *o.CustomReverseZoneFormatsAllowed
}

// GetCustomReverseZoneFormatsAllowedOk returns a tuple with the CustomReverseZoneFormatsAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalSettings) GetCustomReverseZoneFormatsAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.CustomReverseZoneFormatsAllowed) {
		return nil, false
	}
	return o.CustomReverseZoneFormatsAllowed, true
}

// HasCustomReverseZoneFormatsAllowed returns a boolean if a field has been set.
func (o *GlobalSettings) HasCustomReverseZoneFormatsAllowed() bool {
	if o != nil && !IsNil(o.CustomReverseZoneFormatsAllowed) {
		return true
	}

	return false
}

// SetCustomReverseZoneFormatsAllowed gets a reference to the given bool and assigns it to the CustomReverseZoneFormatsAllowed field.
func (o *GlobalSettings) SetCustomReverseZoneFormatsAllowed(v bool) {
	o.CustomReverseZoneFormatsAllowed = &v
}

func (o GlobalSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GlobalSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.MandatoryCommentsEnabled) {
		toSerialize["mandatoryCommentsEnabled"] = o.MandatoryCommentsEnabled
	}
	if !IsNil(o.RememberLastAddressEnabled) {
		toSerialize["rememberLastAddressEnabled"] = o.RememberLastAddressEnabled
	}
	if !IsNil(o.SessionTimeout) {
		toSerialize["sessionTimeout"] = o.SessionTimeout
	}
	if !IsNil(o.DisclaimerEnabled) {
		toSerialize["disclaimerEnabled"] = o.DisclaimerEnabled
	}
	if !IsNil(o.DisclaimerText) {
		toSerialize["disclaimerText"] = o.DisclaimerText
	}
	if !IsNil(o.CustomReverseZoneFormatsAllowed) {
		toSerialize["customReverseZoneFormatsAllowed"] = o.CustomReverseZoneFormatsAllowed
	}
	return toSerialize, nil
}

type NullableGlobalSettings struct {
	value *GlobalSettings
	isSet bool
}

func (v NullableGlobalSettings) Get() *GlobalSettings {
	return v.value
}

func (v *NullableGlobalSettings) Set(val *GlobalSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableGlobalSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableGlobalSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlobalSettings(val *GlobalSettings) *NullableGlobalSettings {
	return &NullableGlobalSettings{value: val, isSet: true}
}

func (v NullableGlobalSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlobalSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
BlueCat Address Manager 9.5 RESTful v2 API

The **BlueCat Address Manager 9.5 RESTful v2 API** is a new RESTful API for Address Manager that presents Address Manager objects as resources. Each resource has a unique endpoint, and related resources are grouped in collections. To fetch an individual resource, a `GET` request is sent to the resource's endpoint. To fetch all resources in a collection, a `GET` request is sent to the collection's endpoint.  The RESTful v2 API is [hypermedia driven](https://en.wikipedia.org/wiki/HATEOAS) and uses the [HAL](https://en.wikipedia.org/wiki/Hypertext_Application_Language) format for representing links. When navigating through the API, you can use those links to navigate to related resources or child resources of the requested endpoint. The API supports the following media types for most endpoints:  `application/hal+json`, `application/json`, and `text/csv`.  For authentication, the API supports both `Basic` and `Bearer` HTTP authentication schemes.  To get started, create a session and receive credentials for `Basic` authentication by sending a `POST` request to the [/sessions](#/Admin%20Resources/postSession) endpoint, with a message body containing the user's credentials:  ```{\"username\":\"apiuser\", \"password\":\"apipass\"}```  The response will contain an `apiToken` field that can be entered with the username in the Swagger UI **Authorize** dialog. The response will also contain a `basicAuthenticationCredentials` field containing a base64 encoding of the requester's username and API token delimited by a colon. This string can be injected directly into request `Authorization` headers in the following format:  ```Authorization: Basic YXBpOlQ0OExOT3VIRGhDcnVBNEo1bGFES3JuS3hTZC9QK3pjczZXTzBJMDY=```  For full details on API format and authentication methods, refer to the Address Manager RESTful v2 API Guide on the BlueCat Documentation Portal.

API version: 9.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gobam2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DNSSECSigningPolicyPostRequestBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DNSSECSigningPolicyPostRequestBody{}

// DNSSECSigningPolicyPostRequestBody struct for DNSSECSigningPolicyPostRequestBody
type DNSSECSigningPolicyPostRequestBody struct {
	// The resource identifier.
	Id *int64 `json:"id,omitempty"`
	// The resource type.
	Type *string `json:"type,omitempty"`
	// The name of the resource.
	Name string `json:"name" validate:"regexp=^.*\\\\S+.*$"`
	// User-defined fields set for the resource.
	UserDefinedFields *map[string]string `json:"userDefinedFields,omitempty"`
	// The system that created the DNSSEC signing key.
	KeyProvider string `json:"keyProvider"`
	// The algorithm used for the Delegation Signer (DS) record.
	SignatureDigestAlgorithm string `json:"signatureDigestAlgorithm"`
	// The duration for which the RRSIG resource record is valid.
	SignatureValidityPeriod string `json:"signatureValidityPeriod"`
	// The duration before the end of the signature validity period at which BIND resigns the zone.
	SignatureResigningPeriod string `json:"signatureResigningPeriod"`
	// The algorithm for the Zone Signing Key (ZSK).
	ZoneSigningKeyAlgorithm string `json:"zoneSigningKeyAlgorithm"`
	// The length of the zone signing key in bits.
	ZoneSigningKeyLength int32 `json:"zoneSigningKeyLength"`
	// The overridden TTL value of the zone signing key.
	ZoneSigningKeyOverrideTtl *string `json:"zoneSigningKeyOverrideTtl,omitempty"`
	// The duration for which the zone signing key is valid.
	ZoneSigningKeyValidityPeriod string `json:"zoneSigningKeyValidityPeriod"`
	// The duration before the end of the validity period at which a new key is generated for key rollover.
	ZoneSigningKeyOverlapPeriod string `json:"zoneSigningKeyOverlapPeriod"`
	// The method to make the new zone signing key available when the key rolls over.
	ZoneSigningKeyRolloverMethod string `json:"zoneSigningKeyRolloverMethod"`
	// The duration before the end of the key validity period. During this time, the resource records in the zone are simultaneously signed by the new key and unsigned by the old key.
	ZoneSigningKeySigningPeriod *string `json:"zoneSigningKeySigningPeriod,omitempty"`
	// The zone signing key protection type when Enstrust HSM is configured as the key provider.
	ZoneSigningKeyProtectionType *string `json:"zoneSigningKeyProtectionType,omitempty"`
	// The algorithm for the key signing key (KSK).
	KeySigningKeyAlgorithm string `json:"keySigningKeyAlgorithm"`
	// The length of the key signing key in bits.
	KeySigningKeyLength int32 `json:"keySigningKeyLength"`
	// The overridden TTL value of the key signing key.
	KeySigningKeyOverrideTtl *string `json:"keySigningKeyOverrideTtl,omitempty"`
	// The duration for which the key signing key is valid.
	KeySigningKeyValidityPeriod string `json:"keySigningKeyValidityPeriod"`
	// The duration before the end of the validity period at which a new key is generated for key rollover.
	KeySigningKeyOverlapPeriod string `json:"keySigningKeyOverlapPeriod"`
	// The method to make the new key signing key available when the key rolls over.
	KeySigningKeyRolloverMethod string `json:"keySigningKeyRolloverMethod"`
	// The duration before the end of the key validity period. During this time, the resource records in the keys are simultaneously signed by the new key and unsigned by the old key.
	KeySigningKeySigningPeriod *string `json:"keySigningKeySigningPeriod,omitempty"`
	// The key signing key protection type when Enstrust HSM is configured as the key provider.
	KeySigningKeyProtectionType *string `json:"keySigningKeyProtectionType,omitempty"`
}

type _DNSSECSigningPolicyPostRequestBody DNSSECSigningPolicyPostRequestBody

// NewDNSSECSigningPolicyPostRequestBody instantiates a new DNSSECSigningPolicyPostRequestBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDNSSECSigningPolicyPostRequestBody(name string, keyProvider string, signatureDigestAlgorithm string, signatureValidityPeriod string, signatureResigningPeriod string, zoneSigningKeyAlgorithm string, zoneSigningKeyLength int32, zoneSigningKeyValidityPeriod string, zoneSigningKeyOverlapPeriod string, zoneSigningKeyRolloverMethod string, keySigningKeyAlgorithm string, keySigningKeyLength int32, keySigningKeyValidityPeriod string, keySigningKeyOverlapPeriod string, keySigningKeyRolloverMethod string) *DNSSECSigningPolicyPostRequestBody {
	this := DNSSECSigningPolicyPostRequestBody{}
	this.Name = name
	this.KeyProvider = keyProvider
	this.SignatureDigestAlgorithm = signatureDigestAlgorithm
	this.SignatureValidityPeriod = signatureValidityPeriod
	this.SignatureResigningPeriod = signatureResigningPeriod
	this.ZoneSigningKeyAlgorithm = zoneSigningKeyAlgorithm
	this.ZoneSigningKeyLength = zoneSigningKeyLength
	this.ZoneSigningKeyValidityPeriod = zoneSigningKeyValidityPeriod
	this.ZoneSigningKeyOverlapPeriod = zoneSigningKeyOverlapPeriod
	this.ZoneSigningKeyRolloverMethod = zoneSigningKeyRolloverMethod
	this.KeySigningKeyAlgorithm = keySigningKeyAlgorithm
	this.KeySigningKeyLength = keySigningKeyLength
	this.KeySigningKeyValidityPeriod = keySigningKeyValidityPeriod
	this.KeySigningKeyOverlapPeriod = keySigningKeyOverlapPeriod
	this.KeySigningKeyRolloverMethod = keySigningKeyRolloverMethod
	return &this
}

// NewDNSSECSigningPolicyPostRequestBodyWithDefaults instantiates a new DNSSECSigningPolicyPostRequestBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDNSSECSigningPolicyPostRequestBodyWithDefaults() *DNSSECSigningPolicyPostRequestBody {
	this := DNSSECSigningPolicyPostRequestBody{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DNSSECSigningPolicyPostRequestBody) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSSECSigningPolicyPostRequestBody) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DNSSECSigningPolicyPostRequestBody) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DNSSECSigningPolicyPostRequestBody) SetId(v int64) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DNSSECSigningPolicyPostRequestBody) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSSECSigningPolicyPostRequestBody) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DNSSECSigningPolicyPostRequestBody) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DNSSECSigningPolicyPostRequestBody) SetType(v string) {
	o.Type = &v
}

// GetName returns the Name field value
func (o *DNSSECSigningPolicyPostRequestBody) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DNSSECSigningPolicyPostRequestBody) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DNSSECSigningPolicyPostRequestBody) SetName(v string) {
	o.Name = v
}

// GetUserDefinedFields returns the UserDefinedFields field value if set, zero value otherwise.
func (o *DNSSECSigningPolicyPostRequestBody) GetUserDefinedFields() map[string]string {
	if o == nil || IsNil(o.UserDefinedFields) {
		var ret map[string]string
		return ret
	}
	return *o.UserDefinedFields
}

// GetUserDefinedFieldsOk returns a tuple with the UserDefinedFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSSECSigningPolicyPostRequestBody) GetUserDefinedFieldsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.UserDefinedFields) {
		return nil, false
	}
	return o.UserDefinedFields, true
}

// HasUserDefinedFields returns a boolean if a field has been set.
func (o *DNSSECSigningPolicyPostRequestBody) HasUserDefinedFields() bool {
	if o != nil && !IsNil(o.UserDefinedFields) {
		return true
	}

	return false
}

// SetUserDefinedFields gets a reference to the given map[string]string and assigns it to the UserDefinedFields field.
func (o *DNSSECSigningPolicyPostRequestBody) SetUserDefinedFields(v map[string]string) {
	o.UserDefinedFields = &v
}

// GetKeyProvider returns the KeyProvider field value
func (o *DNSSECSigningPolicyPostRequestBody) GetKeyProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeyProvider
}

// GetKeyProviderOk returns a tuple with the KeyProvider field value
// and a boolean to check if the value has been set.
func (o *DNSSECSigningPolicyPostRequestBody) GetKeyProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyProvider, true
}

// SetKeyProvider sets field value
func (o *DNSSECSigningPolicyPostRequestBody) SetKeyProvider(v string) {
	o.KeyProvider = v
}

// GetSignatureDigestAlgorithm returns the SignatureDigestAlgorithm field value
func (o *DNSSECSigningPolicyPostRequestBody) GetSignatureDigestAlgorithm() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SignatureDigestAlgorithm
}

// GetSignatureDigestAlgorithmOk returns a tuple with the SignatureDigestAlgorithm field value
// and a boolean to check if the value has been set.
func (o *DNSSECSigningPolicyPostRequestBody) GetSignatureDigestAlgorithmOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SignatureDigestAlgorithm, true
}

// SetSignatureDigestAlgorithm sets field value
func (o *DNSSECSigningPolicyPostRequestBody) SetSignatureDigestAlgorithm(v string) {
	o.SignatureDigestAlgorithm = v
}

// GetSignatureValidityPeriod returns the SignatureValidityPeriod field value
func (o *DNSSECSigningPolicyPostRequestBody) GetSignatureValidityPeriod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SignatureValidityPeriod
}

// GetSignatureValidityPeriodOk returns a tuple with the SignatureValidityPeriod field value
// and a boolean to check if the value has been set.
func (o *DNSSECSigningPolicyPostRequestBody) GetSignatureValidityPeriodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SignatureValidityPeriod, true
}

// SetSignatureValidityPeriod sets field value
func (o *DNSSECSigningPolicyPostRequestBody) SetSignatureValidityPeriod(v string) {
	o.SignatureValidityPeriod = v
}

// GetSignatureResigningPeriod returns the SignatureResigningPeriod field value
func (o *DNSSECSigningPolicyPostRequestBody) GetSignatureResigningPeriod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SignatureResigningPeriod
}

// GetSignatureResigningPeriodOk returns a tuple with the SignatureResigningPeriod field value
// and a boolean to check if the value has been set.
func (o *DNSSECSigningPolicyPostRequestBody) GetSignatureResigningPeriodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SignatureResigningPeriod, true
}

// SetSignatureResigningPeriod sets field value
func (o *DNSSECSigningPolicyPostRequestBody) SetSignatureResigningPeriod(v string) {
	o.SignatureResigningPeriod = v
}

// GetZoneSigningKeyAlgorithm returns the ZoneSigningKeyAlgorithm field value
func (o *DNSSECSigningPolicyPostRequestBody) GetZoneSigningKeyAlgorithm() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ZoneSigningKeyAlgorithm
}

// GetZoneSigningKeyAlgorithmOk returns a tuple with the ZoneSigningKeyAlgorithm field value
// and a boolean to check if the value has been set.
func (o *DNSSECSigningPolicyPostRequestBody) GetZoneSigningKeyAlgorithmOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZoneSigningKeyAlgorithm, true
}

// SetZoneSigningKeyAlgorithm sets field value
func (o *DNSSECSigningPolicyPostRequestBody) SetZoneSigningKeyAlgorithm(v string) {
	o.ZoneSigningKeyAlgorithm = v
}

// GetZoneSigningKeyLength returns the ZoneSigningKeyLength field value
func (o *DNSSECSigningPolicyPostRequestBody) GetZoneSigningKeyLength() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ZoneSigningKeyLength
}

// GetZoneSigningKeyLengthOk returns a tuple with the ZoneSigningKeyLength field value
// and a boolean to check if the value has been set.
func (o *DNSSECSigningPolicyPostRequestBody) GetZoneSigningKeyLengthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZoneSigningKeyLength, true
}

// SetZoneSigningKeyLength sets field value
func (o *DNSSECSigningPolicyPostRequestBody) SetZoneSigningKeyLength(v int32) {
	o.ZoneSigningKeyLength = v
}

// GetZoneSigningKeyOverrideTtl returns the ZoneSigningKeyOverrideTtl field value if set, zero value otherwise.
func (o *DNSSECSigningPolicyPostRequestBody) GetZoneSigningKeyOverrideTtl() string {
	if o == nil || IsNil(o.ZoneSigningKeyOverrideTtl) {
		var ret string
		return ret
	}
	return *o.ZoneSigningKeyOverrideTtl
}

// GetZoneSigningKeyOverrideTtlOk returns a tuple with the ZoneSigningKeyOverrideTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSSECSigningPolicyPostRequestBody) GetZoneSigningKeyOverrideTtlOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneSigningKeyOverrideTtl) {
		return nil, false
	}
	return o.ZoneSigningKeyOverrideTtl, true
}

// HasZoneSigningKeyOverrideTtl returns a boolean if a field has been set.
func (o *DNSSECSigningPolicyPostRequestBody) HasZoneSigningKeyOverrideTtl() bool {
	if o != nil && !IsNil(o.ZoneSigningKeyOverrideTtl) {
		return true
	}

	return false
}

// SetZoneSigningKeyOverrideTtl gets a reference to the given string and assigns it to the ZoneSigningKeyOverrideTtl field.
func (o *DNSSECSigningPolicyPostRequestBody) SetZoneSigningKeyOverrideTtl(v string) {
	o.ZoneSigningKeyOverrideTtl = &v
}

// GetZoneSigningKeyValidityPeriod returns the ZoneSigningKeyValidityPeriod field value
func (o *DNSSECSigningPolicyPostRequestBody) GetZoneSigningKeyValidityPeriod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ZoneSigningKeyValidityPeriod
}

// GetZoneSigningKeyValidityPeriodOk returns a tuple with the ZoneSigningKeyValidityPeriod field value
// and a boolean to check if the value has been set.
func (o *DNSSECSigningPolicyPostRequestBody) GetZoneSigningKeyValidityPeriodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZoneSigningKeyValidityPeriod, true
}

// SetZoneSigningKeyValidityPeriod sets field value
func (o *DNSSECSigningPolicyPostRequestBody) SetZoneSigningKeyValidityPeriod(v string) {
	o.ZoneSigningKeyValidityPeriod = v
}

// GetZoneSigningKeyOverlapPeriod returns the ZoneSigningKeyOverlapPeriod field value
func (o *DNSSECSigningPolicyPostRequestBody) GetZoneSigningKeyOverlapPeriod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ZoneSigningKeyOverlapPeriod
}

// GetZoneSigningKeyOverlapPeriodOk returns a tuple with the ZoneSigningKeyOverlapPeriod field value
// and a boolean to check if the value has been set.
func (o *DNSSECSigningPolicyPostRequestBody) GetZoneSigningKeyOverlapPeriodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZoneSigningKeyOverlapPeriod, true
}

// SetZoneSigningKeyOverlapPeriod sets field value
func (o *DNSSECSigningPolicyPostRequestBody) SetZoneSigningKeyOverlapPeriod(v string) {
	o.ZoneSigningKeyOverlapPeriod = v
}

// GetZoneSigningKeyRolloverMethod returns the ZoneSigningKeyRolloverMethod field value
func (o *DNSSECSigningPolicyPostRequestBody) GetZoneSigningKeyRolloverMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ZoneSigningKeyRolloverMethod
}

// GetZoneSigningKeyRolloverMethodOk returns a tuple with the ZoneSigningKeyRolloverMethod field value
// and a boolean to check if the value has been set.
func (o *DNSSECSigningPolicyPostRequestBody) GetZoneSigningKeyRolloverMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZoneSigningKeyRolloverMethod, true
}

// SetZoneSigningKeyRolloverMethod sets field value
func (o *DNSSECSigningPolicyPostRequestBody) SetZoneSigningKeyRolloverMethod(v string) {
	o.ZoneSigningKeyRolloverMethod = v
}

// GetZoneSigningKeySigningPeriod returns the ZoneSigningKeySigningPeriod field value if set, zero value otherwise.
func (o *DNSSECSigningPolicyPostRequestBody) GetZoneSigningKeySigningPeriod() string {
	if o == nil || IsNil(o.ZoneSigningKeySigningPeriod) {
		var ret string
		return ret
	}
	return *o.ZoneSigningKeySigningPeriod
}

// GetZoneSigningKeySigningPeriodOk returns a tuple with the ZoneSigningKeySigningPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSSECSigningPolicyPostRequestBody) GetZoneSigningKeySigningPeriodOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneSigningKeySigningPeriod) {
		return nil, false
	}
	return o.ZoneSigningKeySigningPeriod, true
}

// HasZoneSigningKeySigningPeriod returns a boolean if a field has been set.
func (o *DNSSECSigningPolicyPostRequestBody) HasZoneSigningKeySigningPeriod() bool {
	if o != nil && !IsNil(o.ZoneSigningKeySigningPeriod) {
		return true
	}

	return false
}

// SetZoneSigningKeySigningPeriod gets a reference to the given string and assigns it to the ZoneSigningKeySigningPeriod field.
func (o *DNSSECSigningPolicyPostRequestBody) SetZoneSigningKeySigningPeriod(v string) {
	o.ZoneSigningKeySigningPeriod = &v
}

// GetZoneSigningKeyProtectionType returns the ZoneSigningKeyProtectionType field value if set, zero value otherwise.
func (o *DNSSECSigningPolicyPostRequestBody) GetZoneSigningKeyProtectionType() string {
	if o == nil || IsNil(o.ZoneSigningKeyProtectionType) {
		var ret string
		return ret
	}
	return *o.ZoneSigningKeyProtectionType
}

// GetZoneSigningKeyProtectionTypeOk returns a tuple with the ZoneSigningKeyProtectionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSSECSigningPolicyPostRequestBody) GetZoneSigningKeyProtectionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneSigningKeyProtectionType) {
		return nil, false
	}
	return o.ZoneSigningKeyProtectionType, true
}

// HasZoneSigningKeyProtectionType returns a boolean if a field has been set.
func (o *DNSSECSigningPolicyPostRequestBody) HasZoneSigningKeyProtectionType() bool {
	if o != nil && !IsNil(o.ZoneSigningKeyProtectionType) {
		return true
	}

	return false
}

// SetZoneSigningKeyProtectionType gets a reference to the given string and assigns it to the ZoneSigningKeyProtectionType field.
func (o *DNSSECSigningPolicyPostRequestBody) SetZoneSigningKeyProtectionType(v string) {
	o.ZoneSigningKeyProtectionType = &v
}

// GetKeySigningKeyAlgorithm returns the KeySigningKeyAlgorithm field value
func (o *DNSSECSigningPolicyPostRequestBody) GetKeySigningKeyAlgorithm() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeySigningKeyAlgorithm
}

// GetKeySigningKeyAlgorithmOk returns a tuple with the KeySigningKeyAlgorithm field value
// and a boolean to check if the value has been set.
func (o *DNSSECSigningPolicyPostRequestBody) GetKeySigningKeyAlgorithmOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeySigningKeyAlgorithm, true
}

// SetKeySigningKeyAlgorithm sets field value
func (o *DNSSECSigningPolicyPostRequestBody) SetKeySigningKeyAlgorithm(v string) {
	o.KeySigningKeyAlgorithm = v
}

// GetKeySigningKeyLength returns the KeySigningKeyLength field value
func (o *DNSSECSigningPolicyPostRequestBody) GetKeySigningKeyLength() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.KeySigningKeyLength
}

// GetKeySigningKeyLengthOk returns a tuple with the KeySigningKeyLength field value
// and a boolean to check if the value has been set.
func (o *DNSSECSigningPolicyPostRequestBody) GetKeySigningKeyLengthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeySigningKeyLength, true
}

// SetKeySigningKeyLength sets field value
func (o *DNSSECSigningPolicyPostRequestBody) SetKeySigningKeyLength(v int32) {
	o.KeySigningKeyLength = v
}

// GetKeySigningKeyOverrideTtl returns the KeySigningKeyOverrideTtl field value if set, zero value otherwise.
func (o *DNSSECSigningPolicyPostRequestBody) GetKeySigningKeyOverrideTtl() string {
	if o == nil || IsNil(o.KeySigningKeyOverrideTtl) {
		var ret string
		return ret
	}
	return *o.KeySigningKeyOverrideTtl
}

// GetKeySigningKeyOverrideTtlOk returns a tuple with the KeySigningKeyOverrideTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSSECSigningPolicyPostRequestBody) GetKeySigningKeyOverrideTtlOk() (*string, bool) {
	if o == nil || IsNil(o.KeySigningKeyOverrideTtl) {
		return nil, false
	}
	return o.KeySigningKeyOverrideTtl, true
}

// HasKeySigningKeyOverrideTtl returns a boolean if a field has been set.
func (o *DNSSECSigningPolicyPostRequestBody) HasKeySigningKeyOverrideTtl() bool {
	if o != nil && !IsNil(o.KeySigningKeyOverrideTtl) {
		return true
	}

	return false
}

// SetKeySigningKeyOverrideTtl gets a reference to the given string and assigns it to the KeySigningKeyOverrideTtl field.
func (o *DNSSECSigningPolicyPostRequestBody) SetKeySigningKeyOverrideTtl(v string) {
	o.KeySigningKeyOverrideTtl = &v
}

// GetKeySigningKeyValidityPeriod returns the KeySigningKeyValidityPeriod field value
func (o *DNSSECSigningPolicyPostRequestBody) GetKeySigningKeyValidityPeriod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeySigningKeyValidityPeriod
}

// GetKeySigningKeyValidityPeriodOk returns a tuple with the KeySigningKeyValidityPeriod field value
// and a boolean to check if the value has been set.
func (o *DNSSECSigningPolicyPostRequestBody) GetKeySigningKeyValidityPeriodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeySigningKeyValidityPeriod, true
}

// SetKeySigningKeyValidityPeriod sets field value
func (o *DNSSECSigningPolicyPostRequestBody) SetKeySigningKeyValidityPeriod(v string) {
	o.KeySigningKeyValidityPeriod = v
}

// GetKeySigningKeyOverlapPeriod returns the KeySigningKeyOverlapPeriod field value
func (o *DNSSECSigningPolicyPostRequestBody) GetKeySigningKeyOverlapPeriod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeySigningKeyOverlapPeriod
}

// GetKeySigningKeyOverlapPeriodOk returns a tuple with the KeySigningKeyOverlapPeriod field value
// and a boolean to check if the value has been set.
func (o *DNSSECSigningPolicyPostRequestBody) GetKeySigningKeyOverlapPeriodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeySigningKeyOverlapPeriod, true
}

// SetKeySigningKeyOverlapPeriod sets field value
func (o *DNSSECSigningPolicyPostRequestBody) SetKeySigningKeyOverlapPeriod(v string) {
	o.KeySigningKeyOverlapPeriod = v
}

// GetKeySigningKeyRolloverMethod returns the KeySigningKeyRolloverMethod field value
func (o *DNSSECSigningPolicyPostRequestBody) GetKeySigningKeyRolloverMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeySigningKeyRolloverMethod
}

// GetKeySigningKeyRolloverMethodOk returns a tuple with the KeySigningKeyRolloverMethod field value
// and a boolean to check if the value has been set.
func (o *DNSSECSigningPolicyPostRequestBody) GetKeySigningKeyRolloverMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeySigningKeyRolloverMethod, true
}

// SetKeySigningKeyRolloverMethod sets field value
func (o *DNSSECSigningPolicyPostRequestBody) SetKeySigningKeyRolloverMethod(v string) {
	o.KeySigningKeyRolloverMethod = v
}

// GetKeySigningKeySigningPeriod returns the KeySigningKeySigningPeriod field value if set, zero value otherwise.
func (o *DNSSECSigningPolicyPostRequestBody) GetKeySigningKeySigningPeriod() string {
	if o == nil || IsNil(o.KeySigningKeySigningPeriod) {
		var ret string
		return ret
	}
	return *o.KeySigningKeySigningPeriod
}

// GetKeySigningKeySigningPeriodOk returns a tuple with the KeySigningKeySigningPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSSECSigningPolicyPostRequestBody) GetKeySigningKeySigningPeriodOk() (*string, bool) {
	if o == nil || IsNil(o.KeySigningKeySigningPeriod) {
		return nil, false
	}
	return o.KeySigningKeySigningPeriod, true
}

// HasKeySigningKeySigningPeriod returns a boolean if a field has been set.
func (o *DNSSECSigningPolicyPostRequestBody) HasKeySigningKeySigningPeriod() bool {
	if o != nil && !IsNil(o.KeySigningKeySigningPeriod) {
		return true
	}

	return false
}

// SetKeySigningKeySigningPeriod gets a reference to the given string and assigns it to the KeySigningKeySigningPeriod field.
func (o *DNSSECSigningPolicyPostRequestBody) SetKeySigningKeySigningPeriod(v string) {
	o.KeySigningKeySigningPeriod = &v
}

// GetKeySigningKeyProtectionType returns the KeySigningKeyProtectionType field value if set, zero value otherwise.
func (o *DNSSECSigningPolicyPostRequestBody) GetKeySigningKeyProtectionType() string {
	if o == nil || IsNil(o.KeySigningKeyProtectionType) {
		var ret string
		return ret
	}
	return *o.KeySigningKeyProtectionType
}

// GetKeySigningKeyProtectionTypeOk returns a tuple with the KeySigningKeyProtectionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSSECSigningPolicyPostRequestBody) GetKeySigningKeyProtectionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.KeySigningKeyProtectionType) {
		return nil, false
	}
	return o.KeySigningKeyProtectionType, true
}

// HasKeySigningKeyProtectionType returns a boolean if a field has been set.
func (o *DNSSECSigningPolicyPostRequestBody) HasKeySigningKeyProtectionType() bool {
	if o != nil && !IsNil(o.KeySigningKeyProtectionType) {
		return true
	}

	return false
}

// SetKeySigningKeyProtectionType gets a reference to the given string and assigns it to the KeySigningKeyProtectionType field.
func (o *DNSSECSigningPolicyPostRequestBody) SetKeySigningKeyProtectionType(v string) {
	o.KeySigningKeyProtectionType = &v
}

func (o DNSSECSigningPolicyPostRequestBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DNSSECSigningPolicyPostRequestBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.UserDefinedFields) {
		toSerialize["userDefinedFields"] = o.UserDefinedFields
	}
	toSerialize["keyProvider"] = o.KeyProvider
	toSerialize["signatureDigestAlgorithm"] = o.SignatureDigestAlgorithm
	toSerialize["signatureValidityPeriod"] = o.SignatureValidityPeriod
	toSerialize["signatureResigningPeriod"] = o.SignatureResigningPeriod
	toSerialize["zoneSigningKeyAlgorithm"] = o.ZoneSigningKeyAlgorithm
	toSerialize["zoneSigningKeyLength"] = o.ZoneSigningKeyLength
	if !IsNil(o.ZoneSigningKeyOverrideTtl) {
		toSerialize["zoneSigningKeyOverrideTtl"] = o.ZoneSigningKeyOverrideTtl
	}
	toSerialize["zoneSigningKeyValidityPeriod"] = o.ZoneSigningKeyValidityPeriod
	toSerialize["zoneSigningKeyOverlapPeriod"] = o.ZoneSigningKeyOverlapPeriod
	toSerialize["zoneSigningKeyRolloverMethod"] = o.ZoneSigningKeyRolloverMethod
	if !IsNil(o.ZoneSigningKeySigningPeriod) {
		toSerialize["zoneSigningKeySigningPeriod"] = o.ZoneSigningKeySigningPeriod
	}
	if !IsNil(o.ZoneSigningKeyProtectionType) {
		toSerialize["zoneSigningKeyProtectionType"] = o.ZoneSigningKeyProtectionType
	}
	toSerialize["keySigningKeyAlgorithm"] = o.KeySigningKeyAlgorithm
	toSerialize["keySigningKeyLength"] = o.KeySigningKeyLength
	if !IsNil(o.KeySigningKeyOverrideTtl) {
		toSerialize["keySigningKeyOverrideTtl"] = o.KeySigningKeyOverrideTtl
	}
	toSerialize["keySigningKeyValidityPeriod"] = o.KeySigningKeyValidityPeriod
	toSerialize["keySigningKeyOverlapPeriod"] = o.KeySigningKeyOverlapPeriod
	toSerialize["keySigningKeyRolloverMethod"] = o.KeySigningKeyRolloverMethod
	if !IsNil(o.KeySigningKeySigningPeriod) {
		toSerialize["keySigningKeySigningPeriod"] = o.KeySigningKeySigningPeriod
	}
	if !IsNil(o.KeySigningKeyProtectionType) {
		toSerialize["keySigningKeyProtectionType"] = o.KeySigningKeyProtectionType
	}
	return toSerialize, nil
}

func (o *DNSSECSigningPolicyPostRequestBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"keyProvider",
		"signatureDigestAlgorithm",
		"signatureValidityPeriod",
		"signatureResigningPeriod",
		"zoneSigningKeyAlgorithm",
		"zoneSigningKeyLength",
		"zoneSigningKeyValidityPeriod",
		"zoneSigningKeyOverlapPeriod",
		"zoneSigningKeyRolloverMethod",
		"keySigningKeyAlgorithm",
		"keySigningKeyLength",
		"keySigningKeyValidityPeriod",
		"keySigningKeyOverlapPeriod",
		"keySigningKeyRolloverMethod",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDNSSECSigningPolicyPostRequestBody := _DNSSECSigningPolicyPostRequestBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDNSSECSigningPolicyPostRequestBody)

	if err != nil {
		return err
	}

	*o = DNSSECSigningPolicyPostRequestBody(varDNSSECSigningPolicyPostRequestBody)

	return err
}

type NullableDNSSECSigningPolicyPostRequestBody struct {
	value *DNSSECSigningPolicyPostRequestBody
	isSet bool
}

func (v NullableDNSSECSigningPolicyPostRequestBody) Get() *DNSSECSigningPolicyPostRequestBody {
	return v.value
}

func (v *NullableDNSSECSigningPolicyPostRequestBody) Set(val *DNSSECSigningPolicyPostRequestBody) {
	v.value = val
	v.isSet = true
}

func (v NullableDNSSECSigningPolicyPostRequestBody) IsSet() bool {
	return v.isSet
}

func (v *NullableDNSSECSigningPolicyPostRequestBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDNSSECSigningPolicyPostRequestBody(val *DNSSECSigningPolicyPostRequestBody) *NullableDNSSECSigningPolicyPostRequestBody {
	return &NullableDNSSECSigningPolicyPostRequestBody{value: val, isSet: true}
}

func (v NullableDNSSECSigningPolicyPostRequestBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDNSSECSigningPolicyPostRequestBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



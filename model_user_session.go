/*
BlueCat Address Manager 9.5 RESTful v2 API

The **BlueCat Address Manager 9.5 RESTful v2 API** is a new RESTful API for Address Manager that presents Address Manager objects as resources. Each resource has a unique endpoint, and related resources are grouped in collections. To fetch an individual resource, a `GET` request is sent to the resource's endpoint. To fetch all resources in a collection, a `GET` request is sent to the collection's endpoint.  The RESTful v2 API is [hypermedia driven](https://en.wikipedia.org/wiki/HATEOAS) and uses the [HAL](https://en.wikipedia.org/wiki/Hypertext_Application_Language) format for representing links. When navigating through the API, you can use those links to navigate to related resources or child resources of the requested endpoint. The API supports the following media types for most endpoints:  `application/hal+json`, `application/json`, and `text/csv`.  For authentication, the API supports both `Basic` and `Bearer` HTTP authentication schemes.  To get started, create a session and receive credentials for `Basic` authentication by sending a `POST` request to the [/sessions](#/Admin%20Resources/postSession) endpoint, with a message body containing the user's credentials:  ```{\"username\":\"apiuser\", \"password\":\"apipass\"}```  The response will contain an `apiToken` field that can be entered with the username in the Swagger UI **Authorize** dialog. The response will also contain a `basicAuthenticationCredentials` field containing a base64 encoding of the requester's username and API token delimited by a colon. This string can be injected directly into request `Authorization` headers in the following format:  ```Authorization: Basic YXBpOlQ0OExOT3VIRGhDcnVBNEo1bGFES3JuS3hTZC9QK3pjczZXTzBJMDY=```  For full details on API format and authentication methods, refer to the Address Manager RESTful v2 API Guide on the BlueCat Documentation Portal.

API version: 9.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gobam2

import (
	"encoding/json"
	"time"
)

// checks if the UserSession type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserSession{}

// UserSession struct for UserSession
type UserSession struct {
	// The resource identifier.
	Id *int64 `json:"id,omitempty"`
	// The resource type.
	Type *string `json:"type,omitempty"`
	// The username used to initiate the session.
	Username *string `json:"username,omitempty" validate:"regexp=^.*\\\\S+.*$"`
	// The associated password for the username used to initiate the session.
	Password *string `json:"password,omitempty" validate:"regexp=^.*\\\\S+.*$"`
	// The API token of the user session.
	ApiToken *string `json:"apiToken,omitempty"`
	// The timestamp of the API token expiration.
	ApiTokenExpirationDateTime *time.Time `json:"apiTokenExpirationDateTime,omitempty"`
	// The IP address of the device that initiated the user session.
	RemoteAddress *string `json:"remoteAddress,omitempty"`
	// Indicates whether the initiated session is a read-only session. When database replication is configured between Address Manager servers, you can initiate a read-only session to call API methods with read-only support and retrieve information from the Secondary or Tertiary Address Manager server.
	ReadOnly *bool `json:"readOnly,omitempty"`
	// A timestamp of when the session was initiated.
	LoginDateTime *time.Time `json:"loginDateTime,omitempty"`
	// A timestamp of when the session was terminated.
	LogoutDateTime *time.Time `json:"logoutDateTime,omitempty"`
	// The state of the user session.
	State *string `json:"state,omitempty"`
	// The response from the authenticated user session.
	Response *string `json:"response,omitempty"`
	User *User `json:"user,omitempty"`
	Authenticator *Authenticator `json:"authenticator,omitempty"`
}

// NewUserSession instantiates a new UserSession object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSession() *UserSession {
	this := UserSession{}
	return &this
}

// NewUserSessionWithDefaults instantiates a new UserSession object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSessionWithDefaults() *UserSession {
	this := UserSession{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserSession) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserSession) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *UserSession) SetId(v int64) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UserSession) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UserSession) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UserSession) SetType(v string) {
	o.Type = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *UserSession) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *UserSession) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *UserSession) SetUsername(v string) {
	o.Username = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *UserSession) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *UserSession) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *UserSession) SetPassword(v string) {
	o.Password = &v
}

// GetApiToken returns the ApiToken field value if set, zero value otherwise.
func (o *UserSession) GetApiToken() string {
	if o == nil || IsNil(o.ApiToken) {
		var ret string
		return ret
	}
	return *o.ApiToken
}

// GetApiTokenOk returns a tuple with the ApiToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetApiTokenOk() (*string, bool) {
	if o == nil || IsNil(o.ApiToken) {
		return nil, false
	}
	return o.ApiToken, true
}

// HasApiToken returns a boolean if a field has been set.
func (o *UserSession) HasApiToken() bool {
	if o != nil && !IsNil(o.ApiToken) {
		return true
	}

	return false
}

// SetApiToken gets a reference to the given string and assigns it to the ApiToken field.
func (o *UserSession) SetApiToken(v string) {
	o.ApiToken = &v
}

// GetApiTokenExpirationDateTime returns the ApiTokenExpirationDateTime field value if set, zero value otherwise.
func (o *UserSession) GetApiTokenExpirationDateTime() time.Time {
	if o == nil || IsNil(o.ApiTokenExpirationDateTime) {
		var ret time.Time
		return ret
	}
	return *o.ApiTokenExpirationDateTime
}

// GetApiTokenExpirationDateTimeOk returns a tuple with the ApiTokenExpirationDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetApiTokenExpirationDateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ApiTokenExpirationDateTime) {
		return nil, false
	}
	return o.ApiTokenExpirationDateTime, true
}

// HasApiTokenExpirationDateTime returns a boolean if a field has been set.
func (o *UserSession) HasApiTokenExpirationDateTime() bool {
	if o != nil && !IsNil(o.ApiTokenExpirationDateTime) {
		return true
	}

	return false
}

// SetApiTokenExpirationDateTime gets a reference to the given time.Time and assigns it to the ApiTokenExpirationDateTime field.
func (o *UserSession) SetApiTokenExpirationDateTime(v time.Time) {
	o.ApiTokenExpirationDateTime = &v
}

// GetRemoteAddress returns the RemoteAddress field value if set, zero value otherwise.
func (o *UserSession) GetRemoteAddress() string {
	if o == nil || IsNil(o.RemoteAddress) {
		var ret string
		return ret
	}
	return *o.RemoteAddress
}

// GetRemoteAddressOk returns a tuple with the RemoteAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetRemoteAddressOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteAddress) {
		return nil, false
	}
	return o.RemoteAddress, true
}

// HasRemoteAddress returns a boolean if a field has been set.
func (o *UserSession) HasRemoteAddress() bool {
	if o != nil && !IsNil(o.RemoteAddress) {
		return true
	}

	return false
}

// SetRemoteAddress gets a reference to the given string and assigns it to the RemoteAddress field.
func (o *UserSession) SetRemoteAddress(v string) {
	o.RemoteAddress = &v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *UserSession) GetReadOnly() bool {
	if o == nil || IsNil(o.ReadOnly) {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ReadOnly) {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *UserSession) HasReadOnly() bool {
	if o != nil && !IsNil(o.ReadOnly) {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *UserSession) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

// GetLoginDateTime returns the LoginDateTime field value if set, zero value otherwise.
func (o *UserSession) GetLoginDateTime() time.Time {
	if o == nil || IsNil(o.LoginDateTime) {
		var ret time.Time
		return ret
	}
	return *o.LoginDateTime
}

// GetLoginDateTimeOk returns a tuple with the LoginDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetLoginDateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LoginDateTime) {
		return nil, false
	}
	return o.LoginDateTime, true
}

// HasLoginDateTime returns a boolean if a field has been set.
func (o *UserSession) HasLoginDateTime() bool {
	if o != nil && !IsNil(o.LoginDateTime) {
		return true
	}

	return false
}

// SetLoginDateTime gets a reference to the given time.Time and assigns it to the LoginDateTime field.
func (o *UserSession) SetLoginDateTime(v time.Time) {
	o.LoginDateTime = &v
}

// GetLogoutDateTime returns the LogoutDateTime field value if set, zero value otherwise.
func (o *UserSession) GetLogoutDateTime() time.Time {
	if o == nil || IsNil(o.LogoutDateTime) {
		var ret time.Time
		return ret
	}
	return *o.LogoutDateTime
}

// GetLogoutDateTimeOk returns a tuple with the LogoutDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetLogoutDateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LogoutDateTime) {
		return nil, false
	}
	return o.LogoutDateTime, true
}

// HasLogoutDateTime returns a boolean if a field has been set.
func (o *UserSession) HasLogoutDateTime() bool {
	if o != nil && !IsNil(o.LogoutDateTime) {
		return true
	}

	return false
}

// SetLogoutDateTime gets a reference to the given time.Time and assigns it to the LogoutDateTime field.
func (o *UserSession) SetLogoutDateTime(v time.Time) {
	o.LogoutDateTime = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *UserSession) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *UserSession) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *UserSession) SetState(v string) {
	o.State = &v
}

// GetResponse returns the Response field value if set, zero value otherwise.
func (o *UserSession) GetResponse() string {
	if o == nil || IsNil(o.Response) {
		var ret string
		return ret
	}
	return *o.Response
}

// GetResponseOk returns a tuple with the Response field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetResponseOk() (*string, bool) {
	if o == nil || IsNil(o.Response) {
		return nil, false
	}
	return o.Response, true
}

// HasResponse returns a boolean if a field has been set.
func (o *UserSession) HasResponse() bool {
	if o != nil && !IsNil(o.Response) {
		return true
	}

	return false
}

// SetResponse gets a reference to the given string and assigns it to the Response field.
func (o *UserSession) SetResponse(v string) {
	o.Response = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *UserSession) GetUser() User {
	if o == nil || IsNil(o.User) {
		var ret User
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetUserOk() (*User, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *UserSession) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given User and assigns it to the User field.
func (o *UserSession) SetUser(v User) {
	o.User = &v
}

// GetAuthenticator returns the Authenticator field value if set, zero value otherwise.
func (o *UserSession) GetAuthenticator() Authenticator {
	if o == nil || IsNil(o.Authenticator) {
		var ret Authenticator
		return ret
	}
	return *o.Authenticator
}

// GetAuthenticatorOk returns a tuple with the Authenticator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetAuthenticatorOk() (*Authenticator, bool) {
	if o == nil || IsNil(o.Authenticator) {
		return nil, false
	}
	return o.Authenticator, true
}

// HasAuthenticator returns a boolean if a field has been set.
func (o *UserSession) HasAuthenticator() bool {
	if o != nil && !IsNil(o.Authenticator) {
		return true
	}

	return false
}

// SetAuthenticator gets a reference to the given Authenticator and assigns it to the Authenticator field.
func (o *UserSession) SetAuthenticator(v Authenticator) {
	o.Authenticator = &v
}

func (o UserSession) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserSession) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.ApiToken) {
		toSerialize["apiToken"] = o.ApiToken
	}
	if !IsNil(o.ApiTokenExpirationDateTime) {
		toSerialize["apiTokenExpirationDateTime"] = o.ApiTokenExpirationDateTime
	}
	if !IsNil(o.RemoteAddress) {
		toSerialize["remoteAddress"] = o.RemoteAddress
	}
	if !IsNil(o.ReadOnly) {
		toSerialize["readOnly"] = o.ReadOnly
	}
	if !IsNil(o.LoginDateTime) {
		toSerialize["loginDateTime"] = o.LoginDateTime
	}
	if !IsNil(o.LogoutDateTime) {
		toSerialize["logoutDateTime"] = o.LogoutDateTime
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Response) {
		toSerialize["response"] = o.Response
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.Authenticator) {
		toSerialize["authenticator"] = o.Authenticator
	}
	return toSerialize, nil
}

type NullableUserSession struct {
	value *UserSession
	isSet bool
}

func (v NullableUserSession) Get() *UserSession {
	return v.value
}

func (v *NullableUserSession) Set(val *UserSession) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSession) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSession(val *UserSession) *NullableUserSession {
	return &NullableUserSession{value: val, isSet: true}
}

func (v NullableUserSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



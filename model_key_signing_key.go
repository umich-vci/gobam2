/*
BlueCat Address Manager 9.5 RESTful v2 API

The **BlueCat Address Manager 9.5 RESTful v2 API** is a new RESTful API for Address Manager that presents Address Manager objects as resources. Each resource has a unique endpoint, and related resources are grouped in collections. To fetch an individual resource, a `GET` request is sent to the resource's endpoint. To fetch all resources in a collection, a `GET` request is sent to the collection's endpoint.  The RESTful v2 API is [hypermedia driven](https://en.wikipedia.org/wiki/HATEOAS) and uses the [HAL](https://en.wikipedia.org/wiki/Hypertext_Application_Language) format for representing links. When navigating through the API, you can use those links to navigate to related resources or child resources of the requested endpoint. The API supports the following media types for most endpoints:  `application/hal+json`, `application/json`, and `text/csv`.  For authentication, the API supports both `Basic` and `Bearer` HTTP authentication schemes.  To get started, create a session and receive credentials for `Basic` authentication by sending a `POST` request to the [/sessions](#/Admin%20Resources/postSession) endpoint, with a message body containing the user's credentials:  ```{\"username\":\"apiuser\", \"password\":\"apipass\"}```  The response will contain an `apiToken` field that can be entered with the username in the Swagger UI **Authorize** dialog. The response will also contain a `basicAuthenticationCredentials` field containing a base64 encoding of the requester's username and API token delimited by a colon. This string can be injected directly into request `Authorization` headers in the following format:  ```Authorization: Basic YXBpOlQ0OExOT3VIRGhDcnVBNEo1bGFES3JuS3hTZC9QK3pjczZXTzBJMDY=```  For full details on API format and authentication methods, refer to the Address Manager RESTful v2 API Guide on the BlueCat Documentation Portal.

API version: 9.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gobam2

import (
	"encoding/json"
	"time"
)

// checks if the KeySigningKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeySigningKey{}

// KeySigningKey struct for KeySigningKey
type KeySigningKey struct {
	SigningKey
	// The resource type.
	Type *string `json:"type,omitempty"`
	// The algorithm used to sign the key.
	Algorithm *string `json:"algorithm,omitempty"`
	// The date and time for the beginning of the key's validity period.
	KeyStartDateTime *time.Time `json:"keyStartDateTime,omitempty"`
	// The date and time at which the key expires.
	KeyExpirationDateTime *time.Time `json:"keyExpirationDateTime,omitempty"`
	// The TTL (time to live) for the key if an override TTL is specified when the key is created.
	Ttl *string `json:"ttl,omitempty"`
	// The key tag value for the key. The key tag is used during DNSSEC validation and when signing and re-signing zones.
	KeyTag *int32 `json:"keyTag,omitempty"`
	// The public key text.
	PublicKey *string `json:"publicKey,omitempty"`
	// The flag used to verify the DNS record signature for resource records.
	Flags *int32 `json:"flags,omitempty"`
}

// NewKeySigningKey instantiates a new KeySigningKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeySigningKey() *KeySigningKey {
	this := KeySigningKey{}
	return &this
}

// NewKeySigningKeyWithDefaults instantiates a new KeySigningKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeySigningKeyWithDefaults() *KeySigningKey {
	this := KeySigningKey{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *KeySigningKey) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeySigningKey) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *KeySigningKey) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *KeySigningKey) SetType(v string) {
	o.Type = &v
}

// GetAlgorithm returns the Algorithm field value if set, zero value otherwise.
func (o *KeySigningKey) GetAlgorithm() string {
	if o == nil || IsNil(o.Algorithm) {
		var ret string
		return ret
	}
	return *o.Algorithm
}

// GetAlgorithmOk returns a tuple with the Algorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeySigningKey) GetAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.Algorithm) {
		return nil, false
	}
	return o.Algorithm, true
}

// HasAlgorithm returns a boolean if a field has been set.
func (o *KeySigningKey) HasAlgorithm() bool {
	if o != nil && !IsNil(o.Algorithm) {
		return true
	}

	return false
}

// SetAlgorithm gets a reference to the given string and assigns it to the Algorithm field.
func (o *KeySigningKey) SetAlgorithm(v string) {
	o.Algorithm = &v
}

// GetKeyStartDateTime returns the KeyStartDateTime field value if set, zero value otherwise.
func (o *KeySigningKey) GetKeyStartDateTime() time.Time {
	if o == nil || IsNil(o.KeyStartDateTime) {
		var ret time.Time
		return ret
	}
	return *o.KeyStartDateTime
}

// GetKeyStartDateTimeOk returns a tuple with the KeyStartDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeySigningKey) GetKeyStartDateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.KeyStartDateTime) {
		return nil, false
	}
	return o.KeyStartDateTime, true
}

// HasKeyStartDateTime returns a boolean if a field has been set.
func (o *KeySigningKey) HasKeyStartDateTime() bool {
	if o != nil && !IsNil(o.KeyStartDateTime) {
		return true
	}

	return false
}

// SetKeyStartDateTime gets a reference to the given time.Time and assigns it to the KeyStartDateTime field.
func (o *KeySigningKey) SetKeyStartDateTime(v time.Time) {
	o.KeyStartDateTime = &v
}

// GetKeyExpirationDateTime returns the KeyExpirationDateTime field value if set, zero value otherwise.
func (o *KeySigningKey) GetKeyExpirationDateTime() time.Time {
	if o == nil || IsNil(o.KeyExpirationDateTime) {
		var ret time.Time
		return ret
	}
	return *o.KeyExpirationDateTime
}

// GetKeyExpirationDateTimeOk returns a tuple with the KeyExpirationDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeySigningKey) GetKeyExpirationDateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.KeyExpirationDateTime) {
		return nil, false
	}
	return o.KeyExpirationDateTime, true
}

// HasKeyExpirationDateTime returns a boolean if a field has been set.
func (o *KeySigningKey) HasKeyExpirationDateTime() bool {
	if o != nil && !IsNil(o.KeyExpirationDateTime) {
		return true
	}

	return false
}

// SetKeyExpirationDateTime gets a reference to the given time.Time and assigns it to the KeyExpirationDateTime field.
func (o *KeySigningKey) SetKeyExpirationDateTime(v time.Time) {
	o.KeyExpirationDateTime = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *KeySigningKey) GetTtl() string {
	if o == nil || IsNil(o.Ttl) {
		var ret string
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeySigningKey) GetTtlOk() (*string, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *KeySigningKey) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given string and assigns it to the Ttl field.
func (o *KeySigningKey) SetTtl(v string) {
	o.Ttl = &v
}

// GetKeyTag returns the KeyTag field value if set, zero value otherwise.
func (o *KeySigningKey) GetKeyTag() int32 {
	if o == nil || IsNil(o.KeyTag) {
		var ret int32
		return ret
	}
	return *o.KeyTag
}

// GetKeyTagOk returns a tuple with the KeyTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeySigningKey) GetKeyTagOk() (*int32, bool) {
	if o == nil || IsNil(o.KeyTag) {
		return nil, false
	}
	return o.KeyTag, true
}

// HasKeyTag returns a boolean if a field has been set.
func (o *KeySigningKey) HasKeyTag() bool {
	if o != nil && !IsNil(o.KeyTag) {
		return true
	}

	return false
}

// SetKeyTag gets a reference to the given int32 and assigns it to the KeyTag field.
func (o *KeySigningKey) SetKeyTag(v int32) {
	o.KeyTag = &v
}

// GetPublicKey returns the PublicKey field value if set, zero value otherwise.
func (o *KeySigningKey) GetPublicKey() string {
	if o == nil || IsNil(o.PublicKey) {
		var ret string
		return ret
	}
	return *o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeySigningKey) GetPublicKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PublicKey) {
		return nil, false
	}
	return o.PublicKey, true
}

// HasPublicKey returns a boolean if a field has been set.
func (o *KeySigningKey) HasPublicKey() bool {
	if o != nil && !IsNil(o.PublicKey) {
		return true
	}

	return false
}

// SetPublicKey gets a reference to the given string and assigns it to the PublicKey field.
func (o *KeySigningKey) SetPublicKey(v string) {
	o.PublicKey = &v
}

// GetFlags returns the Flags field value if set, zero value otherwise.
func (o *KeySigningKey) GetFlags() int32 {
	if o == nil || IsNil(o.Flags) {
		var ret int32
		return ret
	}
	return *o.Flags
}

// GetFlagsOk returns a tuple with the Flags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeySigningKey) GetFlagsOk() (*int32, bool) {
	if o == nil || IsNil(o.Flags) {
		return nil, false
	}
	return o.Flags, true
}

// HasFlags returns a boolean if a field has been set.
func (o *KeySigningKey) HasFlags() bool {
	if o != nil && !IsNil(o.Flags) {
		return true
	}

	return false
}

// SetFlags gets a reference to the given int32 and assigns it to the Flags field.
func (o *KeySigningKey) SetFlags(v int32) {
	o.Flags = &v
}

func (o KeySigningKey) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeySigningKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Algorithm) {
		toSerialize["algorithm"] = o.Algorithm
	}
	if !IsNil(o.KeyStartDateTime) {
		toSerialize["keyStartDateTime"] = o.KeyStartDateTime
	}
	if !IsNil(o.KeyExpirationDateTime) {
		toSerialize["keyExpirationDateTime"] = o.KeyExpirationDateTime
	}
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	if !IsNil(o.KeyTag) {
		toSerialize["keyTag"] = o.KeyTag
	}
	if !IsNil(o.PublicKey) {
		toSerialize["publicKey"] = o.PublicKey
	}
	if !IsNil(o.Flags) {
		toSerialize["flags"] = o.Flags
	}
	return toSerialize, nil
}

type NullableKeySigningKey struct {
	value *KeySigningKey
	isSet bool
}

func (v NullableKeySigningKey) Get() *KeySigningKey {
	return v.value
}

func (v *NullableKeySigningKey) Set(val *KeySigningKey) {
	v.value = val
	v.isSet = true
}

func (v NullableKeySigningKey) IsSet() bool {
	return v.isSet
}

func (v *NullableKeySigningKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeySigningKey(val *KeySigningKey) *NullableKeySigningKey {
	return &NullableKeySigningKey{value: val, isSet: true}
}

func (v NullableKeySigningKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeySigningKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
BlueCat Address Manager 9.5 RESTful v2 API

The **BlueCat Address Manager 9.5 RESTful v2 API** is a new RESTful API for Address Manager that presents Address Manager objects as resources. Each resource has a unique endpoint, and related resources are grouped in collections. To fetch an individual resource, a `GET` request is sent to the resource's endpoint. To fetch all resources in a collection, a `GET` request is sent to the collection's endpoint.  The RESTful v2 API is [hypermedia driven](https://en.wikipedia.org/wiki/HATEOAS) and uses the [HAL](https://en.wikipedia.org/wiki/Hypertext_Application_Language) format for representing links. When navigating through the API, you can use those links to navigate to related resources or child resources of the requested endpoint. The API supports the following media types for most endpoints:  `application/hal+json`, `application/json`, and `text/csv`.  For authentication, the API supports both `Basic` and `Bearer` HTTP authentication schemes.  To get started, create a session and receive credentials for `Basic` authentication by sending a `POST` request to the [/sessions](#/Admin%20Resources/postSession) endpoint, with a message body containing the user's credentials:  ```{\"username\":\"apiuser\", \"password\":\"apipass\"}```  The response will contain an `apiToken` field that can be entered with the username in the Swagger UI **Authorize** dialog. The response will also contain a `basicAuthenticationCredentials` field containing a base64 encoding of the requester's username and API token delimited by a colon. This string can be injected directly into request `Authorization` headers in the following format:  ```Authorization: Basic YXBpOlQ0OExOT3VIRGhDcnVBNEo1bGFES3JuS3hTZC9QK3pjczZXTzBJMDY=```  For full details on API format and authentication methods, refer to the Address Manager RESTful v2 API Guide on the BlueCat Documentation Portal.

API version: 9.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gobam2

import (
	"encoding/json"
)

// checks if the IPv4DHCPRange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IPv4DHCPRange{}

// IPv4DHCPRange struct for IPv4DHCPRange
type IPv4DHCPRange struct {
	Range
	// The resource type.
	Type *string `json:"type,omitempty"`
	Template *InlinedIPv4Template `json:"template,omitempty"`
	// Indicates whether the DHCP range will automatically be split around any static, reserved, and gateway addresses in the network that are within the DHCP range.
	SplitAroundStaticAddresses *bool `json:"splitAroundStaticAddresses,omitempty"`
	// The exclusion ranges for the DHCP range. Addresses in each exclusion range will not be dynamically assigned.
	ExclusionRanges []string `json:"exclusionRanges,omitempty"`
	// A DHCP alert is triggered when usage falls below this percentage (when too few addresses are in use).
	LowWaterMark *int32 `json:"lowWaterMark,omitempty"`
	// A DHCP alert is triggered when usage exceeds this percentage (when too many addresses are in use).
	HighWaterMark *int32 `json:"highWaterMark,omitempty"`
}

// NewIPv4DHCPRange instantiates a new IPv4DHCPRange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIPv4DHCPRange() *IPv4DHCPRange {
	this := IPv4DHCPRange{}
	return &this
}

// NewIPv4DHCPRangeWithDefaults instantiates a new IPv4DHCPRange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIPv4DHCPRangeWithDefaults() *IPv4DHCPRange {
	this := IPv4DHCPRange{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IPv4DHCPRange) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPv4DHCPRange) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IPv4DHCPRange) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *IPv4DHCPRange) SetType(v string) {
	o.Type = &v
}

// GetTemplate returns the Template field value if set, zero value otherwise.
func (o *IPv4DHCPRange) GetTemplate() InlinedIPv4Template {
	if o == nil || IsNil(o.Template) {
		var ret InlinedIPv4Template
		return ret
	}
	return *o.Template
}

// GetTemplateOk returns a tuple with the Template field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPv4DHCPRange) GetTemplateOk() (*InlinedIPv4Template, bool) {
	if o == nil || IsNil(o.Template) {
		return nil, false
	}
	return o.Template, true
}

// HasTemplate returns a boolean if a field has been set.
func (o *IPv4DHCPRange) HasTemplate() bool {
	if o != nil && !IsNil(o.Template) {
		return true
	}

	return false
}

// SetTemplate gets a reference to the given InlinedIPv4Template and assigns it to the Template field.
func (o *IPv4DHCPRange) SetTemplate(v InlinedIPv4Template) {
	o.Template = &v
}

// GetSplitAroundStaticAddresses returns the SplitAroundStaticAddresses field value if set, zero value otherwise.
func (o *IPv4DHCPRange) GetSplitAroundStaticAddresses() bool {
	if o == nil || IsNil(o.SplitAroundStaticAddresses) {
		var ret bool
		return ret
	}
	return *o.SplitAroundStaticAddresses
}

// GetSplitAroundStaticAddressesOk returns a tuple with the SplitAroundStaticAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPv4DHCPRange) GetSplitAroundStaticAddressesOk() (*bool, bool) {
	if o == nil || IsNil(o.SplitAroundStaticAddresses) {
		return nil, false
	}
	return o.SplitAroundStaticAddresses, true
}

// HasSplitAroundStaticAddresses returns a boolean if a field has been set.
func (o *IPv4DHCPRange) HasSplitAroundStaticAddresses() bool {
	if o != nil && !IsNil(o.SplitAroundStaticAddresses) {
		return true
	}

	return false
}

// SetSplitAroundStaticAddresses gets a reference to the given bool and assigns it to the SplitAroundStaticAddresses field.
func (o *IPv4DHCPRange) SetSplitAroundStaticAddresses(v bool) {
	o.SplitAroundStaticAddresses = &v
}

// GetExclusionRanges returns the ExclusionRanges field value if set, zero value otherwise.
func (o *IPv4DHCPRange) GetExclusionRanges() []string {
	if o == nil || IsNil(o.ExclusionRanges) {
		var ret []string
		return ret
	}
	return o.ExclusionRanges
}

// GetExclusionRangesOk returns a tuple with the ExclusionRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPv4DHCPRange) GetExclusionRangesOk() ([]string, bool) {
	if o == nil || IsNil(o.ExclusionRanges) {
		return nil, false
	}
	return o.ExclusionRanges, true
}

// HasExclusionRanges returns a boolean if a field has been set.
func (o *IPv4DHCPRange) HasExclusionRanges() bool {
	if o != nil && !IsNil(o.ExclusionRanges) {
		return true
	}

	return false
}

// SetExclusionRanges gets a reference to the given []string and assigns it to the ExclusionRanges field.
func (o *IPv4DHCPRange) SetExclusionRanges(v []string) {
	o.ExclusionRanges = v
}

// GetLowWaterMark returns the LowWaterMark field value if set, zero value otherwise.
func (o *IPv4DHCPRange) GetLowWaterMark() int32 {
	if o == nil || IsNil(o.LowWaterMark) {
		var ret int32
		return ret
	}
	return *o.LowWaterMark
}

// GetLowWaterMarkOk returns a tuple with the LowWaterMark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPv4DHCPRange) GetLowWaterMarkOk() (*int32, bool) {
	if o == nil || IsNil(o.LowWaterMark) {
		return nil, false
	}
	return o.LowWaterMark, true
}

// HasLowWaterMark returns a boolean if a field has been set.
func (o *IPv4DHCPRange) HasLowWaterMark() bool {
	if o != nil && !IsNil(o.LowWaterMark) {
		return true
	}

	return false
}

// SetLowWaterMark gets a reference to the given int32 and assigns it to the LowWaterMark field.
func (o *IPv4DHCPRange) SetLowWaterMark(v int32) {
	o.LowWaterMark = &v
}

// GetHighWaterMark returns the HighWaterMark field value if set, zero value otherwise.
func (o *IPv4DHCPRange) GetHighWaterMark() int32 {
	if o == nil || IsNil(o.HighWaterMark) {
		var ret int32
		return ret
	}
	return *o.HighWaterMark
}

// GetHighWaterMarkOk returns a tuple with the HighWaterMark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPv4DHCPRange) GetHighWaterMarkOk() (*int32, bool) {
	if o == nil || IsNil(o.HighWaterMark) {
		return nil, false
	}
	return o.HighWaterMark, true
}

// HasHighWaterMark returns a boolean if a field has been set.
func (o *IPv4DHCPRange) HasHighWaterMark() bool {
	if o != nil && !IsNil(o.HighWaterMark) {
		return true
	}

	return false
}

// SetHighWaterMark gets a reference to the given int32 and assigns it to the HighWaterMark field.
func (o *IPv4DHCPRange) SetHighWaterMark(v int32) {
	o.HighWaterMark = &v
}

func (o IPv4DHCPRange) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IPv4DHCPRange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Template) {
		toSerialize["template"] = o.Template
	}
	if !IsNil(o.SplitAroundStaticAddresses) {
		toSerialize["splitAroundStaticAddresses"] = o.SplitAroundStaticAddresses
	}
	if !IsNil(o.ExclusionRanges) {
		toSerialize["exclusionRanges"] = o.ExclusionRanges
	}
	if !IsNil(o.LowWaterMark) {
		toSerialize["lowWaterMark"] = o.LowWaterMark
	}
	if !IsNil(o.HighWaterMark) {
		toSerialize["highWaterMark"] = o.HighWaterMark
	}
	return toSerialize, nil
}

type NullableIPv4DHCPRange struct {
	value *IPv4DHCPRange
	isSet bool
}

func (v NullableIPv4DHCPRange) Get() *IPv4DHCPRange {
	return v.value
}

func (v *NullableIPv4DHCPRange) Set(val *IPv4DHCPRange) {
	v.value = val
	v.isSet = true
}

func (v NullableIPv4DHCPRange) IsSet() bool {
	return v.isSet
}

func (v *NullableIPv4DHCPRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIPv4DHCPRange(val *IPv4DHCPRange) *NullableIPv4DHCPRange {
	return &NullableIPv4DHCPRange{value: val, isSet: true}
}

func (v NullableIPv4DHCPRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIPv4DHCPRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
BlueCat Address Manager 9.5 RESTful v2 API

The **BlueCat Address Manager 9.5 RESTful v2 API** is a new RESTful API for Address Manager that presents Address Manager objects as resources. Each resource has a unique endpoint, and related resources are grouped in collections. To fetch an individual resource, a `GET` request is sent to the resource's endpoint. To fetch all resources in a collection, a `GET` request is sent to the collection's endpoint.  The RESTful v2 API is [hypermedia driven](https://en.wikipedia.org/wiki/HATEOAS) and uses the [HAL](https://en.wikipedia.org/wiki/Hypertext_Application_Language) format for representing links. When navigating through the API, you can use those links to navigate to related resources or child resources of the requested endpoint. The API supports the following media types for most endpoints:  `application/hal+json`, `application/json`, and `text/csv`.  For authentication, the API supports both `Basic` and `Bearer` HTTP authentication schemes.  To get started, create a session and receive credentials for `Basic` authentication by sending a `POST` request to the [/sessions](#/Admin%20Resources/postSession) endpoint, with a message body containing the user's credentials:  ```{\"username\":\"apiuser\", \"password\":\"apipass\"}```  The response will contain an `apiToken` field that can be entered with the username in the Swagger UI **Authorize** dialog. The response will also contain a `basicAuthenticationCredentials` field containing a base64 encoding of the requester's username and API token delimited by a colon. This string can be injected directly into request `Authorization` headers in the following format:  ```Authorization: Basic YXBpOlQ0OExOT3VIRGhDcnVBNEo1bGFES3JuS3hTZC9QK3pjczZXTzBJMDY=```  For full details on API format and authentication methods, refer to the Address Manager RESTful v2 API Guide on the BlueCat Documentation Portal.

API version: 9.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gobam2

import (
	"encoding/json"
)

// checks if the UserDefinedFieldDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserDefinedFieldDefinition{}

// UserDefinedFieldDefinition struct for UserDefinedFieldDefinition
type UserDefinedFieldDefinition struct {
	// The resource identifier.
	Id *int64 `json:"id,omitempty"`
	// The resource type.
	Type *string `json:"type,omitempty"`
	// The name of the user defined field.
	Name *string `json:"name,omitempty" validate:"regexp=^.*\\\\S+.*$"`
	// The display name of the user defined field.
	DisplayName *string `json:"displayName,omitempty" validate:"regexp=^.*\\\\S+.*$"`
	// The resource type that the user defined field is applied to.
	ResourceType *string `json:"resourceType,omitempty"`
	// The data type of the user defined field.
	DataType *string `json:"dataType,omitempty"`
	// The default value of the user defined field.
	DefaultValue *string `json:"defaultValue,omitempty"`
	// Indicates whether the user defined field is required or optional for the resource.
	Required *bool `json:"required,omitempty"`
	PredefinedValues []string `json:"predefinedValues,omitempty"`
	ValidationProperties *UserDefinedFieldDefinitionValidationProperties `json:"validationProperties,omitempty"`
}

// NewUserDefinedFieldDefinition instantiates a new UserDefinedFieldDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserDefinedFieldDefinition() *UserDefinedFieldDefinition {
	this := UserDefinedFieldDefinition{}
	return &this
}

// NewUserDefinedFieldDefinitionWithDefaults instantiates a new UserDefinedFieldDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserDefinedFieldDefinitionWithDefaults() *UserDefinedFieldDefinition {
	this := UserDefinedFieldDefinition{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserDefinedFieldDefinition) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedFieldDefinition) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserDefinedFieldDefinition) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *UserDefinedFieldDefinition) SetId(v int64) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UserDefinedFieldDefinition) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedFieldDefinition) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UserDefinedFieldDefinition) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UserDefinedFieldDefinition) SetType(v string) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UserDefinedFieldDefinition) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedFieldDefinition) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UserDefinedFieldDefinition) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UserDefinedFieldDefinition) SetName(v string) {
	o.Name = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *UserDefinedFieldDefinition) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedFieldDefinition) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *UserDefinedFieldDefinition) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *UserDefinedFieldDefinition) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *UserDefinedFieldDefinition) GetResourceType() string {
	if o == nil || IsNil(o.ResourceType) {
		var ret string
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedFieldDefinition) GetResourceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceType) {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *UserDefinedFieldDefinition) HasResourceType() bool {
	if o != nil && !IsNil(o.ResourceType) {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *UserDefinedFieldDefinition) SetResourceType(v string) {
	o.ResourceType = &v
}

// GetDataType returns the DataType field value if set, zero value otherwise.
func (o *UserDefinedFieldDefinition) GetDataType() string {
	if o == nil || IsNil(o.DataType) {
		var ret string
		return ret
	}
	return *o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedFieldDefinition) GetDataTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DataType) {
		return nil, false
	}
	return o.DataType, true
}

// HasDataType returns a boolean if a field has been set.
func (o *UserDefinedFieldDefinition) HasDataType() bool {
	if o != nil && !IsNil(o.DataType) {
		return true
	}

	return false
}

// SetDataType gets a reference to the given string and assigns it to the DataType field.
func (o *UserDefinedFieldDefinition) SetDataType(v string) {
	o.DataType = &v
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *UserDefinedFieldDefinition) GetDefaultValue() string {
	if o == nil || IsNil(o.DefaultValue) {
		var ret string
		return ret
	}
	return *o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedFieldDefinition) GetDefaultValueOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValue) {
		return nil, false
	}
	return o.DefaultValue, true
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *UserDefinedFieldDefinition) HasDefaultValue() bool {
	if o != nil && !IsNil(o.DefaultValue) {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given string and assigns it to the DefaultValue field.
func (o *UserDefinedFieldDefinition) SetDefaultValue(v string) {
	o.DefaultValue = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *UserDefinedFieldDefinition) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedFieldDefinition) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *UserDefinedFieldDefinition) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *UserDefinedFieldDefinition) SetRequired(v bool) {
	o.Required = &v
}

// GetPredefinedValues returns the PredefinedValues field value if set, zero value otherwise.
func (o *UserDefinedFieldDefinition) GetPredefinedValues() []string {
	if o == nil || IsNil(o.PredefinedValues) {
		var ret []string
		return ret
	}
	return o.PredefinedValues
}

// GetPredefinedValuesOk returns a tuple with the PredefinedValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedFieldDefinition) GetPredefinedValuesOk() ([]string, bool) {
	if o == nil || IsNil(o.PredefinedValues) {
		return nil, false
	}
	return o.PredefinedValues, true
}

// HasPredefinedValues returns a boolean if a field has been set.
func (o *UserDefinedFieldDefinition) HasPredefinedValues() bool {
	if o != nil && !IsNil(o.PredefinedValues) {
		return true
	}

	return false
}

// SetPredefinedValues gets a reference to the given []string and assigns it to the PredefinedValues field.
func (o *UserDefinedFieldDefinition) SetPredefinedValues(v []string) {
	o.PredefinedValues = v
}

// GetValidationProperties returns the ValidationProperties field value if set, zero value otherwise.
func (o *UserDefinedFieldDefinition) GetValidationProperties() UserDefinedFieldDefinitionValidationProperties {
	if o == nil || IsNil(o.ValidationProperties) {
		var ret UserDefinedFieldDefinitionValidationProperties
		return ret
	}
	return *o.ValidationProperties
}

// GetValidationPropertiesOk returns a tuple with the ValidationProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedFieldDefinition) GetValidationPropertiesOk() (*UserDefinedFieldDefinitionValidationProperties, bool) {
	if o == nil || IsNil(o.ValidationProperties) {
		return nil, false
	}
	return o.ValidationProperties, true
}

// HasValidationProperties returns a boolean if a field has been set.
func (o *UserDefinedFieldDefinition) HasValidationProperties() bool {
	if o != nil && !IsNil(o.ValidationProperties) {
		return true
	}

	return false
}

// SetValidationProperties gets a reference to the given UserDefinedFieldDefinitionValidationProperties and assigns it to the ValidationProperties field.
func (o *UserDefinedFieldDefinition) SetValidationProperties(v UserDefinedFieldDefinitionValidationProperties) {
	o.ValidationProperties = &v
}

func (o UserDefinedFieldDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserDefinedFieldDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.ResourceType) {
		toSerialize["resourceType"] = o.ResourceType
	}
	if !IsNil(o.DataType) {
		toSerialize["dataType"] = o.DataType
	}
	if !IsNil(o.DefaultValue) {
		toSerialize["defaultValue"] = o.DefaultValue
	}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	if !IsNil(o.PredefinedValues) {
		toSerialize["predefinedValues"] = o.PredefinedValues
	}
	if !IsNil(o.ValidationProperties) {
		toSerialize["validationProperties"] = o.ValidationProperties
	}
	return toSerialize, nil
}

type NullableUserDefinedFieldDefinition struct {
	value *UserDefinedFieldDefinition
	isSet bool
}

func (v NullableUserDefinedFieldDefinition) Get() *UserDefinedFieldDefinition {
	return v.value
}

func (v *NullableUserDefinedFieldDefinition) Set(val *UserDefinedFieldDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableUserDefinedFieldDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableUserDefinedFieldDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserDefinedFieldDefinition(val *UserDefinedFieldDefinition) *NullableUserDefinedFieldDefinition {
	return &NullableUserDefinedFieldDefinition{value: val, isSet: true}
}

func (v NullableUserDefinedFieldDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserDefinedFieldDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



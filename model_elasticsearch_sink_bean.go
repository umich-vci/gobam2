/*
BlueCat Address Manager 9.5 RESTful v2 API

The **BlueCat Address Manager 9.5 RESTful v2 API** is a new RESTful API for Address Manager that presents Address Manager objects as resources. Each resource has a unique endpoint, and related resources are grouped in collections. To fetch an individual resource, a `GET` request is sent to the resource's endpoint. To fetch all resources in a collection, a `GET` request is sent to the collection's endpoint.  The RESTful v2 API is [hypermedia driven](https://en.wikipedia.org/wiki/HATEOAS) and uses the [HAL](https://en.wikipedia.org/wiki/Hypertext_Application_Language) format for representing links. When navigating through the API, you can use those links to navigate to related resources or child resources of the requested endpoint. The API supports the following media types for most endpoints:  `application/hal+json`, `application/json`, and `text/csv`.  For authentication, the API supports both `Basic` and `Bearer` HTTP authentication schemes.  To get started, create a session and receive credentials for `Basic` authentication by sending a `POST` request to the [/sessions](#/Admin%20Resources/postSession) endpoint, with a message body containing the user's credentials:  ```{\"username\":\"apiuser\", \"password\":\"apipass\"}```  The response will contain an `apiToken` field that can be entered with the username in the Swagger UI **Authorize** dialog. The response will also contain a `basicAuthenticationCredentials` field containing a base64 encoding of the requester's username and API token delimited by a colon. This string can be injected directly into request `Authorization` headers in the following format:  ```Authorization: Basic YXBpOlQ0OExOT3VIRGhDcnVBNEo1bGFES3JuS3hTZC9QK3pjczZXTzBJMDY=```  For full details on API format and authentication methods, refer to the Address Manager RESTful v2 API Guide on the BlueCat Documentation Portal.

API version: 9.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gobam2

import (
	"encoding/json"
)

// checks if the ElasticsearchSinkBean type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ElasticsearchSinkBean{}

// ElasticsearchSinkBean struct for ElasticsearchSinkBean
type ElasticsearchSinkBean struct {
	SinkBean
	Url *string `json:"url,omitempty"`
	Index *string `json:"index,omitempty" validate:"regexp=^.*\\\\S+.*$"`
	Username *string `json:"username,omitempty" validate:"regexp=^.*\\\\S+.*$"`
	Password *string `json:"password,omitempty" validate:"regexp=^.*\\\\S+.*$"`
}

// NewElasticsearchSinkBean instantiates a new ElasticsearchSinkBean object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewElasticsearchSinkBean() *ElasticsearchSinkBean {
	this := ElasticsearchSinkBean{}
	return &this
}

// NewElasticsearchSinkBeanWithDefaults instantiates a new ElasticsearchSinkBean object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewElasticsearchSinkBeanWithDefaults() *ElasticsearchSinkBean {
	this := ElasticsearchSinkBean{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ElasticsearchSinkBean) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElasticsearchSinkBean) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ElasticsearchSinkBean) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *ElasticsearchSinkBean) SetUrl(v string) {
	o.Url = &v
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *ElasticsearchSinkBean) GetIndex() string {
	if o == nil || IsNil(o.Index) {
		var ret string
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElasticsearchSinkBean) GetIndexOk() (*string, bool) {
	if o == nil || IsNil(o.Index) {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *ElasticsearchSinkBean) HasIndex() bool {
	if o != nil && !IsNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given string and assigns it to the Index field.
func (o *ElasticsearchSinkBean) SetIndex(v string) {
	o.Index = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *ElasticsearchSinkBean) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElasticsearchSinkBean) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *ElasticsearchSinkBean) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *ElasticsearchSinkBean) SetUsername(v string) {
	o.Username = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *ElasticsearchSinkBean) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElasticsearchSinkBean) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *ElasticsearchSinkBean) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *ElasticsearchSinkBean) SetPassword(v string) {
	o.Password = &v
}

func (o ElasticsearchSinkBean) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ElasticsearchSinkBean) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Index) {
		toSerialize["index"] = o.Index
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	return toSerialize, nil
}

type NullableElasticsearchSinkBean struct {
	value *ElasticsearchSinkBean
	isSet bool
}

func (v NullableElasticsearchSinkBean) Get() *ElasticsearchSinkBean {
	return v.value
}

func (v *NullableElasticsearchSinkBean) Set(val *ElasticsearchSinkBean) {
	v.value = val
	v.isSet = true
}

func (v NullableElasticsearchSinkBean) IsSet() bool {
	return v.isSet
}

func (v *NullableElasticsearchSinkBean) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableElasticsearchSinkBean(val *ElasticsearchSinkBean) *NullableElasticsearchSinkBean {
	return &NullableElasticsearchSinkBean{value: val, isSet: true}
}

func (v NullableElasticsearchSinkBean) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableElasticsearchSinkBean) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
BlueCat Address Manager 9.5 RESTful v2 API

The **BlueCat Address Manager 9.5 RESTful v2 API** is a new RESTful API for Address Manager that presents Address Manager objects as resources. Each resource has a unique endpoint, and related resources are grouped in collections. To fetch an individual resource, a `GET` request is sent to the resource's endpoint. To fetch all resources in a collection, a `GET` request is sent to the collection's endpoint.  The RESTful v2 API is [hypermedia driven](https://en.wikipedia.org/wiki/HATEOAS) and uses the [HAL](https://en.wikipedia.org/wiki/Hypertext_Application_Language) format for representing links. When navigating through the API, you can use those links to navigate to related resources or child resources of the requested endpoint. The API supports the following media types for most endpoints:  `application/hal+json`, `application/json`, and `text/csv`.  For authentication, the API supports both `Basic` and `Bearer` HTTP authentication schemes.  To get started, create a session and receive credentials for `Basic` authentication by sending a `POST` request to the [/sessions](#/Admin%20Resources/postSession) endpoint, with a message body containing the user's credentials:  ```{\"username\":\"apiuser\", \"password\":\"apipass\"}```  The response will contain an `apiToken` field that can be entered with the username in the Swagger UI **Authorize** dialog. The response will also contain a `basicAuthenticationCredentials` field containing a base64 encoding of the requester's username and API token delimited by a colon. This string can be injected directly into request `Authorization` headers in the following format:  ```Authorization: Basic YXBpOlQ0OExOT3VIRGhDcnVBNEo1bGFES3JuS3hTZC9QK3pjczZXTzBJMDY=```  For full details on API format and authentication methods, refer to the Address Manager RESTful v2 API Guide on the BlueCat Documentation Portal.

API version: 9.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gobam2

import (
	"encoding/json"
)

// checks if the Snmpv3Bean type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Snmpv3Bean{}

// Snmpv3Bean struct for Snmpv3Bean
type Snmpv3Bean struct {
	SnmpBean
	// The SNMP security level.
	SecurityLevel *string `json:"securityLevel,omitempty"`
	Usernames []string `json:"usernames,omitempty"`
	Context *string `json:"context,omitempty"`
	// The authentication protocol to use with SNMP version 3.
	AuthenticationProtocol *string `json:"authenticationProtocol,omitempty"`
	// The user authentication password of the SNMP user.
	AuthenticationPassphrase *string `json:"authenticationPassphrase,omitempty"`
	// The user authentication protocol used to encrypt the SNMP messages.
	PrivacyProtocol *string `json:"privacyProtocol,omitempty"`
	// The privacy authentication password used to encrypt the SNMP data.
	PrivacyPassphrase *string `json:"privacyPassphrase,omitempty"`
}

// NewSnmpv3Bean instantiates a new Snmpv3Bean object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnmpv3Bean() *Snmpv3Bean {
	this := Snmpv3Bean{}
	return &this
}

// NewSnmpv3BeanWithDefaults instantiates a new Snmpv3Bean object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnmpv3BeanWithDefaults() *Snmpv3Bean {
	this := Snmpv3Bean{}
	return &this
}

// GetSecurityLevel returns the SecurityLevel field value if set, zero value otherwise.
func (o *Snmpv3Bean) GetSecurityLevel() string {
	if o == nil || IsNil(o.SecurityLevel) {
		var ret string
		return ret
	}
	return *o.SecurityLevel
}

// GetSecurityLevelOk returns a tuple with the SecurityLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Snmpv3Bean) GetSecurityLevelOk() (*string, bool) {
	if o == nil || IsNil(o.SecurityLevel) {
		return nil, false
	}
	return o.SecurityLevel, true
}

// HasSecurityLevel returns a boolean if a field has been set.
func (o *Snmpv3Bean) HasSecurityLevel() bool {
	if o != nil && !IsNil(o.SecurityLevel) {
		return true
	}

	return false
}

// SetSecurityLevel gets a reference to the given string and assigns it to the SecurityLevel field.
func (o *Snmpv3Bean) SetSecurityLevel(v string) {
	o.SecurityLevel = &v
}

// GetUsernames returns the Usernames field value if set, zero value otherwise.
func (o *Snmpv3Bean) GetUsernames() []string {
	if o == nil || IsNil(o.Usernames) {
		var ret []string
		return ret
	}
	return o.Usernames
}

// GetUsernamesOk returns a tuple with the Usernames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Snmpv3Bean) GetUsernamesOk() ([]string, bool) {
	if o == nil || IsNil(o.Usernames) {
		return nil, false
	}
	return o.Usernames, true
}

// HasUsernames returns a boolean if a field has been set.
func (o *Snmpv3Bean) HasUsernames() bool {
	if o != nil && !IsNil(o.Usernames) {
		return true
	}

	return false
}

// SetUsernames gets a reference to the given []string and assigns it to the Usernames field.
func (o *Snmpv3Bean) SetUsernames(v []string) {
	o.Usernames = v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *Snmpv3Bean) GetContext() string {
	if o == nil || IsNil(o.Context) {
		var ret string
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Snmpv3Bean) GetContextOk() (*string, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *Snmpv3Bean) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given string and assigns it to the Context field.
func (o *Snmpv3Bean) SetContext(v string) {
	o.Context = &v
}

// GetAuthenticationProtocol returns the AuthenticationProtocol field value if set, zero value otherwise.
func (o *Snmpv3Bean) GetAuthenticationProtocol() string {
	if o == nil || IsNil(o.AuthenticationProtocol) {
		var ret string
		return ret
	}
	return *o.AuthenticationProtocol
}

// GetAuthenticationProtocolOk returns a tuple with the AuthenticationProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Snmpv3Bean) GetAuthenticationProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.AuthenticationProtocol) {
		return nil, false
	}
	return o.AuthenticationProtocol, true
}

// HasAuthenticationProtocol returns a boolean if a field has been set.
func (o *Snmpv3Bean) HasAuthenticationProtocol() bool {
	if o != nil && !IsNil(o.AuthenticationProtocol) {
		return true
	}

	return false
}

// SetAuthenticationProtocol gets a reference to the given string and assigns it to the AuthenticationProtocol field.
func (o *Snmpv3Bean) SetAuthenticationProtocol(v string) {
	o.AuthenticationProtocol = &v
}

// GetAuthenticationPassphrase returns the AuthenticationPassphrase field value if set, zero value otherwise.
func (o *Snmpv3Bean) GetAuthenticationPassphrase() string {
	if o == nil || IsNil(o.AuthenticationPassphrase) {
		var ret string
		return ret
	}
	return *o.AuthenticationPassphrase
}

// GetAuthenticationPassphraseOk returns a tuple with the AuthenticationPassphrase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Snmpv3Bean) GetAuthenticationPassphraseOk() (*string, bool) {
	if o == nil || IsNil(o.AuthenticationPassphrase) {
		return nil, false
	}
	return o.AuthenticationPassphrase, true
}

// HasAuthenticationPassphrase returns a boolean if a field has been set.
func (o *Snmpv3Bean) HasAuthenticationPassphrase() bool {
	if o != nil && !IsNil(o.AuthenticationPassphrase) {
		return true
	}

	return false
}

// SetAuthenticationPassphrase gets a reference to the given string and assigns it to the AuthenticationPassphrase field.
func (o *Snmpv3Bean) SetAuthenticationPassphrase(v string) {
	o.AuthenticationPassphrase = &v
}

// GetPrivacyProtocol returns the PrivacyProtocol field value if set, zero value otherwise.
func (o *Snmpv3Bean) GetPrivacyProtocol() string {
	if o == nil || IsNil(o.PrivacyProtocol) {
		var ret string
		return ret
	}
	return *o.PrivacyProtocol
}

// GetPrivacyProtocolOk returns a tuple with the PrivacyProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Snmpv3Bean) GetPrivacyProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.PrivacyProtocol) {
		return nil, false
	}
	return o.PrivacyProtocol, true
}

// HasPrivacyProtocol returns a boolean if a field has been set.
func (o *Snmpv3Bean) HasPrivacyProtocol() bool {
	if o != nil && !IsNil(o.PrivacyProtocol) {
		return true
	}

	return false
}

// SetPrivacyProtocol gets a reference to the given string and assigns it to the PrivacyProtocol field.
func (o *Snmpv3Bean) SetPrivacyProtocol(v string) {
	o.PrivacyProtocol = &v
}

// GetPrivacyPassphrase returns the PrivacyPassphrase field value if set, zero value otherwise.
func (o *Snmpv3Bean) GetPrivacyPassphrase() string {
	if o == nil || IsNil(o.PrivacyPassphrase) {
		var ret string
		return ret
	}
	return *o.PrivacyPassphrase
}

// GetPrivacyPassphraseOk returns a tuple with the PrivacyPassphrase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Snmpv3Bean) GetPrivacyPassphraseOk() (*string, bool) {
	if o == nil || IsNil(o.PrivacyPassphrase) {
		return nil, false
	}
	return o.PrivacyPassphrase, true
}

// HasPrivacyPassphrase returns a boolean if a field has been set.
func (o *Snmpv3Bean) HasPrivacyPassphrase() bool {
	if o != nil && !IsNil(o.PrivacyPassphrase) {
		return true
	}

	return false
}

// SetPrivacyPassphrase gets a reference to the given string and assigns it to the PrivacyPassphrase field.
func (o *Snmpv3Bean) SetPrivacyPassphrase(v string) {
	o.PrivacyPassphrase = &v
}

func (o Snmpv3Bean) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Snmpv3Bean) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SecurityLevel) {
		toSerialize["securityLevel"] = o.SecurityLevel
	}
	if !IsNil(o.Usernames) {
		toSerialize["usernames"] = o.Usernames
	}
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.AuthenticationProtocol) {
		toSerialize["authenticationProtocol"] = o.AuthenticationProtocol
	}
	if !IsNil(o.AuthenticationPassphrase) {
		toSerialize["authenticationPassphrase"] = o.AuthenticationPassphrase
	}
	if !IsNil(o.PrivacyProtocol) {
		toSerialize["privacyProtocol"] = o.PrivacyProtocol
	}
	if !IsNil(o.PrivacyPassphrase) {
		toSerialize["privacyPassphrase"] = o.PrivacyPassphrase
	}
	return toSerialize, nil
}

type NullableSnmpv3Bean struct {
	value *Snmpv3Bean
	isSet bool
}

func (v NullableSnmpv3Bean) Get() *Snmpv3Bean {
	return v.value
}

func (v *NullableSnmpv3Bean) Set(val *Snmpv3Bean) {
	v.value = val
	v.isSet = true
}

func (v NullableSnmpv3Bean) IsSet() bool {
	return v.isSet
}

func (v *NullableSnmpv3Bean) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnmpv3Bean(val *Snmpv3Bean) *NullableSnmpv3Bean {
	return &NullableSnmpv3Bean{value: val, isSet: true}
}

func (v NullableSnmpv3Bean) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnmpv3Bean) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


